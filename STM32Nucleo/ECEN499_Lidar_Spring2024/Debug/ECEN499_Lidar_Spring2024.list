
ECEN499_Lidar_Spring2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000934c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  080094e0  080094e0  0000a4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009980  08009980  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009980  08009980  0000a980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009988  08009988  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009988  08009988  0000a988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800998c  0800998c  0000a98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009990  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001d4  08009b64  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08009b64  0000b420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de85  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb6  00000000  00000000  00019089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0001af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d7  00000000  00000000  0001bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027053  00000000  00000000  0001c5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffa7  00000000  00000000  00043622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec802  00000000  00000000  000535c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fdcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049fc  00000000  00000000  0013fe10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0014480c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094c4 	.word	0x080094c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080094c4 	.word	0x080094c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <wait_cycles>:





void wait_cycles(uint32_t cycles){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	while (cycles-- > 0){
 8000fec:	e000      	b.n	8000ff0 <wait_cycles+0xc>
		__asm__ volatile ("nop");
 8000fee:	bf00      	nop
	while (cycles-- > 0){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1e5a      	subs	r2, r3, #1
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f9      	bne.n	8000fee <wait_cycles+0xa>
	} 				// @ 8MHz, each clock cycle is 125 ns
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <SPI_Write_8>:


void SPI_Write_8(uint8_t data)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	e020      	b.n	800105a <SPI_Write_8+0x52>
    {
        // Set MOSI according to the most significant bit of data
        HAL_GPIO_WritePin(GPIOA, Din_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	09db      	lsrs	r3, r3, #7
 800101c:	b2db      	uxtb	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	2180      	movs	r1, #128	@ 0x80
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f001 f979 	bl	800231c <HAL_GPIO_WritePin>
        data <<= 1; // Shift data left
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	71fb      	strb	r3, [r7, #7]

        // Toggle SCK
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2120      	movs	r1, #32
 8001034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001038:	f001 f970 	bl	800231c <HAL_GPIO_WritePin>
        wait_cycles(4); // Small delay to simulate clock
 800103c:	2004      	movs	r0, #4
 800103e:	f7ff ffd1 	bl	8000fe4 <wait_cycles>
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2120      	movs	r1, #32
 8001046:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104a:	f001 f967 	bl	800231c <HAL_GPIO_WritePin>
        wait_cycles(4);
 800104e:	2004      	movs	r0, #4
 8001050:	f7ff ffc8 	bl	8000fe4 <wait_cycles>
    for (int i = 0; i < 8; i++)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b07      	cmp	r3, #7
 800105e:	dddb      	ble.n	8001018 <SPI_Write_8+0x10>
    }
    HAL_GPIO_WritePin(GPIOA, Din_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2180      	movs	r1, #128	@ 0x80
 8001064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001068:	f001 f958 	bl	800231c <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <SPI_Write_24>:

void SPI_Write_24(uint32_t data)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 24; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	e023      	b.n	80010ca <SPI_Write_24+0x56>
    {
        // Set MOSI according to the most significant bit of data
        HAL_GPIO_WritePin(GPIOA, Din_Pin, (data & 0x800000) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0ddb      	lsrs	r3, r3, #23
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	2180      	movs	r1, #128	@ 0x80
 8001092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001096:	f001 f941 	bl	800231c <HAL_GPIO_WritePin>
        data <<= 1; // Shift data left
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	607b      	str	r3, [r7, #4]

        // Toggle SCK
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2120      	movs	r1, #32
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a8:	f001 f938 	bl	800231c <HAL_GPIO_WritePin>
        wait_cycles(4); // Small delay to simulate clock
 80010ac:	2004      	movs	r0, #4
 80010ae:	f7ff ff99 	bl	8000fe4 <wait_cycles>
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2120      	movs	r1, #32
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ba:	f001 f92f 	bl	800231c <HAL_GPIO_WritePin>
        wait_cycles(4);
 80010be:	2004      	movs	r0, #4
 80010c0:	f7ff ff90 	bl	8000fe4 <wait_cycles>
    for (int i = 0; i < 24; i++)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b17      	cmp	r3, #23
 80010ce:	ddd8      	ble.n	8001082 <SPI_Write_24+0xe>
    }
    HAL_GPIO_WritePin(GPIOA, Din_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2180      	movs	r1, #128	@ 0x80
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d8:	f001 f920 	bl	800231c <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <SPI_Read_8>:

uint8_t SPI_Read_8(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	e022      	b.n	800113a <SPI_Read_8+0x56>
    {
        data <<= 1; // Shift data left
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	71fb      	strb	r3, [r7, #7]


        // Toggle SCK
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2120      	movs	r1, #32
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001102:	f001 f90b 	bl	800231c <HAL_GPIO_WritePin>

        // Read MISO
        if (HAL_GPIO_ReadPin(GPIOB, Dout_Pin) == GPIO_PIN_SET)
 8001106:	2140      	movs	r1, #64	@ 0x40
 8001108:	4810      	ldr	r0, [pc, #64]	@ (800114c <SPI_Read_8+0x68>)
 800110a:	f001 f8ef 	bl	80022ec <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d103      	bne.n	800111c <SPI_Read_8+0x38>
        {
            data |= 0x01;
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	71fb      	strb	r3, [r7, #7]
        }

        wait_cycles(4);
 800111c:	2004      	movs	r0, #4
 800111e:	f7ff ff61 	bl	8000fe4 <wait_cycles>
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2120      	movs	r1, #32
 8001126:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112a:	f001 f8f7 	bl	800231c <HAL_GPIO_WritePin>
        wait_cycles(4);
 800112e:	2004      	movs	r0, #4
 8001130:	f7ff ff58 	bl	8000fe4 <wait_cycles>
    for (int i = 0; i < 8; i++)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b07      	cmp	r3, #7
 800113e:	ddd9      	ble.n	80010f4 <SPI_Read_8+0x10>
    }
    return data;
 8001140:	79fb      	ldrb	r3, [r7, #7]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	48000400 	.word	0x48000400

08001150 <SPI_Read_24>:

uint32_t SPI_Read_24(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
    uint32_t data = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 24; i++)
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	e022      	b.n	80011a6 <SPI_Read_24+0x56>
    {
        data <<= 1; // Shift data left
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	607b      	str	r3, [r7, #4]

        // Toggle SCK
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2120      	movs	r1, #32
 800116a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116e:	f001 f8d5 	bl	800231c <HAL_GPIO_WritePin>

        // Read MISO
        if (HAL_GPIO_ReadPin(GPIOB, Dout_Pin) == GPIO_PIN_SET)
 8001172:	2140      	movs	r1, #64	@ 0x40
 8001174:	4810      	ldr	r0, [pc, #64]	@ (80011b8 <SPI_Read_24+0x68>)
 8001176:	f001 f8b9 	bl	80022ec <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b01      	cmp	r3, #1
 800117e:	d103      	bne.n	8001188 <SPI_Read_24+0x38>
        {
            data |= 0x01;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	607b      	str	r3, [r7, #4]
        }

        wait_cycles(4);
 8001188:	2004      	movs	r0, #4
 800118a:	f7ff ff2b 	bl	8000fe4 <wait_cycles>
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2120      	movs	r1, #32
 8001192:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001196:	f001 f8c1 	bl	800231c <HAL_GPIO_WritePin>
        wait_cycles(4);
 800119a:	2004      	movs	r0, #4
 800119c:	f7ff ff22 	bl	8000fe4 <wait_cycles>
    for (int i = 0; i < 24; i++)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b17      	cmp	r3, #23
 80011aa:	ddd9      	ble.n	8001160 <SPI_Read_24+0x10>
    }
    return data;
 80011ac:	687b      	ldr	r3, [r7, #4]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	48000400 	.word	0x48000400

080011bc <TDC7200_Read_Register>:

uint32_t TDC7200_Read_Register(uint8_t reg)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = (reg & 0x3F);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011cc:	72fb      	strb	r3, [r7, #11]
    uint32_t rxData = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_WritePin(GPIOA, CS_N_Pin, GPIO_PIN_RESET); // CS low
 80011d2:	2200      	movs	r2, #0
 80011d4:	2140      	movs	r1, #64	@ 0x40
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011da:	f001 f89f 	bl	800231c <HAL_GPIO_WritePin>

    if (reg <= 0x09){
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b09      	cmp	r3, #9
 80011e2:	d808      	bhi.n	80011f6 <TDC7200_Read_Register+0x3a>

        SPI_Write_8(txData); // Send register address
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff0e 	bl	8001008 <SPI_Write_8>
        rxData = SPI_Read_8(); // Read data
 80011ec:	f7ff ff7a 	bl	80010e4 <SPI_Read_8>
 80011f0:	4603      	mov	r3, r0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e006      	b.n	8001204 <TDC7200_Read_Register+0x48>

    }
    else{

        SPI_Write_8(txData); // Send register address
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff05 	bl	8001008 <SPI_Write_8>
        rxData = SPI_Read_24(); // Read data
 80011fe:	f7ff ffa7 	bl	8001150 <SPI_Read_24>
 8001202:	60f8      	str	r0, [r7, #12]

    }

    HAL_GPIO_WritePin(GPIOA, CS_N_Pin, GPIO_PIN_SET); // CS high
 8001204:	2201      	movs	r2, #1
 8001206:	2140      	movs	r1, #64	@ 0x40
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f001 f886 	bl	800231c <HAL_GPIO_WritePin>

    return rxData;
 8001210:	68fb      	ldr	r3, [r7, #12]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <TDC7200_Write_Register>:

void TDC7200_Write_Register(uint8_t reg, uint32_t value)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	6039      	str	r1, [r7, #0]
 8001224:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = (reg & 0x3F) | 0x40; // Ensure bit 6 is set for write
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800122e:	b25b      	sxtb	r3, r3
 8001230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001234:	b25b      	sxtb	r3, r3
 8001236:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOA, CS_N_Pin, GPIO_PIN_RESET); // CS low
 8001238:	2200      	movs	r2, #0
 800123a:	2140      	movs	r1, #64	@ 0x40
 800123c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001240:	f001 f86c 	bl	800231c <HAL_GPIO_WritePin>

    if (reg <= 0x09){
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b09      	cmp	r3, #9
 8001248:	d809      	bhi.n	800125e <TDC7200_Write_Register+0x44>

        SPI_Write_8(txData); // Send register address
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fedb 	bl	8001008 <SPI_Write_8>
        SPI_Write_8((uint8_t) value); // Send value
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fed6 	bl	8001008 <SPI_Write_8>
 800125c:	e006      	b.n	800126c <TDC7200_Write_Register+0x52>

    }

    else{

    SPI_Write_8(txData); // Send register address
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fed1 	bl	8001008 <SPI_Write_8>
    SPI_Write_24(value); // Send value
 8001266:	6838      	ldr	r0, [r7, #0]
 8001268:	f7ff ff04 	bl	8001074 <SPI_Write_24>

    }

    HAL_GPIO_WritePin(GPIOA, CS_N_Pin, GPIO_PIN_SET); // CS high
 800126c:	2201      	movs	r2, #1
 800126e:	2140      	movs	r1, #64	@ 0x40
 8001270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001274:	f001 f852 	bl	800231c <HAL_GPIO_WritePin>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <Set_Pot_Value>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Set_Pot_Value(uint8_t pot_value)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af02      	add	r7, sp, #8
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	 * The register address for the pot is 0b 0000 0000
	 * Potentiometer Values can range from 0x00 to 0xFF
	 */

	uint8_t tx_data[2];  // Buffer to hold the data to be transmitted
	uint8_t SLAVE_ADDRESS = (0x2E << 1) ; //This will need to be changed.
 800128a:	235c      	movs	r3, #92	@ 0x5c
 800128c:	73fb      	strb	r3, [r7, #15]
	// Populate the data buffer
	tx_data[0] = 0b00000000;  // Register address to write to
 800128e:	2300      	movs	r3, #0
 8001290:	733b      	strb	r3, [r7, #12]
	tx_data[1] = pot_value;   // 8-bit word to write //SEE Resistance Value table in Data sheet.
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	737b      	strb	r3, [r7, #13]

	// Perform I2C transmission
	HAL_I2C_Master_Transmit(&hi2c1, (uint8_t)SLAVE_ADDRESS, tx_data, 2, HAL_MAX_DELAY);
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	b299      	uxth	r1, r3
 800129a:	f107 020c 	add.w	r2, r7, #12
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2302      	movs	r3, #2
 80012a6:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <Set_Pot_Value+0x34>)
 80012a8:	f001 f8ec 	bl	8002484 <HAL_I2C_Master_Transmit>
}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200001f0 	.word	0x200001f0

080012b8 <Intialize_TDC>:

void Intialize_TDC(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0
	  char thing[30] = "Yeetus";
 80012be:	4a26      	ldr	r2, [pc, #152]	@ (8001358 <Intialize_TDC+0xa0>)
 80012c0:	463b      	mov	r3, r7
 80012c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c6:	6018      	str	r0, [r3, #0]
 80012c8:	3304      	adds	r3, #4
 80012ca:	8019      	strh	r1, [r3, #0]
 80012cc:	3302      	adds	r3, #2
 80012ce:	0c0a      	lsrs	r2, r1, #16
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	f8c3 2013 	str.w	r2, [r3, #19]
	  HAL_UART_Transmit(&huart2, (unsigned char*) thing, strlen(thing), UART_DELAY);
 80012e4:	463b      	mov	r3, r7
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ffc2 	bl	8000270 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4639      	mov	r1, r7
 80012f2:	2364      	movs	r3, #100	@ 0x64
 80012f4:	4819      	ldr	r0, [pc, #100]	@ (800135c <Intialize_TDC+0xa4>)
 80012f6:	f002 fff3 	bl	80042e0 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOA, CS_N_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2140      	movs	r1, #64	@ 0x40
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001302:	f001 f80b 	bl	800231c <HAL_GPIO_WritePin>
	// Set Enable Pin
 	HAL_GPIO_WritePin(GPIOA, Enable_Pin, GPIO_PIN_SET);
 8001306:	2201      	movs	r2, #1
 8001308:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800130c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001310:	f001 f804 	bl	800231c <HAL_GPIO_WritePin>

	// wait at least 1.5 ms (12,000 clock cycles) for LDO_SET2 (see datasheet 8.4.7)
	wait_cycles(24000);
 8001314:	f645 50c0 	movw	r0, #24000	@ 0x5dc0
 8001318:	f7ff fe64 	bl	8000fe4 <wait_cycles>

	// Set tdc to mode 2
	// set force calibration to 1
	uint32_t config1 = TDC7200_Read_Register(TDC_CONFIG1) | 0x12;
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ff4d 	bl	80011bc <TDC7200_Read_Register>
 8001322:	4603      	mov	r3, r0
 8001324:	f043 0312 	orr.w	r3, r3, #18
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
	TDC7200_Write_Register(TDC_CONFIG1, config1);
 800132a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff ff74 	bl	800121a <TDC7200_Write_Register>
	config1 = TDC7200_Read_Register(TDC_CONFIG1);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff ff42 	bl	80011bc <TDC7200_Read_Register>
 8001338:	6278      	str	r0, [r7, #36]	@ 0x24

	// set calibration2_periods to b'11
	uint32_t config2 = TDC7200_Read_Register(TDC_CONFIG2) | 0xC0;
 800133a:	2001      	movs	r0, #1
 800133c:	f7ff ff3e 	bl	80011bc <TDC7200_Read_Register>
 8001340:	4603      	mov	r3, r0
 8001342:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001346:	623b      	str	r3, [r7, #32]
	TDC7200_Write_Register(TDC_CONFIG2, config2);
 8001348:	6a39      	ldr	r1, [r7, #32]
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff ff65 	bl	800121a <TDC7200_Write_Register>


}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	@ 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	080094e0 	.word	0x080094e0
 800135c:	20000244 	.word	0x20000244

08001360 <take_measurement>:

double take_measurement(){
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b096      	sub	sp, #88	@ 0x58
 8001364:	af00      	add	r7, sp, #0
	// Set START_MEAS bit to 1


	uint32_t config_value = TDC7200_Read_Register(TDC_CONFIG1);
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff ff28 	bl	80011bc <TDC7200_Read_Register>
 800136c:	6578      	str	r0, [r7, #84]	@ 0x54
	config_value |= 0x01;
 800136e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	657b      	str	r3, [r7, #84]	@ 0x54
	TDC7200_Write_Register(TDC_CONFIG1, config_value);
 8001376:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff ff4e 	bl	800121a <TDC7200_Write_Register>

	wait_cycles(400);
 800137e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001382:	f7ff fe2f 	bl	8000fe4 <wait_cycles>
//			wait_cycles(1);
//		}


    //when trig goes high, set start_pin high and laser control pin high
	HAL_GPIO_WritePin(GPIOC, Laser_Control_Pin, GPIO_PIN_SET); // Laser High
 8001386:	2201      	movs	r2, #1
 8001388:	2101      	movs	r1, #1
 800138a:	485b      	ldr	r0, [pc, #364]	@ (80014f8 <take_measurement+0x198>)
 800138c:	f000 ffc6 	bl	800231c <HAL_GPIO_WritePin>
	//wait_cycles(1);//Optimize delay for accurate timing //less than then 33ns would be great.
	HAL_GPIO_WritePin(GPIOA, Start_Pin, GPIO_PIN_SET); // Start High
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001396:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139a:	f000 ffbf 	bl	800231c <HAL_GPIO_WritePin>
    // wait for interrupt
//    while (HAL_GPIO_ReadPin(GPIOA, Interrupt_Pin) == GPIO_PIN_SET)
//        {
//            wait_cycles(1);
//        }
wait_cycles(64000);
 800139e:	f44f 407a 	mov.w	r0, #64000	@ 0xfa00
 80013a2:	f7ff fe1f 	bl	8000fe4 <wait_cycles>
	// read result
    HAL_GPIO_WritePin(GPIOA, Start_Pin, GPIO_PIN_RESET); // Start low
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b0:	f000 ffb4 	bl	800231c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, Laser_Control_Pin, GPIO_PIN_RESET); // Laser low
 80013b4:	2200      	movs	r2, #0
 80013b6:	2101      	movs	r1, #1
 80013b8:	484f      	ldr	r0, [pc, #316]	@ (80014f8 <take_measurement+0x198>)
 80013ba:	f000 ffaf 	bl	800231c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOC, Test_Output_Pin, GPIO_PIN_RESET); // for testing

    // Calculate Time of Flight
    wait_cycles(5000);
 80013be:	f241 3088 	movw	r0, #5000	@ 0x1388
 80013c2:	f7ff fe0f 	bl	8000fe4 <wait_cycles>
    double time1 = TDC7200_Read_Register(TDC_TIME1);
 80013c6:	2010      	movs	r0, #16
 80013c8:	f7ff fef8 	bl	80011bc <TDC7200_Read_Register>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f898 	bl	8000504 <__aeabi_ui2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double time2 = TDC7200_Read_Register(TDC_TIME2);
 80013dc:	2012      	movs	r0, #18
 80013de:	f7ff feed 	bl	80011bc <TDC7200_Read_Register>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f88d 	bl	8000504 <__aeabi_ui2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double cal1 = TDC7200_Read_Register(TDC_CALIBRATION1);
 80013f2:	201b      	movs	r0, #27
 80013f4:	f7ff fee2 	bl	80011bc <TDC7200_Read_Register>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f882 	bl	8000504 <__aeabi_ui2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double cal2 = TDC7200_Read_Register(TDC_CALIBRATION2);
 8001408:	201c      	movs	r0, #28
 800140a:	f7ff fed7 	bl	80011bc <TDC7200_Read_Register>
 800140e:	4603      	mov	r3, r0
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f877 	bl	8000504 <__aeabi_ui2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double clock_count1 = TDC7200_Read_Register(TDC_CLOCK_COUNT1);
 800141e:	2011      	movs	r0, #17
 8001420:	f7ff fecc 	bl	80011bc <TDC7200_Read_Register>
 8001424:	4603      	mov	r3, r0
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f86c 	bl	8000504 <__aeabi_ui2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    const double cal2_periods = 40;
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <take_measurement+0x19c>)
 800143a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    const double clk_period = 0.000000125;
 800143e:	a32c      	add	r3, pc, #176	@ (adr r3, 80014f0 <take_measurement+0x190>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double cal_count = (cal2-cal1)/(cal2_periods - 1);
 8001448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800144c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001450:	f7fe ff1a 	bl	8000288 <__aeabi_dsub>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4614      	mov	r4, r2
 800145a:	461d      	mov	r5, r3
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b27      	ldr	r3, [pc, #156]	@ (8001500 <take_measurement+0x1a0>)
 8001462:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001466:	f7fe ff0f 	bl	8000288 <__aeabi_dsub>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4620      	mov	r0, r4
 8001470:	4629      	mov	r1, r5
 8001472:	f7ff f9eb 	bl	800084c <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    double norm_lsb = clk_period / cal_count;
 800147e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001482:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001486:	f7ff f9e1 	bl	800084c <__aeabi_ddiv>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    double tof = ((time1 - time2) * norm_lsb) + (clock_count1 * clk_period);
 8001492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001496:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800149a:	f7fe fef5 	bl	8000288 <__aeabi_dsub>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014aa:	f7ff f8a5 	bl	80005f8 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4614      	mov	r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80014be:	f7ff f89b 	bl	80005f8 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7fe fedf 	bl	800028c <__adddf3>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	e9c7 2300 	strd	r2, r3, [r7]
    return tof;
 80014d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014da:	ec43 2b17 	vmov	d7, r2, r3

}
 80014de:	eeb0 0a47 	vmov.f32	s0, s14
 80014e2:	eef0 0a67 	vmov.f32	s1, s15
 80014e6:	3758      	adds	r7, #88	@ 0x58
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bdb0      	pop	{r4, r5, r7, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80014f4:	3e80c6f7 	.word	0x3e80c6f7
 80014f8:	48000800 	.word	0x48000800
 80014fc:	40440000 	.word	0x40440000
 8001500:	3ff00000 	.word	0x3ff00000

08001504 <calculate_offset>:

double calculate_offset(double measured_time){
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	ed87 0b00 	vstr	d0, [r7]
	// Calculate offset for time for laser to turn on and any other delays in the circuit
	return measured_time;
 800150e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001512:	ec43 2b17 	vmov	d7, r2, r3
}
 8001516:	eeb0 0a47 	vmov.f32	s0, s14
 800151a:	eef0 0a67 	vmov.f32	s1, s15
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0a2      	sub	sp, #136	@ 0x88
 800152c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152e:	f000 fbd1 	bl	8001cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001532:	f000 f857 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001536:	f000 f917 	bl	8001768 <MX_GPIO_Init>
  MX_I2C1_Init();
 800153a:	f000 f8a5 	bl	8001688 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800153e:	f000 f8e3 	bl	8001708 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Intialize_TDC();
 8001542:	f7ff feb9 	bl	80012b8 <Intialize_TDC>

  wait_cycles(1000000);
 8001546:	4822      	ldr	r0, [pc, #136]	@ (80015d0 <main+0xa8>)
 8001548:	f7ff fd4c 	bl	8000fe4 <wait_cycles>

  Set_Pot_Value(108);
 800154c:	206c      	movs	r0, #108	@ 0x6c
 800154e:	f7ff fe97 	bl	8001280 <Set_Pot_Value>
//	  			  strncpy(message, "Please use the set_pot_val command again with valid pot value.", MAX_MESSAGE_SIZE);
//	  		  }
//	  	  }
//	  	  else if (strcmp(message, "Start_measure") == 0){

	  wait_cycles(1000000);
 8001552:	481f      	ldr	r0, [pc, #124]	@ (80015d0 <main+0xa8>)
 8001554:	f7ff fd46 	bl	8000fe4 <wait_cycles>
	  double tof = take_measurement();
 8001558:	f7ff ff02 	bl	8001360 <take_measurement>
 800155c:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	  tof = calculate_offset(tof);
 8001560:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8001564:	f7ff ffce 	bl	8001504 <calculate_offset>
 8001568:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	  double distance_meas = tof*299792458*0.5;
 800156c:	a316      	add	r3, pc, #88	@ (adr r3, 80015c8 <main+0xa0>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001576:	f7ff f83f 	bl	80005f8 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <main+0xac>)
 8001588:	f7ff f836 	bl	80005f8 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	  char distance_meas_str[MAX_MESSAGE_SIZE];
	  snprintf(distance_meas_str, MAX_MESSAGE_SIZE, "%f%s", distance_meas,"\r\n");
 8001594:	1d38      	adds	r0, r7, #4
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <main+0xb0>)
 8001598:	9302      	str	r3, [sp, #8]
 800159a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800159e:	e9cd 2300 	strd	r2, r3, [sp]
 80015a2:	4a0e      	ldr	r2, [pc, #56]	@ (80015dc <main+0xb4>)
 80015a4:	2164      	movs	r1, #100	@ 0x64
 80015a6:	f004 fb1f 	bl	8005be8 <sniprintf>
	  //char nl_character[MAX_MESSAGE_SIZE] ;//
	  //snprintf(nl_character, MAX_MESSAGE_SIZE, "%s", "\n\0");
//	  strncpy(distance, distance_meas_str, MAX_MESSAGE_SIZE);
	  HAL_UART_Transmit(&huart2, (unsigned char*) distance_meas_str, strlen(distance_meas_str), UART_DELAY);
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe fe5f 	bl	8000270 <strlen>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	1d39      	adds	r1, r7, #4
 80015b8:	2364      	movs	r3, #100	@ 0x64
 80015ba:	4809      	ldr	r0, [pc, #36]	@ (80015e0 <main+0xb8>)
 80015bc:	f002 fe90 	bl	80042e0 <HAL_UART_Transmit>
  {
 80015c0:	bf00      	nop
 80015c2:	e7c6      	b.n	8001552 <main+0x2a>
 80015c4:	f3af 8000 	nop.w
 80015c8:	4a000000 	.word	0x4a000000
 80015cc:	41b1de78 	.word	0x41b1de78
 80015d0:	000f4240 	.word	0x000f4240
 80015d4:	3fe00000 	.word	0x3fe00000
 80015d8:	08009508 	.word	0x08009508
 80015dc:	08009500 	.word	0x08009500
 80015e0:	20000244 	.word	0x20000244

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b096      	sub	sp, #88	@ 0x58
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2244      	movs	r2, #68	@ 0x44
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fb8f 	bl	8005d16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800160a:	f001 fb09 	bl	8002c20 <HAL_PWREx_ControlVoltageScaling>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001614:	f000 f948 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001618:	2302      	movs	r3, #2
 800161a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001620:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001622:	2310      	movs	r3, #16
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001626:	2302      	movs	r3, #2
 8001628:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800162a:	2302      	movs	r3, #2
 800162c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800162e:	2302      	movs	r3, #2
 8001630:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001632:	2308      	movs	r3, #8
 8001634:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001636:	2307      	movs	r3, #7
 8001638:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 800163e:	2308      	movs	r3, #8
 8001640:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4618      	mov	r0, r3
 8001648:	f001 fb40 	bl	8002ccc <HAL_RCC_OscConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001652:	f000 f929 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001656:	230f      	movs	r3, #15
 8001658:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165a:	2303      	movs	r3, #3
 800165c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f001 ff08 	bl	8003484 <HAL_RCC_ClockConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800167a:	f000 f915 	bl	80018a8 <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	3758      	adds	r7, #88	@ 0x58
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800168c:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <MX_I2C1_Init+0x74>)
 800168e:	4a1c      	ldr	r2, [pc, #112]	@ (8001700 <MX_I2C1_Init+0x78>)
 8001690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0006AFF;
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <MX_I2C1_Init+0x74>)
 8001694:	4a1b      	ldr	r2, [pc, #108]	@ (8001704 <MX_I2C1_Init+0x7c>)
 8001696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <MX_I2C1_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800169e:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <MX_I2C1_Init+0x74>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <MX_I2C1_Init+0x74>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016aa:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <MX_I2C1_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <MX_I2C1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b6:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <MX_I2C1_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <MX_I2C1_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c2:	480e      	ldr	r0, [pc, #56]	@ (80016fc <MX_I2C1_Init+0x74>)
 80016c4:	f000 fe42 	bl	800234c <HAL_I2C_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016ce:	f000 f8eb 	bl	80018a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016d2:	2100      	movs	r1, #0
 80016d4:	4809      	ldr	r0, [pc, #36]	@ (80016fc <MX_I2C1_Init+0x74>)
 80016d6:	f001 f9fd 	bl	8002ad4 <HAL_I2CEx_ConfigAnalogFilter>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016e0:	f000 f8e2 	bl	80018a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4805      	ldr	r0, [pc, #20]	@ (80016fc <MX_I2C1_Init+0x74>)
 80016e8:	f001 fa3f 	bl	8002b6a <HAL_I2CEx_ConfigDigitalFilter>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016f2:	f000 f8d9 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200001f0 	.word	0x200001f0
 8001700:	40005400 	.word	0x40005400
 8001704:	a0006aff 	.word	0xa0006aff

08001708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <MX_USART2_UART_Init+0x58>)
 800170e:	4a15      	ldr	r2, [pc, #84]	@ (8001764 <MX_USART2_UART_Init+0x5c>)
 8001710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <MX_USART2_UART_Init+0x58>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_USART2_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <MX_USART2_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_USART2_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <MX_USART2_UART_Init+0x58>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <MX_USART2_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_USART2_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <MX_USART2_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <MX_USART2_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_USART2_UART_Init+0x58>)
 800174c:	f002 fd7a 	bl	8004244 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001756:	f000 f8a7 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000244 	.word	0x20000244
 8001764:	40004400 	.word	0x40004400

08001768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	4b47      	ldr	r3, [pc, #284]	@ (800189c <MX_GPIO_Init+0x134>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	4a46      	ldr	r2, [pc, #280]	@ (800189c <MX_GPIO_Init+0x134>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178a:	4b44      	ldr	r3, [pc, #272]	@ (800189c <MX_GPIO_Init+0x134>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b41      	ldr	r3, [pc, #260]	@ (800189c <MX_GPIO_Init+0x134>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4a40      	ldr	r2, [pc, #256]	@ (800189c <MX_GPIO_Init+0x134>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4b3e      	ldr	r3, [pc, #248]	@ (800189c <MX_GPIO_Init+0x134>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b3b      	ldr	r3, [pc, #236]	@ (800189c <MX_GPIO_Init+0x134>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b2:	4a3a      	ldr	r2, [pc, #232]	@ (800189c <MX_GPIO_Init+0x134>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ba:	4b38      	ldr	r3, [pc, #224]	@ (800189c <MX_GPIO_Init+0x134>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Laser_Control_Pin|Test_Output_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	f240 1101 	movw	r1, #257	@ 0x101
 80017cc:	4834      	ldr	r0, [pc, #208]	@ (80018a0 <MX_GPIO_Init+0x138>)
 80017ce:	f000 fda5 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCLK_Pin|CS_N_Pin|Din_Pin|Start_Pin
 80017d2:	2200      	movs	r2, #0
 80017d4:	f44f 61dc 	mov.w	r1, #1760	@ 0x6e0
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017dc:	f000 fd9e 	bl	800231c <HAL_GPIO_WritePin>
                          |Enable_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDA_dp_Pin|SCL_dp_Pin, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80017e6:	482f      	ldr	r0, [pc, #188]	@ (80018a4 <MX_GPIO_Init+0x13c>)
 80017e8:	f000 fd98 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Laser_Control_Pin Test_Output_Pin */
  GPIO_InitStruct.Pin = Laser_Control_Pin|Test_Output_Pin;
 80017ec:	f240 1301 	movw	r3, #257	@ 0x101
 80017f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	4826      	ldr	r0, [pc, #152]	@ (80018a0 <MX_GPIO_Init+0x138>)
 8001806:	f000 fbc7 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Pin */
  GPIO_InitStruct.Pin = Interrupt_Pin;
 800180a:	2301      	movs	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4619      	mov	r1, r3
 800181c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001820:	f000 fbba 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin CS_N_Pin Din_Pin Start_Pin
                           Enable_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|CS_N_Pin|Din_Pin|Start_Pin
 8001824:	f44f 63dc 	mov.w	r3, #1760	@ 0x6e0
 8001828:	60fb      	str	r3, [r7, #12]
                          |Enable_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001840:	f000 fbaa 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDA_dp_Pin SCL_dp_Pin */
  GPIO_InitStruct.Pin = SDA_dp_Pin|SCL_dp_Pin;
 8001844:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4811      	ldr	r0, [pc, #68]	@ (80018a4 <MX_GPIO_Init+0x13c>)
 800185e:	f000 fb9b 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigg_Pin */
  GPIO_InitStruct.Pin = Trigg_Pin;
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Trigg_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4619      	mov	r1, r3
 8001874:	480a      	ldr	r0, [pc, #40]	@ (80018a0 <MX_GPIO_Init+0x138>)
 8001876:	f000 fb8f 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dout_Pin */
  GPIO_InitStruct.Pin = Dout_Pin;
 800187a:	2340      	movs	r3, #64	@ 0x40
 800187c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001882:	2302      	movs	r3, #2
 8001884:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Dout_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_GPIO_Init+0x13c>)
 800188e:	f000 fb83 	bl	8001f98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001892:	bf00      	nop
 8001894:	3720      	adds	r7, #32
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	48000800 	.word	0x48000800
 80018a4:	48000400 	.word	0x48000400

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <Error_Handler+0x8>

080018b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <HAL_MspInit+0x44>)
 80018bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018be:	4a0e      	ldr	r2, [pc, #56]	@ (80018f8 <HAL_MspInit+0x44>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018c6:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <HAL_MspInit+0x44>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_MspInit+0x44>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <HAL_MspInit+0x44>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_MspInit+0x44>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b0ac      	sub	sp, #176	@ 0xb0
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2288      	movs	r2, #136	@ 0x88
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f004 f9fa 	bl	8005d16 <memset>
  if(hi2c->Instance==I2C1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a21      	ldr	r2, [pc, #132]	@ (80019ac <HAL_I2C_MspInit+0xb0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d13b      	bne.n	80019a4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800192c:	2340      	movs	r3, #64	@ 0x40
 800192e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001930:	2300      	movs	r3, #0
 8001932:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4618      	mov	r0, r3
 800193a:	f001 ffc7 	bl	80038cc <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001944:	f7ff ffb0 	bl	80018a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_I2C_MspInit+0xb4>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194c:	4a18      	ldr	r2, [pc, #96]	@ (80019b0 <HAL_I2C_MspInit+0xb4>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <HAL_I2C_MspInit+0xb4>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001960:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001968:	2312      	movs	r3, #18
 800196a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196e:	2301      	movs	r3, #1
 8001970:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800197a:	2304      	movs	r3, #4
 800197c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001984:	4619      	mov	r1, r3
 8001986:	480b      	ldr	r0, [pc, #44]	@ (80019b4 <HAL_I2C_MspInit+0xb8>)
 8001988:	f000 fb06 	bl	8001f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <HAL_I2C_MspInit+0xb4>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <HAL_I2C_MspInit+0xb4>)
 8001992:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001996:	6593      	str	r3, [r2, #88]	@ 0x58
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <HAL_I2C_MspInit+0xb4>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019a4:	bf00      	nop
 80019a6:	37b0      	adds	r7, #176	@ 0xb0
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40005400 	.word	0x40005400
 80019b0:	40021000 	.word	0x40021000
 80019b4:	48000400 	.word	0x48000400

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0ac      	sub	sp, #176	@ 0xb0
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2288      	movs	r2, #136	@ 0x88
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 f99c 	bl	8005d16 <memset>
  if(huart->Instance==USART2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a21      	ldr	r2, [pc, #132]	@ (8001a68 <HAL_UART_MspInit+0xb0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d13b      	bne.n	8001a60 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4618      	mov	r0, r3
 80019f6:	f001 ff69 	bl	80038cc <HAL_RCCEx_PeriphCLKConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a00:	f7ff ff52 	bl	80018a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a04:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <HAL_UART_MspInit+0xb4>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a08:	4a18      	ldr	r2, [pc, #96]	@ (8001a6c <HAL_UART_MspInit+0xb4>)
 8001a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a10:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <HAL_UART_MspInit+0xb4>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <HAL_UART_MspInit+0xb4>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a20:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <HAL_UART_MspInit+0xb4>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a28:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <HAL_UART_MspInit+0xb4>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a34:	230c      	movs	r3, #12
 8001a36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a4c:	2307      	movs	r3, #7
 8001a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a56:	4619      	mov	r1, r3
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5c:	f000 fa9c 	bl	8001f98 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a60:	bf00      	nop
 8001a62:	37b0      	adds	r7, #176	@ 0xb0
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40004400 	.word	0x40004400
 8001a6c:	40021000 	.word	0x40021000

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <NMI_Handler+0x4>

08001a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <MemManage_Handler+0x4>

08001a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac6:	f000 f961 	bl	8001d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_getpid>:
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_kill>:
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
 8001ae8:	f004 f968 	bl	8005dbc <__errno>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2216      	movs	r2, #22
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_exit>:
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffe7 	bl	8001ade <_kill>
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <_exit+0x12>

08001b14 <_read>:
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e00a      	b.n	8001b3c <_read+0x28>
 8001b26:	f3af 8000 	nop.w
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbf0      	blt.n	8001b26 <_read+0x12>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_write>:
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e009      	b.n	8001b74 <_write+0x26>
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	60ba      	str	r2, [r7, #8]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f3af 8000 	nop.w
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf1      	blt.n	8001b60 <_write+0x12>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_close>:
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <_fstat>:
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_isatty>:
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_lseek>:
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	2300      	movs	r3, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <_sbrk>:
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
 8001c20:	f004 f8cc 	bl	8005dbc <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20018000 	.word	0x20018000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	200002cc 	.word	0x200002cc
 8001c58:	20000420 	.word	0x20000420

08001c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <SystemInit+0x20>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c66:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <SystemInit+0x20>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <Reset_Handler>:
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cb8 <LoopForever+0x2>
 8001c84:	f7ff ffea 	bl	8001c5c <SystemInit>
 8001c88:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <LoopForever+0x6>)
 8001c8a:	490d      	ldr	r1, [pc, #52]	@ (8001cc0 <LoopForever+0xa>)
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <LoopForever+0xe>)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:
 8001c92:	58d4      	ldr	r4, [r2, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:
 8001c98:	18c4      	adds	r4, r0, r3
 8001c9a:	428c      	cmp	r4, r1
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <LoopForever+0x12>)
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ccc <LoopForever+0x16>)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:
 8001caa:	42a2      	cmp	r2, r4
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>
 8001cae:	f004 f88b 	bl	8005dc8 <__libc_init_array>
 8001cb2:	f7ff fc39 	bl	8001528 <main>

08001cb6 <LoopForever>:
 8001cb6:	e7fe      	b.n	8001cb6 <LoopForever>
 8001cb8:	20018000 	.word	0x20018000
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	200001d4 	.word	0x200001d4
 8001cc4:	08009990 	.word	0x08009990
 8001cc8:	200001d4 	.word	0x200001d4
 8001ccc:	20000420 	.word	0x20000420

08001cd0 <ADC1_2_IRQHandler>:
 8001cd0:	e7fe      	b.n	8001cd0 <ADC1_2_IRQHandler>
	...

08001cd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cde:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <HAL_Init+0x3c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8001d10 <HAL_Init+0x3c>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cea:	2003      	movs	r0, #3
 8001cec:	f000 f920 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f000 f80f 	bl	8001d14 <HAL_InitTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	e001      	b.n	8001d06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d02:	f7ff fdd7 	bl	80018b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d06:	79fb      	ldrb	r3, [r7, #7]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40022000 	.word	0x40022000

08001d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d20:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_InitTick+0x6c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d023      	beq.n	8001d70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d28:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <HAL_InitTick+0x70>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_InitTick+0x6c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f91d 	bl	8001f7e <HAL_SYSTICK_Config>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10f      	bne.n	8001d6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d809      	bhi.n	8001d64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f000 f8f5 	bl	8001f46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <HAL_InitTick+0x74>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e007      	b.n	8001d74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e004      	b.n	8001d74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e001      	b.n	8001d74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000008 	.word	0x20000008
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000008 	.word	0x20000008
 8001db0:	200002d0 	.word	0x200002d0

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	@ (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	200002d0 	.word	0x200002d0

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	@ (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	@ (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	@ 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff47 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff5c 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffb0 	bl	8001eec <SysTick_Config>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa6:	e17f      	b.n	80022a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2101      	movs	r1, #1
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8171 	beq.w	80022a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d005      	beq.n	8001fd8 <HAL_GPIO_Init+0x40>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d130      	bne.n	800203a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800200e:	2201      	movs	r2, #1
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	f003 0201 	and.w	r2, r3, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b03      	cmp	r3, #3
 8002044:	d118      	bne.n	8002078 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800204c:	2201      	movs	r2, #1
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	08db      	lsrs	r3, r3, #3
 8002062:	f003 0201 	and.w	r2, r3, #1
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b03      	cmp	r3, #3
 8002082:	d017      	beq.n	80020b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d123      	bne.n	8002108 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	6939      	ldr	r1, [r7, #16]
 8002104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80ac 	beq.w	80022a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	4b5f      	ldr	r3, [pc, #380]	@ (80022c8 <HAL_GPIO_Init+0x330>)
 800214c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214e:	4a5e      	ldr	r2, [pc, #376]	@ (80022c8 <HAL_GPIO_Init+0x330>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6613      	str	r3, [r2, #96]	@ 0x60
 8002156:	4b5c      	ldr	r3, [pc, #368]	@ (80022c8 <HAL_GPIO_Init+0x330>)
 8002158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002162:	4a5a      	ldr	r2, [pc, #360]	@ (80022cc <HAL_GPIO_Init+0x334>)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800218c:	d025      	beq.n	80021da <HAL_GPIO_Init+0x242>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4f      	ldr	r2, [pc, #316]	@ (80022d0 <HAL_GPIO_Init+0x338>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01f      	beq.n	80021d6 <HAL_GPIO_Init+0x23e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4e      	ldr	r2, [pc, #312]	@ (80022d4 <HAL_GPIO_Init+0x33c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d019      	beq.n	80021d2 <HAL_GPIO_Init+0x23a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4d      	ldr	r2, [pc, #308]	@ (80022d8 <HAL_GPIO_Init+0x340>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_GPIO_Init+0x236>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4c      	ldr	r2, [pc, #304]	@ (80022dc <HAL_GPIO_Init+0x344>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00d      	beq.n	80021ca <HAL_GPIO_Init+0x232>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	@ (80022e0 <HAL_GPIO_Init+0x348>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <HAL_GPIO_Init+0x22e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4a      	ldr	r2, [pc, #296]	@ (80022e4 <HAL_GPIO_Init+0x34c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_GPIO_Init+0x22a>
 80021be:	2306      	movs	r3, #6
 80021c0:	e00c      	b.n	80021dc <HAL_GPIO_Init+0x244>
 80021c2:	2307      	movs	r3, #7
 80021c4:	e00a      	b.n	80021dc <HAL_GPIO_Init+0x244>
 80021c6:	2305      	movs	r3, #5
 80021c8:	e008      	b.n	80021dc <HAL_GPIO_Init+0x244>
 80021ca:	2304      	movs	r3, #4
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x244>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e004      	b.n	80021dc <HAL_GPIO_Init+0x244>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_Init+0x244>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_GPIO_Init+0x244>
 80021da:	2300      	movs	r3, #0
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	f002 0203 	and.w	r2, r2, #3
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	4093      	lsls	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ec:	4937      	ldr	r1, [pc, #220]	@ (80022cc <HAL_GPIO_Init+0x334>)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021fa:	4b3b      	ldr	r3, [pc, #236]	@ (80022e8 <HAL_GPIO_Init+0x350>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800221e:	4a32      	ldr	r2, [pc, #200]	@ (80022e8 <HAL_GPIO_Init+0x350>)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002224:	4b30      	ldr	r3, [pc, #192]	@ (80022e8 <HAL_GPIO_Init+0x350>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002248:	4a27      	ldr	r2, [pc, #156]	@ (80022e8 <HAL_GPIO_Init+0x350>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800224e:	4b26      	ldr	r3, [pc, #152]	@ (80022e8 <HAL_GPIO_Init+0x350>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002272:	4a1d      	ldr	r2, [pc, #116]	@ (80022e8 <HAL_GPIO_Init+0x350>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002278:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <HAL_GPIO_Init+0x350>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800229c:	4a12      	ldr	r2, [pc, #72]	@ (80022e8 <HAL_GPIO_Init+0x350>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3301      	adds	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f47f ae78 	bne.w	8001fa8 <HAL_GPIO_Init+0x10>
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	371c      	adds	r7, #28
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010000 	.word	0x40010000
 80022d0:	48000400 	.word	0x48000400
 80022d4:	48000800 	.word	0x48000800
 80022d8:	48000c00 	.word	0x48000c00
 80022dc:	48001000 	.word	0x48001000
 80022e0:	48001400 	.word	0x48001400
 80022e4:	48001800 	.word	0x48001800
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e001      	b.n	800230e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002338:	e002      	b.n	8002340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e08d      	b.n	800247a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fac2 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2224      	movs	r2, #36	@ 0x24
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800239c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	e006      	b.n	80023d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d108      	bne.n	80023ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	e007      	b.n	80023fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800240c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002410:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002420:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69d9      	ldr	r1, [r3, #28]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1a      	ldr	r2, [r3, #32]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	461a      	mov	r2, r3
 8002490:	460b      	mov	r3, r1
 8002492:	817b      	strh	r3, [r7, #10]
 8002494:	4613      	mov	r3, r2
 8002496:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	f040 80fd 	bne.w	80026a0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_I2C_Master_Transmit+0x30>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0f6      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x21e>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024bc:	f7ff fc7a 	bl	8001db4 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2319      	movs	r3, #25
 80024c8:	2201      	movs	r2, #1
 80024ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f914 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0e1      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	@ 0x21
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2210      	movs	r2, #16
 80024ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	893a      	ldrh	r2, [r7, #8]
 80024fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	2bff      	cmp	r3, #255	@ 0xff
 800250e:	d906      	bls.n	800251e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	22ff      	movs	r2, #255	@ 0xff
 8002514:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002516:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	e007      	b.n	800252e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002528:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800252c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002532:	2b00      	cmp	r3, #0
 8002534:	d024      	beq.n	8002580 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	b2da      	uxtb	r2, r3
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	4b4e      	ldr	r3, [pc, #312]	@ (80026ac <HAL_I2C_Master_Transmit+0x228>)
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fa79 	bl	8002a70 <I2C_TransferConfig>
 800257e:	e066      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002584:	b2da      	uxtb	r2, r3
 8002586:	8979      	ldrh	r1, [r7, #10]
 8002588:	4b48      	ldr	r3, [pc, #288]	@ (80026ac <HAL_I2C_Master_Transmit+0x228>)
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fa6e 	bl	8002a70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002594:	e05b      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	6a39      	ldr	r1, [r7, #32]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f8fd 	bl	800279a <I2C_WaitOnTXISFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e07b      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d034      	beq.n	800264e <HAL_I2C_Master_Transmit+0x1ca>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d130      	bne.n	800264e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	2200      	movs	r2, #0
 80025f4:	2180      	movs	r1, #128	@ 0x80
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f880 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e04d      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	2bff      	cmp	r3, #255	@ 0xff
 800260e:	d90e      	bls.n	800262e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	22ff      	movs	r2, #255	@ 0xff
 8002614:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261a:	b2da      	uxtb	r2, r3
 800261c:	8979      	ldrh	r1, [r7, #10]
 800261e:	2300      	movs	r3, #0
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fa22 	bl	8002a70 <I2C_TransferConfig>
 800262c:	e00f      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263c:	b2da      	uxtb	r2, r3
 800263e:	8979      	ldrh	r1, [r7, #10]
 8002640:	2300      	movs	r3, #0
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fa11 	bl	8002a70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d19e      	bne.n	8002596 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	6a39      	ldr	r1, [r7, #32]
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f8e3 	bl	8002828 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e01a      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2220      	movs	r2, #32
 8002672:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <HAL_I2C_Master_Transmit+0x22c>)
 8002680:	400b      	ands	r3, r1
 8002682:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	80002000 	.word	0x80002000
 80026b0:	fe00e800 	.word	0xfe00e800

080026b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d103      	bne.n	80026d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2200      	movs	r2, #0
 80026d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d007      	beq.n	80026f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	619a      	str	r2, [r3, #24]
  }
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800270c:	e031      	b.n	8002772 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d02d      	beq.n	8002772 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002716:	f7ff fb4d 	bl	8001db4 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d302      	bcc.n	800272c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d122      	bne.n	8002772 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4013      	ands	r3, r2
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	429a      	cmp	r2, r3
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	429a      	cmp	r2, r3
 8002748:	d113      	bne.n	8002772 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4013      	ands	r3, r2
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	429a      	cmp	r2, r3
 800278e:	d0be      	beq.n	800270e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027a6:	e033      	b.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f87f 	bl	80028b0 <I2C_IsErrorOccurred>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e031      	b.n	8002820 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c2:	d025      	beq.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c4:	f7ff faf6 	bl	8001db4 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d302      	bcc.n	80027da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11a      	bne.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d013      	beq.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e007      	b.n	8002820 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b02      	cmp	r3, #2
 800281c:	d1c4      	bne.n	80027a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002834:	e02f      	b.n	8002896 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f838 	bl	80028b0 <I2C_IsErrorOccurred>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e02d      	b.n	80028a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284a:	f7ff fab3 	bl	8001db4 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11a      	bne.n	8002896 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b20      	cmp	r3, #32
 800286c:	d013      	beq.n	8002896 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e007      	b.n	80028a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d1c8      	bne.n	8002836 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	@ 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d068      	beq.n	80029ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2210      	movs	r2, #16
 80028e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028e4:	e049      	b.n	800297a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d045      	beq.n	800297a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028ee:	f7ff fa61 	bl	8001db4 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <I2C_IsErrorOccurred+0x54>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d13a      	bne.n	800297a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002916:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002926:	d121      	bne.n	800296c <I2C_IsErrorOccurred+0xbc>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800292e:	d01d      	beq.n	800296c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b20      	cmp	r3, #32
 8002934:	d01a      	beq.n	800296c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002944:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002946:	f7ff fa35 	bl	8001db4 <HAL_GetTick>
 800294a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800294c:	e00e      	b.n	800296c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800294e:	f7ff fa31 	bl	8001db4 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b19      	cmp	r3, #25
 800295a:	d907      	bls.n	800296c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	f043 0320 	orr.w	r3, r3, #32
 8002962:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800296a:	e006      	b.n	800297a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b20      	cmp	r3, #32
 8002978:	d1e9      	bne.n	800294e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b20      	cmp	r3, #32
 8002986:	d003      	beq.n	8002990 <I2C_IsErrorOccurred+0xe0>
 8002988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0aa      	beq.n	80028e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002994:	2b00      	cmp	r3, #0
 8002996:	d103      	bne.n	80029a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2220      	movs	r2, #32
 800299e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	f043 0308 	orr.w	r3, r3, #8
 80029e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00b      	beq.n	8002a1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01c      	beq.n	8002a5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff fe45 	bl	80026b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <I2C_IsErrorOccurred+0x1bc>)
 8002a36:	400b      	ands	r3, r1
 8002a38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3728      	adds	r7, #40	@ 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	fe00e800 	.word	0xfe00e800

08002a70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	817b      	strh	r3, [r7, #10]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a82:	897b      	ldrh	r3, [r7, #10]
 8002a84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a88:	7a7b      	ldrb	r3, [r7, #9]
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	0d5b      	lsrs	r3, r3, #21
 8002aaa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <I2C_TransferConfig+0x60>)
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	ea02 0103 	and.w	r1, r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	03ff63ff 	.word	0x03ff63ff

08002ad4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d138      	bne.n	8002b5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e032      	b.n	8002b5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2224      	movs	r2, #36	@ 0x24
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6819      	ldr	r1, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d139      	bne.n	8002bf4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e033      	b.n	8002bf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2224      	movs	r2, #36	@ 0x24
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0201 	bic.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c08:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40007000 	.word	0x40007000

08002c20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c2e:	d130      	bne.n	8002c92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c30:	4b23      	ldr	r3, [pc, #140]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c3c:	d038      	beq.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c3e:	4b20      	ldr	r3, [pc, #128]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c46:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2232      	movs	r2, #50	@ 0x32
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0c9b      	lsrs	r3, r3, #18
 8002c60:	3301      	adds	r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c64:	e002      	b.n	8002c6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c6c:	4b14      	ldr	r3, [pc, #80]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c78:	d102      	bne.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f2      	bne.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c80:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8c:	d110      	bne.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e00f      	b.n	8002cb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c92:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c9e:	d007      	beq.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ca0:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ca8:	4a05      	ldr	r2, [pc, #20]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	431bde83 	.word	0x431bde83

08002ccc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e3ca      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cde:	4b97      	ldr	r3, [pc, #604]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ce8:	4b94      	ldr	r3, [pc, #592]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80e4 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d007      	beq.n	8002d16 <HAL_RCC_OscConfig+0x4a>
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	f040 808b 	bne.w	8002e24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 8087 	bne.w	8002e24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d16:	4b89      	ldr	r3, [pc, #548]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_RCC_OscConfig+0x62>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e3a2      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1a      	ldr	r2, [r3, #32]
 8002d32:	4b82      	ldr	r3, [pc, #520]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <HAL_RCC_OscConfig+0x7c>
 8002d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d46:	e005      	b.n	8002d54 <HAL_RCC_OscConfig+0x88>
 8002d48:	4b7c      	ldr	r3, [pc, #496]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d223      	bcs.n	8002da0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fd55 	bl	800380c <RCC_SetFlashLatencyFromMSIRange>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e383      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d6c:	4b73      	ldr	r3, [pc, #460]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a72      	ldr	r2, [pc, #456]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d72:	f043 0308 	orr.w	r3, r3, #8
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b70      	ldr	r3, [pc, #448]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	496d      	ldr	r1, [pc, #436]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	4968      	ldr	r1, [pc, #416]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
 8002d9e:	e025      	b.n	8002dec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da0:	4b66      	ldr	r3, [pc, #408]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a65      	ldr	r2, [pc, #404]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002da6:	f043 0308 	orr.w	r3, r3, #8
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b63      	ldr	r3, [pc, #396]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4960      	ldr	r1, [pc, #384]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	495b      	ldr	r1, [pc, #364]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fd15 	bl	800380c <RCC_SetFlashLatencyFromMSIRange>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e343      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dec:	f000 fc4a 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b52      	ldr	r3, [pc, #328]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	4950      	ldr	r1, [pc, #320]	@ (8002f40 <HAL_RCC_OscConfig+0x274>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
 8002e08:	4a4e      	ldr	r2, [pc, #312]	@ (8002f44 <HAL_RCC_OscConfig+0x278>)
 8002e0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f48 <HAL_RCC_OscConfig+0x27c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe ff7f 	bl	8001d14 <HAL_InitTick>
 8002e16:	4603      	mov	r3, r0
 8002e18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d052      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	e327      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d032      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e2c:	4b43      	ldr	r3, [pc, #268]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a42      	ldr	r2, [pc, #264]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e38:	f7fe ffbc 	bl	8001db4 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e40:	f7fe ffb8 	bl	8001db4 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e310      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e52:	4b3a      	ldr	r3, [pc, #232]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e5e:	4b37      	ldr	r3, [pc, #220]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a36      	ldr	r2, [pc, #216]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e64:	f043 0308 	orr.w	r3, r3, #8
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	4b34      	ldr	r3, [pc, #208]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4931      	ldr	r1, [pc, #196]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	492c      	ldr	r1, [pc, #176]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
 8002e90:	e01a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e92:	4b2a      	ldr	r3, [pc, #168]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a29      	ldr	r2, [pc, #164]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e9e:	f7fe ff89 	bl	8001db4 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ea6:	f7fe ff85 	bl	8001db4 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e2dd      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eb8:	4b20      	ldr	r3, [pc, #128]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x1da>
 8002ec4:	e000      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ec6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d074      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d005      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x21a>
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d10e      	bne.n	8002efe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d10b      	bne.n	8002efe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee6:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d064      	beq.n	8002fbc <HAL_RCC_OscConfig+0x2f0>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d160      	bne.n	8002fbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e2ba      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x24a>
 8002f08:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	e026      	b.n	8002f64 <HAL_RCC_OscConfig+0x298>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f1e:	d115      	bne.n	8002f4c <HAL_RCC_OscConfig+0x280>
 8002f20:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a05      	ldr	r2, [pc, #20]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b03      	ldr	r3, [pc, #12]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a02      	ldr	r2, [pc, #8]	@ (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	e014      	b.n	8002f64 <HAL_RCC_OscConfig+0x298>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	0800950c 	.word	0x0800950c
 8002f44:	20000000 	.word	0x20000000
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	4ba0      	ldr	r3, [pc, #640]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a9f      	ldr	r2, [pc, #636]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b9d      	ldr	r3, [pc, #628]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a9c      	ldr	r2, [pc, #624]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe ff22 	bl	8001db4 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe ff1e 	bl	8001db4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	@ 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e276      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f86:	4b92      	ldr	r3, [pc, #584]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x2a8>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe ff0e 	bl	8001db4 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe ff0a 	bl	8001db4 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	@ 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e262      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fae:	4b88      	ldr	r3, [pc, #544]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2d0>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d060      	beq.n	800308c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_OscConfig+0x310>
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d119      	bne.n	800300a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d116      	bne.n	800300a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fdc:	4b7c      	ldr	r3, [pc, #496]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x328>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e23f      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b76      	ldr	r3, [pc, #472]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	4973      	ldr	r1, [pc, #460]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003008:	e040      	b.n	800308c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d023      	beq.n	800305a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003012:	4b6f      	ldr	r3, [pc, #444]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6e      	ldr	r2, [pc, #440]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800301c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe fec9 	bl	8001db4 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003026:	f7fe fec5 	bl	8001db4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e21d      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003038:	4b65      	ldr	r3, [pc, #404]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003044:	4b62      	ldr	r3, [pc, #392]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	061b      	lsls	r3, r3, #24
 8003052:	495f      	ldr	r1, [pc, #380]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
 8003058:	e018      	b.n	800308c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305a:	4b5d      	ldr	r3, [pc, #372]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5c      	ldr	r2, [pc, #368]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fe fea5 	bl	8001db4 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306e:	f7fe fea1 	bl	8001db4 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e1f9      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003080:	4b53      	ldr	r3, [pc, #332]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f0      	bne.n	800306e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d03c      	beq.n	8003112 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01c      	beq.n	80030da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a0:	4b4b      	ldr	r3, [pc, #300]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 80030a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a6:	4a4a      	ldr	r2, [pc, #296]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe fe80 	bl	8001db4 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fe fe7c 	bl	8001db4 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1d4      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ca:	4b41      	ldr	r3, [pc, #260]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 80030cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <HAL_RCC_OscConfig+0x3ec>
 80030d8:	e01b      	b.n	8003112 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030da:	4b3d      	ldr	r3, [pc, #244]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 80030dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e0:	4a3b      	ldr	r2, [pc, #236]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ea:	f7fe fe63 	bl	8001db4 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f2:	f7fe fe5f 	bl	8001db4 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e1b7      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003104:	4b32      	ldr	r3, [pc, #200]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1ef      	bne.n	80030f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80a6 	beq.w	800326c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003124:	4b2a      	ldr	r3, [pc, #168]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10d      	bne.n	800314c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003130:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003134:	4a26      	ldr	r2, [pc, #152]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800313a:	6593      	str	r3, [r2, #88]	@ 0x58
 800313c:	4b24      	ldr	r3, [pc, #144]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003148:	2301      	movs	r3, #1
 800314a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314c:	4b21      	ldr	r3, [pc, #132]	@ (80031d4 <HAL_RCC_OscConfig+0x508>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d118      	bne.n	800318a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003158:	4b1e      	ldr	r3, [pc, #120]	@ (80031d4 <HAL_RCC_OscConfig+0x508>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1d      	ldr	r2, [pc, #116]	@ (80031d4 <HAL_RCC_OscConfig+0x508>)
 800315e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003162:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003164:	f7fe fe26 	bl	8001db4 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316c:	f7fe fe22 	bl	8001db4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e17a      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317e:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <HAL_RCC_OscConfig+0x508>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d108      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4d8>
 8003192:	4b0f      	ldr	r3, [pc, #60]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003198:	4a0d      	ldr	r2, [pc, #52]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031a2:	e029      	b.n	80031f8 <HAL_RCC_OscConfig+0x52c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d115      	bne.n	80031d8 <HAL_RCC_OscConfig+0x50c>
 80031ac:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	4a07      	ldr	r2, [pc, #28]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 80031b4:	f043 0304 	orr.w	r3, r3, #4
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031bc:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c2:	4a03      	ldr	r2, [pc, #12]	@ (80031d0 <HAL_RCC_OscConfig+0x504>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031cc:	e014      	b.n	80031f8 <HAL_RCC_OscConfig+0x52c>
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40007000 	.word	0x40007000
 80031d8:	4b9c      	ldr	r3, [pc, #624]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031de:	4a9b      	ldr	r2, [pc, #620]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031e8:	4b98      	ldr	r3, [pc, #608]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ee:	4a97      	ldr	r2, [pc, #604]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d016      	beq.n	800322e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fe fdd8 	bl	8001db4 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003206:	e00a      	b.n	800321e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f7fe fdd4 	bl	8001db4 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e12a      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321e:	4b8b      	ldr	r3, [pc, #556]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ed      	beq.n	8003208 <HAL_RCC_OscConfig+0x53c>
 800322c:	e015      	b.n	800325a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7fe fdc1 	bl	8001db4 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fe fdbd 	bl	8001db4 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e113      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800324c:	4b7f      	ldr	r3, [pc, #508]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ed      	bne.n	8003236 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800325a:	7ffb      	ldrb	r3, [r7, #31]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003260:	4b7a      	ldr	r3, [pc, #488]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003264:	4a79      	ldr	r2, [pc, #484]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 8003266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80fe 	beq.w	8003472 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327a:	2b02      	cmp	r3, #2
 800327c:	f040 80d0 	bne.w	8003420 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003280:	4b72      	ldr	r3, [pc, #456]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f003 0203 	and.w	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003290:	429a      	cmp	r2, r3
 8003292:	d130      	bne.n	80032f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	3b01      	subs	r3, #1
 80032a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d127      	bne.n	80032f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d11f      	bne.n	80032f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032c0:	2a07      	cmp	r2, #7
 80032c2:	bf14      	ite	ne
 80032c4:	2201      	movne	r2, #1
 80032c6:	2200      	moveq	r2, #0
 80032c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d113      	bne.n	80032f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	3b01      	subs	r3, #1
 80032f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d06e      	beq.n	80033d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	d069      	beq.n	80033d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032fc:	4b53      	ldr	r3, [pc, #332]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003308:	4b50      	ldr	r3, [pc, #320]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0ad      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003318:	4b4c      	ldr	r3, [pc, #304]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4b      	ldr	r2, [pc, #300]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 800331e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003322:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003324:	f7fe fd46 	bl	8001db4 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332c:	f7fe fd42 	bl	8001db4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e09a      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800333e:	4b43      	ldr	r3, [pc, #268]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800334a:	4b40      	ldr	r3, [pc, #256]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	4b40      	ldr	r3, [pc, #256]	@ (8003450 <HAL_RCC_OscConfig+0x784>)
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800335a:	3a01      	subs	r2, #1
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	4311      	orrs	r1, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003364:	0212      	lsls	r2, r2, #8
 8003366:	4311      	orrs	r1, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800336c:	0852      	lsrs	r2, r2, #1
 800336e:	3a01      	subs	r2, #1
 8003370:	0552      	lsls	r2, r2, #21
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003378:	0852      	lsrs	r2, r2, #1
 800337a:	3a01      	subs	r2, #1
 800337c:	0652      	lsls	r2, r2, #25
 800337e:	4311      	orrs	r1, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003384:	0912      	lsrs	r2, r2, #4
 8003386:	0452      	lsls	r2, r2, #17
 8003388:	430a      	orrs	r2, r1
 800338a:	4930      	ldr	r1, [pc, #192]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 800338c:	4313      	orrs	r3, r2
 800338e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003390:	4b2e      	ldr	r3, [pc, #184]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a2d      	ldr	r2, [pc, #180]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 8003396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800339a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800339c:	4b2b      	ldr	r3, [pc, #172]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a2a      	ldr	r2, [pc, #168]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80033a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033a8:	f7fe fd04 	bl	8001db4 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fe fd00 	bl	8001db4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e058      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c2:	4b22      	ldr	r3, [pc, #136]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ce:	e050      	b.n	8003472 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e04f      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d4:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d148      	bne.n	8003472 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033e0:	4b1a      	ldr	r3, [pc, #104]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a19      	ldr	r2, [pc, #100]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80033e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033ec:	4b17      	ldr	r3, [pc, #92]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4a16      	ldr	r2, [pc, #88]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 80033f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033f8:	f7fe fcdc 	bl	8001db4 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fcd8 	bl	8001db4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e030      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003412:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x734>
 800341e:	e028      	b.n	8003472 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d023      	beq.n	800346e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a08      	ldr	r2, [pc, #32]	@ (800344c <HAL_RCC_OscConfig+0x780>)
 800342c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fe fcbf 	bl	8001db4 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003438:	e00c      	b.n	8003454 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343a:	f7fe fcbb 	bl	8001db4 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d905      	bls.n	8003454 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e013      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
 800344c:	40021000 	.word	0x40021000
 8003450:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003454:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_RCC_OscConfig+0x7b0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1ec      	bne.n	800343a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003460:	4b06      	ldr	r3, [pc, #24]	@ (800347c <HAL_RCC_OscConfig+0x7b0>)
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	4905      	ldr	r1, [pc, #20]	@ (800347c <HAL_RCC_OscConfig+0x7b0>)
 8003466:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <HAL_RCC_OscConfig+0x7b4>)
 8003468:	4013      	ands	r3, r2
 800346a:	60cb      	str	r3, [r1, #12]
 800346c:	e001      	b.n	8003472 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	feeefffc 	.word	0xfeeefffc

08003484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0e7      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b75      	ldr	r3, [pc, #468]	@ (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d910      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b72      	ldr	r3, [pc, #456]	@ (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 0207 	bic.w	r2, r3, #7
 80034ae:	4970      	ldr	r1, [pc, #448]	@ (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0cf      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d010      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	4b66      	ldr	r3, [pc, #408]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d908      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e4:	4b63      	ldr	r3, [pc, #396]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4960      	ldr	r1, [pc, #384]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d04c      	beq.n	800359c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b03      	cmp	r3, #3
 8003508:	d107      	bne.n	800351a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350a:	4b5a      	ldr	r3, [pc, #360]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d121      	bne.n	800355a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0a6      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003522:	4b54      	ldr	r3, [pc, #336]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d115      	bne.n	800355a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e09a      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800353a:	4b4e      	ldr	r3, [pc, #312]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e08e      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800354a:	4b4a      	ldr	r3, [pc, #296]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e086      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800355a:	4b46      	ldr	r3, [pc, #280]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f023 0203 	bic.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4943      	ldr	r1, [pc, #268]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356c:	f7fe fc22 	bl	8001db4 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	e00a      	b.n	800358a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fe fc1e 	bl	8001db4 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e06e      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	4b3a      	ldr	r3, [pc, #232]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 020c 	and.w	r2, r3, #12
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1eb      	bne.n	8003574 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b31      	ldr	r3, [pc, #196]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d208      	bcs.n	80035ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	492b      	ldr	r1, [pc, #172]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ca:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d210      	bcs.n	80035fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d8:	4b25      	ldr	r3, [pc, #148]	@ (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f023 0207 	bic.w	r2, r3, #7
 80035e0:	4923      	ldr	r1, [pc, #140]	@ (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e8:	4b21      	ldr	r3, [pc, #132]	@ (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e036      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003606:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4918      	ldr	r1, [pc, #96]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	4313      	orrs	r3, r2
 8003616:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d009      	beq.n	8003638 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003624:	4b13      	ldr	r3, [pc, #76]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4910      	ldr	r1, [pc, #64]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003638:	f000 f824 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	490b      	ldr	r1, [pc, #44]	@ (8003678 <HAL_RCC_ClockConfig+0x1f4>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
 8003654:	4a09      	ldr	r2, [pc, #36]	@ (800367c <HAL_RCC_ClockConfig+0x1f8>)
 8003656:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003658:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <HAL_RCC_ClockConfig+0x1fc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe fb59 	bl	8001d14 <HAL_InitTick>
 8003662:	4603      	mov	r3, r0
 8003664:	72fb      	strb	r3, [r7, #11]

  return status;
 8003666:	7afb      	ldrb	r3, [r7, #11]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40022000 	.word	0x40022000
 8003674:	40021000 	.word	0x40021000
 8003678:	0800950c 	.word	0x0800950c
 800367c:	20000000 	.word	0x20000000
 8003680:	20000004 	.word	0x20000004

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	@ 0x24
 8003688:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003692:	4b3e      	ldr	r3, [pc, #248]	@ (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800369c:	4b3b      	ldr	r3, [pc, #236]	@ (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x34>
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d121      	bne.n	80036f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d11e      	bne.n	80036f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036b8:	4b34      	ldr	r3, [pc, #208]	@ (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036c4:	4b31      	ldr	r3, [pc, #196]	@ (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 80036c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e005      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036d4:	4b2d      	ldr	r3, [pc, #180]	@ (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d102      	bne.n	8003702 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036fc:	4b25      	ldr	r3, [pc, #148]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x110>)
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e004      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b08      	cmp	r3, #8
 8003706:	d101      	bne.n	800370c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003708:	4b23      	ldr	r3, [pc, #140]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x114>)
 800370a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d134      	bne.n	800377c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003712:	4b1e      	ldr	r3, [pc, #120]	@ (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d003      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0xa6>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d003      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0xac>
 8003728:	e005      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800372a:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x110>)
 800372c:	617b      	str	r3, [r7, #20]
      break;
 800372e:	e005      	b.n	800373c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003730:	4b19      	ldr	r3, [pc, #100]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x114>)
 8003732:	617b      	str	r3, [r7, #20]
      break;
 8003734:	e002      	b.n	800373c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	617b      	str	r3, [r7, #20]
      break;
 800373a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800373c:	4b13      	ldr	r3, [pc, #76]	@ (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	3301      	adds	r3, #1
 8003748:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800374a:	4b10      	ldr	r3, [pc, #64]	@ (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	fb03 f202 	mul.w	r2, r3, r2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003762:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	0e5b      	lsrs	r3, r3, #25
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	3301      	adds	r3, #1
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	fbb2 f3f3 	udiv	r3, r2, r3
 800377a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800377c:	69bb      	ldr	r3, [r7, #24]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	@ 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000
 8003790:	08009524 	.word	0x08009524
 8003794:	00f42400 	.word	0x00f42400
 8003798:	007a1200 	.word	0x007a1200

0800379c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a0:	4b03      	ldr	r3, [pc, #12]	@ (80037b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000000 	.word	0x20000000

080037b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037b8:	f7ff fff0 	bl	800379c <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4904      	ldr	r1, [pc, #16]	@ (80037dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	0800951c 	.word	0x0800951c

080037e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037e4:	f7ff ffda 	bl	800379c <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	0adb      	lsrs	r3, r3, #11
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4904      	ldr	r1, [pc, #16]	@ (8003808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021000 	.word	0x40021000
 8003808:	0800951c 	.word	0x0800951c

0800380c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003818:	4b2a      	ldr	r3, [pc, #168]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003824:	f7ff f9ee 	bl	8002c04 <HAL_PWREx_GetVoltageRange>
 8003828:	6178      	str	r0, [r7, #20]
 800382a:	e014      	b.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800382c:	4b25      	ldr	r3, [pc, #148]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003830:	4a24      	ldr	r2, [pc, #144]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003836:	6593      	str	r3, [r2, #88]	@ 0x58
 8003838:	4b22      	ldr	r3, [pc, #136]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003844:	f7ff f9de 	bl	8002c04 <HAL_PWREx_GetVoltageRange>
 8003848:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800384a:	4b1e      	ldr	r3, [pc, #120]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	4a1d      	ldr	r2, [pc, #116]	@ (80038c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003854:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385c:	d10b      	bne.n	8003876 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b80      	cmp	r3, #128	@ 0x80
 8003862:	d919      	bls.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2ba0      	cmp	r3, #160	@ 0xa0
 8003868:	d902      	bls.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800386a:	2302      	movs	r3, #2
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	e013      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003870:	2301      	movs	r3, #1
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	e010      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b80      	cmp	r3, #128	@ 0x80
 800387a:	d902      	bls.n	8003882 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800387c:	2303      	movs	r3, #3
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	e00a      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b80      	cmp	r3, #128	@ 0x80
 8003886:	d102      	bne.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003888:	2302      	movs	r3, #2
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	e004      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b70      	cmp	r3, #112	@ 0x70
 8003892:	d101      	bne.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003894:	2301      	movs	r3, #1
 8003896:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003898:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 0207 	bic.w	r2, r3, #7
 80038a0:	4909      	ldr	r1, [pc, #36]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038a8:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d001      	beq.n	80038ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40022000 	.word	0x40022000

080038cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038d4:	2300      	movs	r3, #0
 80038d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038d8:	2300      	movs	r3, #0
 80038da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d041      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038f0:	d02a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038f6:	d824      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038fc:	d008      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003902:	d81e      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800390c:	d010      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800390e:	e018      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003910:	4b86      	ldr	r3, [pc, #536]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a85      	ldr	r2, [pc, #532]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800391c:	e015      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3304      	adds	r3, #4
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fabb 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800392e:	e00c      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3320      	adds	r3, #32
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fba6 	bl	8004088 <RCCEx_PLLSAI2_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003940:	e003      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	74fb      	strb	r3, [r7, #19]
      break;
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10b      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003950:	4b76      	ldr	r3, [pc, #472]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003956:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800395e:	4973      	ldr	r1, [pc, #460]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003966:	e001      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d041      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800397c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003980:	d02a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003982:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003986:	d824      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003988:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800398c:	d008      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800398e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003992:	d81e      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800399c:	d010      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800399e:	e018      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039a0:	4b62      	ldr	r3, [pc, #392]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a61      	ldr	r2, [pc, #388]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039ac:	e015      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fa73 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039be:	e00c      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3320      	adds	r3, #32
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fb5e 	bl	8004088 <RCCEx_PLLSAI2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039d0:	e003      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	74fb      	strb	r3, [r7, #19]
      break;
 80039d6:	e000      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039e0:	4b52      	ldr	r3, [pc, #328]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039ee:	494f      	ldr	r1, [pc, #316]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039f6:	e001      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80a0 	beq.w	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a0e:	4b47      	ldr	r3, [pc, #284]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a24:	4b41      	ldr	r3, [pc, #260]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a28:	4a40      	ldr	r2, [pc, #256]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a30:	4b3e      	ldr	r3, [pc, #248]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a40:	4b3b      	ldr	r3, [pc, #236]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a3a      	ldr	r2, [pc, #232]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a4c:	f7fe f9b2 	bl	8001db4 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a52:	e009      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a54:	f7fe f9ae 	bl	8001db4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d902      	bls.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	74fb      	strb	r3, [r7, #19]
        break;
 8003a66:	e005      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a68:	4b31      	ldr	r3, [pc, #196]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ef      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d15c      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01f      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d019      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a98:	4b24      	ldr	r3, [pc, #144]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aa4:	4b21      	ldr	r3, [pc, #132]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	4a20      	ldr	r2, [pc, #128]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aba:	4a1c      	ldr	r2, [pc, #112]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ac4:	4a19      	ldr	r2, [pc, #100]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d016      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fe f96d 	bl	8001db4 <HAL_GetTick>
 8003ada:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003adc:	e00b      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fe f969 	bl	8001db4 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d902      	bls.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	74fb      	strb	r3, [r7, #19]
            break;
 8003af4:	e006      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ec      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b0a:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b1a:	4904      	ldr	r1, [pc, #16]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b22:	e009      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b38:	7c7b      	ldrb	r3, [r7, #17]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d105      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3e:	4b9e      	ldr	r3, [pc, #632]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	4a9d      	ldr	r2, [pc, #628]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b56:	4b98      	ldr	r3, [pc, #608]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5c:	f023 0203 	bic.w	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b64:	4994      	ldr	r1, [pc, #592]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b78:	4b8f      	ldr	r3, [pc, #572]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	f023 020c 	bic.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b86:	498c      	ldr	r1, [pc, #560]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b9a:	4b87      	ldr	r3, [pc, #540]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	4983      	ldr	r1, [pc, #524]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bca:	497b      	ldr	r1, [pc, #492]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bde:	4b76      	ldr	r3, [pc, #472]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bec:	4972      	ldr	r1, [pc, #456]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c00:	4b6d      	ldr	r3, [pc, #436]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0e:	496a      	ldr	r1, [pc, #424]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c22:	4b65      	ldr	r3, [pc, #404]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c30:	4961      	ldr	r1, [pc, #388]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c44:	4b5c      	ldr	r3, [pc, #368]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c52:	4959      	ldr	r1, [pc, #356]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c66:	4b54      	ldr	r3, [pc, #336]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c74:	4950      	ldr	r1, [pc, #320]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c88:	4b4b      	ldr	r3, [pc, #300]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	4948      	ldr	r1, [pc, #288]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003caa:	4b43      	ldr	r3, [pc, #268]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb8:	493f      	ldr	r1, [pc, #252]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d028      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cda:	4937      	ldr	r1, [pc, #220]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cea:	d106      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cec:	4b32      	ldr	r3, [pc, #200]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4a31      	ldr	r2, [pc, #196]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cf6:	60d3      	str	r3, [r2, #12]
 8003cf8:	e011      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d02:	d10c      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f8c8 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d028      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d2a:	4b23      	ldr	r3, [pc, #140]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d38:	491f      	ldr	r1, [pc, #124]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d48:	d106      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d54:	60d3      	str	r3, [r2, #12]
 8003d56:	e011      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f899 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d02b      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d88:	4b0b      	ldr	r3, [pc, #44]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d96:	4908      	ldr	r1, [pc, #32]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003da6:	d109      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da8:	4b03      	ldr	r3, [pc, #12]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a02      	ldr	r2, [pc, #8]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db2:	60d3      	str	r3, [r2, #12]
 8003db4:	e014      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f867 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dec:	4b2b      	ldr	r3, [pc, #172]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dfa:	4928      	ldr	r1, [pc, #160]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e0a:	d10d      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f844 	bl	8003ea0 <RCCEx_PLLSAI1_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d014      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e22:	7cfb      	ldrb	r3, [r7, #19]
 8003e24:	74bb      	strb	r3, [r7, #18]
 8003e26:	e011      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3320      	adds	r3, #32
 8003e36:	2102      	movs	r1, #2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f925 	bl	8004088 <RCCEx_PLLSAI2_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e42:	7cfb      	ldrb	r3, [r7, #19]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e48:	7cfb      	ldrb	r3, [r7, #19]
 8003e4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e58:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e66:	490d      	ldr	r1, [pc, #52]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e7a:	4b08      	ldr	r3, [pc, #32]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e8a:	4904      	ldr	r1, [pc, #16]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e92:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eae:	4b75      	ldr	r3, [pc, #468]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d018      	beq.n	8003eec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003eba:	4b72      	ldr	r3, [pc, #456]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0203 	and.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d10d      	bne.n	8003ee6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ed2:	4b6c      	ldr	r3, [pc, #432]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d047      	beq.n	8003f76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	e044      	b.n	8003f76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d018      	beq.n	8003f26 <RCCEx_PLLSAI1_Config+0x86>
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d825      	bhi.n	8003f44 <RCCEx_PLLSAI1_Config+0xa4>
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d002      	beq.n	8003f02 <RCCEx_PLLSAI1_Config+0x62>
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d009      	beq.n	8003f14 <RCCEx_PLLSAI1_Config+0x74>
 8003f00:	e020      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f02:	4b60      	ldr	r3, [pc, #384]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d11d      	bne.n	8003f4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f12:	e01a      	b.n	8003f4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f14:	4b5b      	ldr	r3, [pc, #364]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d116      	bne.n	8003f4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f24:	e013      	b.n	8003f4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f26:	4b57      	ldr	r3, [pc, #348]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f32:	4b54      	ldr	r3, [pc, #336]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f42:	e006      	b.n	8003f52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      break;
 8003f48:	e004      	b.n	8003f54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10d      	bne.n	8003f76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6819      	ldr	r1, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	4944      	ldr	r1, [pc, #272]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d17d      	bne.n	8004078 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f7c:	4b41      	ldr	r3, [pc, #260]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a40      	ldr	r2, [pc, #256]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f88:	f7fd ff14 	bl	8001db4 <HAL_GetTick>
 8003f8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f8e:	e009      	b.n	8003fa4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f90:	f7fd ff10 	bl	8001db4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d902      	bls.n	8003fa4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	73fb      	strb	r3, [r7, #15]
        break;
 8003fa2:	e005      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fa4:	4b37      	ldr	r3, [pc, #220]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ef      	bne.n	8003f90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d160      	bne.n	8004078 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d111      	bne.n	8003fe0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fbc:	4b31      	ldr	r3, [pc, #196]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6892      	ldr	r2, [r2, #8]
 8003fcc:	0211      	lsls	r1, r2, #8
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68d2      	ldr	r2, [r2, #12]
 8003fd2:	0912      	lsrs	r2, r2, #4
 8003fd4:	0452      	lsls	r2, r2, #17
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	492a      	ldr	r1, [pc, #168]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	610b      	str	r3, [r1, #16]
 8003fde:	e027      	b.n	8004030 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d112      	bne.n	800400c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fe6:	4b27      	ldr	r3, [pc, #156]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003fee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6892      	ldr	r2, [r2, #8]
 8003ff6:	0211      	lsls	r1, r2, #8
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6912      	ldr	r2, [r2, #16]
 8003ffc:	0852      	lsrs	r2, r2, #1
 8003ffe:	3a01      	subs	r2, #1
 8004000:	0552      	lsls	r2, r2, #21
 8004002:	430a      	orrs	r2, r1
 8004004:	491f      	ldr	r1, [pc, #124]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	610b      	str	r3, [r1, #16]
 800400a:	e011      	b.n	8004030 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800400c:	4b1d      	ldr	r3, [pc, #116]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004014:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6892      	ldr	r2, [r2, #8]
 800401c:	0211      	lsls	r1, r2, #8
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6952      	ldr	r2, [r2, #20]
 8004022:	0852      	lsrs	r2, r2, #1
 8004024:	3a01      	subs	r2, #1
 8004026:	0652      	lsls	r2, r2, #25
 8004028:	430a      	orrs	r2, r1
 800402a:	4916      	ldr	r1, [pc, #88]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402c:	4313      	orrs	r3, r2
 800402e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004030:	4b14      	ldr	r3, [pc, #80]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a13      	ldr	r2, [pc, #76]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004036:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800403a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403c:	f7fd feba 	bl	8001db4 <HAL_GetTick>
 8004040:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004042:	e009      	b.n	8004058 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004044:	f7fd feb6 	bl	8001db4 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d902      	bls.n	8004058 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	73fb      	strb	r3, [r7, #15]
          break;
 8004056:	e005      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004058:	4b0a      	ldr	r3, [pc, #40]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ef      	beq.n	8004044 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800406a:	4b06      	ldr	r3, [pc, #24]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	4904      	ldr	r1, [pc, #16]	@ (8004084 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004074:	4313      	orrs	r3, r2
 8004076:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004078:	7bfb      	ldrb	r3, [r7, #15]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000

08004088 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004096:	4b6a      	ldr	r3, [pc, #424]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d018      	beq.n	80040d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040a2:	4b67      	ldr	r3, [pc, #412]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0203 	and.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d10d      	bne.n	80040ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
       ||
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040ba:	4b61      	ldr	r3, [pc, #388]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
       ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d047      	beq.n	800415e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	e044      	b.n	800415e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d018      	beq.n	800410e <RCCEx_PLLSAI2_Config+0x86>
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d825      	bhi.n	800412c <RCCEx_PLLSAI2_Config+0xa4>
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d002      	beq.n	80040ea <RCCEx_PLLSAI2_Config+0x62>
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d009      	beq.n	80040fc <RCCEx_PLLSAI2_Config+0x74>
 80040e8:	e020      	b.n	800412c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040ea:	4b55      	ldr	r3, [pc, #340]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d11d      	bne.n	8004132 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fa:	e01a      	b.n	8004132 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040fc:	4b50      	ldr	r3, [pc, #320]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004104:	2b00      	cmp	r3, #0
 8004106:	d116      	bne.n	8004136 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410c:	e013      	b.n	8004136 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800410e:	4b4c      	ldr	r3, [pc, #304]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10f      	bne.n	800413a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800411a:	4b49      	ldr	r3, [pc, #292]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800412a:	e006      	b.n	800413a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e004      	b.n	800413c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800413a:	bf00      	nop
    }

    if(status == HAL_OK)
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10d      	bne.n	800415e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004142:	4b3f      	ldr	r3, [pc, #252]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	3b01      	subs	r3, #1
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	430b      	orrs	r3, r1
 8004158:	4939      	ldr	r1, [pc, #228]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415a:	4313      	orrs	r3, r2
 800415c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d167      	bne.n	8004234 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004164:	4b36      	ldr	r3, [pc, #216]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a35      	ldr	r2, [pc, #212]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800416e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004170:	f7fd fe20 	bl	8001db4 <HAL_GetTick>
 8004174:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004176:	e009      	b.n	800418c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004178:	f7fd fe1c 	bl	8001db4 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d902      	bls.n	800418c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	73fb      	strb	r3, [r7, #15]
        break;
 800418a:	e005      	b.n	8004198 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800418c:	4b2c      	ldr	r3, [pc, #176]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1ef      	bne.n	8004178 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d14a      	bne.n	8004234 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d111      	bne.n	80041c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041a4:	4b26      	ldr	r3, [pc, #152]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6892      	ldr	r2, [r2, #8]
 80041b4:	0211      	lsls	r1, r2, #8
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68d2      	ldr	r2, [r2, #12]
 80041ba:	0912      	lsrs	r2, r2, #4
 80041bc:	0452      	lsls	r2, r2, #17
 80041be:	430a      	orrs	r2, r1
 80041c0:	491f      	ldr	r1, [pc, #124]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	614b      	str	r3, [r1, #20]
 80041c6:	e011      	b.n	80041ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6892      	ldr	r2, [r2, #8]
 80041d8:	0211      	lsls	r1, r2, #8
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6912      	ldr	r2, [r2, #16]
 80041de:	0852      	lsrs	r2, r2, #1
 80041e0:	3a01      	subs	r2, #1
 80041e2:	0652      	lsls	r2, r2, #25
 80041e4:	430a      	orrs	r2, r1
 80041e6:	4916      	ldr	r1, [pc, #88]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041ec:	4b14      	ldr	r3, [pc, #80]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a13      	ldr	r2, [pc, #76]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fd fddc 	bl	8001db4 <HAL_GetTick>
 80041fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041fe:	e009      	b.n	8004214 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004200:	f7fd fdd8 	bl	8001db4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d902      	bls.n	8004214 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	73fb      	strb	r3, [r7, #15]
          break;
 8004212:	e005      	b.n	8004220 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004214:	4b0a      	ldr	r3, [pc, #40]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0ef      	beq.n	8004200 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004226:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	4904      	ldr	r1, [pc, #16]	@ (8004240 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004230:	4313      	orrs	r3, r2
 8004232:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000

08004244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e040      	b.n	80042d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fd fba6 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	@ 0x24
 8004270:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fb6a 	bl	8004964 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f8af 	bl	80043f4 <UART_SetConfig>
 8004296:	4603      	mov	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e01b      	b.n	80042d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fbe9 	bl	8004aa8 <UART_CheckIdleState>
 80042d6:	4603      	mov	r3, r0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	@ 0x28
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d177      	bne.n	80043e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_UART_Transmit+0x24>
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e070      	b.n	80043ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2221      	movs	r2, #33	@ 0x21
 8004314:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004316:	f7fd fd4d 	bl	8001db4 <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	88fa      	ldrh	r2, [r7, #6]
 8004328:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004334:	d108      	bne.n	8004348 <HAL_UART_Transmit+0x68>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d104      	bne.n	8004348 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	e003      	b.n	8004350 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004350:	e02f      	b.n	80043b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2200      	movs	r2, #0
 800435a:	2180      	movs	r1, #128	@ 0x80
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fc4b 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e03b      	b.n	80043ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10b      	bne.n	8004390 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	881a      	ldrh	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004384:	b292      	uxth	r2, r2
 8004386:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	3302      	adds	r3, #2
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	e007      	b.n	80043a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	781a      	ldrb	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3301      	adds	r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1c9      	bne.n	8004352 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2200      	movs	r2, #0
 80043c6:	2140      	movs	r1, #64	@ 0x40
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fc15 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e005      	b.n	80043ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e000      	b.n	80043ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80043e8:	2302      	movs	r3, #2
  }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f8:	b08a      	sub	sp, #40	@ 0x28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	431a      	orrs	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	4313      	orrs	r3, r2
 800441a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4ba4      	ldr	r3, [pc, #656]	@ (80046b4 <UART_SetConfig+0x2c0>)
 8004424:	4013      	ands	r3, r2
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800442c:	430b      	orrs	r3, r1
 800442e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a99      	ldr	r2, [pc, #612]	@ (80046b8 <UART_SetConfig+0x2c4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445c:	4313      	orrs	r3, r2
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a90      	ldr	r2, [pc, #576]	@ (80046bc <UART_SetConfig+0x2c8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d126      	bne.n	80044cc <UART_SetConfig+0xd8>
 800447e:	4b90      	ldr	r3, [pc, #576]	@ (80046c0 <UART_SetConfig+0x2cc>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	2b03      	cmp	r3, #3
 800448a:	d81b      	bhi.n	80044c4 <UART_SetConfig+0xd0>
 800448c:	a201      	add	r2, pc, #4	@ (adr r2, 8004494 <UART_SetConfig+0xa0>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	080044a5 	.word	0x080044a5
 8004498:	080044b5 	.word	0x080044b5
 800449c:	080044ad 	.word	0x080044ad
 80044a0:	080044bd 	.word	0x080044bd
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044aa:	e116      	b.n	80046da <UART_SetConfig+0x2e6>
 80044ac:	2302      	movs	r3, #2
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b2:	e112      	b.n	80046da <UART_SetConfig+0x2e6>
 80044b4:	2304      	movs	r3, #4
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ba:	e10e      	b.n	80046da <UART_SetConfig+0x2e6>
 80044bc:	2308      	movs	r3, #8
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c2:	e10a      	b.n	80046da <UART_SetConfig+0x2e6>
 80044c4:	2310      	movs	r3, #16
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ca:	e106      	b.n	80046da <UART_SetConfig+0x2e6>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a7c      	ldr	r2, [pc, #496]	@ (80046c4 <UART_SetConfig+0x2d0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d138      	bne.n	8004548 <UART_SetConfig+0x154>
 80044d6:	4b7a      	ldr	r3, [pc, #488]	@ (80046c0 <UART_SetConfig+0x2cc>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b0c      	cmp	r3, #12
 80044e2:	d82d      	bhi.n	8004540 <UART_SetConfig+0x14c>
 80044e4:	a201      	add	r2, pc, #4	@ (adr r2, 80044ec <UART_SetConfig+0xf8>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	08004521 	.word	0x08004521
 80044f0:	08004541 	.word	0x08004541
 80044f4:	08004541 	.word	0x08004541
 80044f8:	08004541 	.word	0x08004541
 80044fc:	08004531 	.word	0x08004531
 8004500:	08004541 	.word	0x08004541
 8004504:	08004541 	.word	0x08004541
 8004508:	08004541 	.word	0x08004541
 800450c:	08004529 	.word	0x08004529
 8004510:	08004541 	.word	0x08004541
 8004514:	08004541 	.word	0x08004541
 8004518:	08004541 	.word	0x08004541
 800451c:	08004539 	.word	0x08004539
 8004520:	2300      	movs	r3, #0
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004526:	e0d8      	b.n	80046da <UART_SetConfig+0x2e6>
 8004528:	2302      	movs	r3, #2
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452e:	e0d4      	b.n	80046da <UART_SetConfig+0x2e6>
 8004530:	2304      	movs	r3, #4
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004536:	e0d0      	b.n	80046da <UART_SetConfig+0x2e6>
 8004538:	2308      	movs	r3, #8
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453e:	e0cc      	b.n	80046da <UART_SetConfig+0x2e6>
 8004540:	2310      	movs	r3, #16
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004546:	e0c8      	b.n	80046da <UART_SetConfig+0x2e6>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a5e      	ldr	r2, [pc, #376]	@ (80046c8 <UART_SetConfig+0x2d4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d125      	bne.n	800459e <UART_SetConfig+0x1aa>
 8004552:	4b5b      	ldr	r3, [pc, #364]	@ (80046c0 <UART_SetConfig+0x2cc>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004558:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800455c:	2b30      	cmp	r3, #48	@ 0x30
 800455e:	d016      	beq.n	800458e <UART_SetConfig+0x19a>
 8004560:	2b30      	cmp	r3, #48	@ 0x30
 8004562:	d818      	bhi.n	8004596 <UART_SetConfig+0x1a2>
 8004564:	2b20      	cmp	r3, #32
 8004566:	d00a      	beq.n	800457e <UART_SetConfig+0x18a>
 8004568:	2b20      	cmp	r3, #32
 800456a:	d814      	bhi.n	8004596 <UART_SetConfig+0x1a2>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <UART_SetConfig+0x182>
 8004570:	2b10      	cmp	r3, #16
 8004572:	d008      	beq.n	8004586 <UART_SetConfig+0x192>
 8004574:	e00f      	b.n	8004596 <UART_SetConfig+0x1a2>
 8004576:	2300      	movs	r3, #0
 8004578:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457c:	e0ad      	b.n	80046da <UART_SetConfig+0x2e6>
 800457e:	2302      	movs	r3, #2
 8004580:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004584:	e0a9      	b.n	80046da <UART_SetConfig+0x2e6>
 8004586:	2304      	movs	r3, #4
 8004588:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458c:	e0a5      	b.n	80046da <UART_SetConfig+0x2e6>
 800458e:	2308      	movs	r3, #8
 8004590:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004594:	e0a1      	b.n	80046da <UART_SetConfig+0x2e6>
 8004596:	2310      	movs	r3, #16
 8004598:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800459c:	e09d      	b.n	80046da <UART_SetConfig+0x2e6>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a4a      	ldr	r2, [pc, #296]	@ (80046cc <UART_SetConfig+0x2d8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d125      	bne.n	80045f4 <UART_SetConfig+0x200>
 80045a8:	4b45      	ldr	r3, [pc, #276]	@ (80046c0 <UART_SetConfig+0x2cc>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80045b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80045b4:	d016      	beq.n	80045e4 <UART_SetConfig+0x1f0>
 80045b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80045b8:	d818      	bhi.n	80045ec <UART_SetConfig+0x1f8>
 80045ba:	2b80      	cmp	r3, #128	@ 0x80
 80045bc:	d00a      	beq.n	80045d4 <UART_SetConfig+0x1e0>
 80045be:	2b80      	cmp	r3, #128	@ 0x80
 80045c0:	d814      	bhi.n	80045ec <UART_SetConfig+0x1f8>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <UART_SetConfig+0x1d8>
 80045c6:	2b40      	cmp	r3, #64	@ 0x40
 80045c8:	d008      	beq.n	80045dc <UART_SetConfig+0x1e8>
 80045ca:	e00f      	b.n	80045ec <UART_SetConfig+0x1f8>
 80045cc:	2300      	movs	r3, #0
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d2:	e082      	b.n	80046da <UART_SetConfig+0x2e6>
 80045d4:	2302      	movs	r3, #2
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045da:	e07e      	b.n	80046da <UART_SetConfig+0x2e6>
 80045dc:	2304      	movs	r3, #4
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e2:	e07a      	b.n	80046da <UART_SetConfig+0x2e6>
 80045e4:	2308      	movs	r3, #8
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ea:	e076      	b.n	80046da <UART_SetConfig+0x2e6>
 80045ec:	2310      	movs	r3, #16
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f2:	e072      	b.n	80046da <UART_SetConfig+0x2e6>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a35      	ldr	r2, [pc, #212]	@ (80046d0 <UART_SetConfig+0x2dc>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d12a      	bne.n	8004654 <UART_SetConfig+0x260>
 80045fe:	4b30      	ldr	r3, [pc, #192]	@ (80046c0 <UART_SetConfig+0x2cc>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004604:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004608:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800460c:	d01a      	beq.n	8004644 <UART_SetConfig+0x250>
 800460e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004612:	d81b      	bhi.n	800464c <UART_SetConfig+0x258>
 8004614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004618:	d00c      	beq.n	8004634 <UART_SetConfig+0x240>
 800461a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800461e:	d815      	bhi.n	800464c <UART_SetConfig+0x258>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <UART_SetConfig+0x238>
 8004624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004628:	d008      	beq.n	800463c <UART_SetConfig+0x248>
 800462a:	e00f      	b.n	800464c <UART_SetConfig+0x258>
 800462c:	2300      	movs	r3, #0
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004632:	e052      	b.n	80046da <UART_SetConfig+0x2e6>
 8004634:	2302      	movs	r3, #2
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463a:	e04e      	b.n	80046da <UART_SetConfig+0x2e6>
 800463c:	2304      	movs	r3, #4
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004642:	e04a      	b.n	80046da <UART_SetConfig+0x2e6>
 8004644:	2308      	movs	r3, #8
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464a:	e046      	b.n	80046da <UART_SetConfig+0x2e6>
 800464c:	2310      	movs	r3, #16
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004652:	e042      	b.n	80046da <UART_SetConfig+0x2e6>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a17      	ldr	r2, [pc, #92]	@ (80046b8 <UART_SetConfig+0x2c4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d13a      	bne.n	80046d4 <UART_SetConfig+0x2e0>
 800465e:	4b18      	ldr	r3, [pc, #96]	@ (80046c0 <UART_SetConfig+0x2cc>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004664:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004668:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800466c:	d01a      	beq.n	80046a4 <UART_SetConfig+0x2b0>
 800466e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004672:	d81b      	bhi.n	80046ac <UART_SetConfig+0x2b8>
 8004674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004678:	d00c      	beq.n	8004694 <UART_SetConfig+0x2a0>
 800467a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800467e:	d815      	bhi.n	80046ac <UART_SetConfig+0x2b8>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <UART_SetConfig+0x298>
 8004684:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004688:	d008      	beq.n	800469c <UART_SetConfig+0x2a8>
 800468a:	e00f      	b.n	80046ac <UART_SetConfig+0x2b8>
 800468c:	2300      	movs	r3, #0
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004692:	e022      	b.n	80046da <UART_SetConfig+0x2e6>
 8004694:	2302      	movs	r3, #2
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469a:	e01e      	b.n	80046da <UART_SetConfig+0x2e6>
 800469c:	2304      	movs	r3, #4
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a2:	e01a      	b.n	80046da <UART_SetConfig+0x2e6>
 80046a4:	2308      	movs	r3, #8
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046aa:	e016      	b.n	80046da <UART_SetConfig+0x2e6>
 80046ac:	2310      	movs	r3, #16
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b2:	e012      	b.n	80046da <UART_SetConfig+0x2e6>
 80046b4:	efff69f3 	.word	0xefff69f3
 80046b8:	40008000 	.word	0x40008000
 80046bc:	40013800 	.word	0x40013800
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40004400 	.word	0x40004400
 80046c8:	40004800 	.word	0x40004800
 80046cc:	40004c00 	.word	0x40004c00
 80046d0:	40005000 	.word	0x40005000
 80046d4:	2310      	movs	r3, #16
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a9f      	ldr	r2, [pc, #636]	@ (800495c <UART_SetConfig+0x568>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d17a      	bne.n	80047da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d824      	bhi.n	8004736 <UART_SetConfig+0x342>
 80046ec:	a201      	add	r2, pc, #4	@ (adr r2, 80046f4 <UART_SetConfig+0x300>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004719 	.word	0x08004719
 80046f8:	08004737 	.word	0x08004737
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004737 	.word	0x08004737
 8004704:	08004727 	.word	0x08004727
 8004708:	08004737 	.word	0x08004737
 800470c:	08004737 	.word	0x08004737
 8004710:	08004737 	.word	0x08004737
 8004714:	0800472f 	.word	0x0800472f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004718:	f7ff f84c 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 800471c:	61f8      	str	r0, [r7, #28]
        break;
 800471e:	e010      	b.n	8004742 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004720:	4b8f      	ldr	r3, [pc, #572]	@ (8004960 <UART_SetConfig+0x56c>)
 8004722:	61fb      	str	r3, [r7, #28]
        break;
 8004724:	e00d      	b.n	8004742 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004726:	f7fe ffad 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 800472a:	61f8      	str	r0, [r7, #28]
        break;
 800472c:	e009      	b.n	8004742 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004732:	61fb      	str	r3, [r7, #28]
        break;
 8004734:	e005      	b.n	8004742 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004740:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80fb 	beq.w	8004940 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	4413      	add	r3, r2
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	429a      	cmp	r2, r3
 8004758:	d305      	bcc.n	8004766 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	429a      	cmp	r2, r3
 8004764:	d903      	bls.n	800476e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800476c:	e0e8      	b.n	8004940 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2200      	movs	r2, #0
 8004772:	461c      	mov	r4, r3
 8004774:	4615      	mov	r5, r2
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	022b      	lsls	r3, r5, #8
 8004780:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004784:	0222      	lsls	r2, r4, #8
 8004786:	68f9      	ldr	r1, [r7, #12]
 8004788:	6849      	ldr	r1, [r1, #4]
 800478a:	0849      	lsrs	r1, r1, #1
 800478c:	2000      	movs	r0, #0
 800478e:	4688      	mov	r8, r1
 8004790:	4681      	mov	r9, r0
 8004792:	eb12 0a08 	adds.w	sl, r2, r8
 8004796:	eb43 0b09 	adc.w	fp, r3, r9
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047a8:	4650      	mov	r0, sl
 80047aa:	4659      	mov	r1, fp
 80047ac:	f7fc fa6c 	bl	8000c88 <__aeabi_uldivmod>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4613      	mov	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047be:	d308      	bcc.n	80047d2 <UART_SetConfig+0x3de>
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047c6:	d204      	bcs.n	80047d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	60da      	str	r2, [r3, #12]
 80047d0:	e0b6      	b.n	8004940 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047d8:	e0b2      	b.n	8004940 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e2:	d15e      	bne.n	80048a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d828      	bhi.n	800483e <UART_SetConfig+0x44a>
 80047ec:	a201      	add	r2, pc, #4	@ (adr r2, 80047f4 <UART_SetConfig+0x400>)
 80047ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f2:	bf00      	nop
 80047f4:	08004819 	.word	0x08004819
 80047f8:	08004821 	.word	0x08004821
 80047fc:	08004829 	.word	0x08004829
 8004800:	0800483f 	.word	0x0800483f
 8004804:	0800482f 	.word	0x0800482f
 8004808:	0800483f 	.word	0x0800483f
 800480c:	0800483f 	.word	0x0800483f
 8004810:	0800483f 	.word	0x0800483f
 8004814:	08004837 	.word	0x08004837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004818:	f7fe ffcc 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 800481c:	61f8      	str	r0, [r7, #28]
        break;
 800481e:	e014      	b.n	800484a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004820:	f7fe ffde 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 8004824:	61f8      	str	r0, [r7, #28]
        break;
 8004826:	e010      	b.n	800484a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004828:	4b4d      	ldr	r3, [pc, #308]	@ (8004960 <UART_SetConfig+0x56c>)
 800482a:	61fb      	str	r3, [r7, #28]
        break;
 800482c:	e00d      	b.n	800484a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800482e:	f7fe ff29 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8004832:	61f8      	str	r0, [r7, #28]
        break;
 8004834:	e009      	b.n	800484a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800483a:	61fb      	str	r3, [r7, #28]
        break;
 800483c:	e005      	b.n	800484a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004848:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d077      	beq.n	8004940 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	005a      	lsls	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	441a      	add	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b0f      	cmp	r3, #15
 800486a:	d916      	bls.n	800489a <UART_SetConfig+0x4a6>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004872:	d212      	bcs.n	800489a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f023 030f 	bic.w	r3, r3, #15
 800487c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	b29b      	uxth	r3, r3
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	b29a      	uxth	r2, r3
 800488a:	8afb      	ldrh	r3, [r7, #22]
 800488c:	4313      	orrs	r3, r2
 800488e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	8afa      	ldrh	r2, [r7, #22]
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	e052      	b.n	8004940 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048a0:	e04e      	b.n	8004940 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d827      	bhi.n	80048fa <UART_SetConfig+0x506>
 80048aa:	a201      	add	r2, pc, #4	@ (adr r2, 80048b0 <UART_SetConfig+0x4bc>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048dd 	.word	0x080048dd
 80048b8:	080048e5 	.word	0x080048e5
 80048bc:	080048fb 	.word	0x080048fb
 80048c0:	080048eb 	.word	0x080048eb
 80048c4:	080048fb 	.word	0x080048fb
 80048c8:	080048fb 	.word	0x080048fb
 80048cc:	080048fb 	.word	0x080048fb
 80048d0:	080048f3 	.word	0x080048f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d4:	f7fe ff6e 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 80048d8:	61f8      	str	r0, [r7, #28]
        break;
 80048da:	e014      	b.n	8004906 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048dc:	f7fe ff80 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 80048e0:	61f8      	str	r0, [r7, #28]
        break;
 80048e2:	e010      	b.n	8004906 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004960 <UART_SetConfig+0x56c>)
 80048e6:	61fb      	str	r3, [r7, #28]
        break;
 80048e8:	e00d      	b.n	8004906 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ea:	f7fe fecb 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 80048ee:	61f8      	str	r0, [r7, #28]
        break;
 80048f0:	e009      	b.n	8004906 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f6:	61fb      	str	r3, [r7, #28]
        break;
 80048f8:	e005      	b.n	8004906 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004904:	bf00      	nop
    }

    if (pclk != 0U)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d019      	beq.n	8004940 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	085a      	lsrs	r2, r3, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	441a      	add	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b0f      	cmp	r3, #15
 8004924:	d909      	bls.n	800493a <UART_SetConfig+0x546>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492c:	d205      	bcs.n	800493a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60da      	str	r2, [r3, #12]
 8004938:	e002      	b.n	8004940 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800494c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004950:	4618      	mov	r0, r3
 8004952:	3728      	adds	r7, #40	@ 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495a:	bf00      	nop
 800495c:	40008000 	.word	0x40008000
 8004960:	00f42400 	.word	0x00f42400

08004964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01a      	beq.n	8004a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a62:	d10a      	bne.n	8004a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b098      	sub	sp, #96	@ 0x60
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ab8:	f7fd f97c 	bl	8001db4 <HAL_GetTick>
 8004abc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d12e      	bne.n	8004b2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004acc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f88c 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d021      	beq.n	8004b2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004afa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e6      	bne.n	8004ae6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e062      	b.n	8004bf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d149      	bne.n	8004bcc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b40:	2200      	movs	r2, #0
 8004b42:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f856 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d03c      	beq.n	8004bcc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e6      	bne.n	8004b52 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3308      	adds	r3, #8
 8004b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0301 	bic.w	r3, r3, #1
 8004b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ba4:	61fa      	str	r2, [r7, #28]
 8004ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	69b9      	ldr	r1, [r7, #24]
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e5      	bne.n	8004b84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e011      	b.n	8004bf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3758      	adds	r7, #88	@ 0x58
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c08:	e049      	b.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d045      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fd f8cf 	bl	8001db4 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e048      	b.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d031      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d110      	bne.n	8004c6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f838 	bl	8004cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e029      	b.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c78:	d111      	bne.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f81e 	bl	8004cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e00f      	b.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69da      	ldr	r2, [r3, #28]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d0a6      	beq.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b095      	sub	sp, #84	@ 0x54
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e6      	bne.n	8004cce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3308      	adds	r3, #8
 8004d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e5      	bne.n	8004d00 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d118      	bne.n	8004d6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f023 0310 	bic.w	r3, r3, #16
 8004d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	6979      	ldr	r1, [r7, #20]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	613b      	str	r3, [r7, #16]
   return(result);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e6      	bne.n	8004d3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d82:	bf00      	nop
 8004d84:	3754      	adds	r7, #84	@ 0x54
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <__cvt>:
 8004d8e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d92:	ec57 6b10 	vmov	r6, r7, d0
 8004d96:	2f00      	cmp	r7, #0
 8004d98:	460c      	mov	r4, r1
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	bfbb      	ittet	lt
 8004da0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004da4:	461f      	movlt	r7, r3
 8004da6:	2300      	movge	r3, #0
 8004da8:	232d      	movlt	r3, #45	@ 0x2d
 8004daa:	700b      	strb	r3, [r1, #0]
 8004dac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dae:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004db2:	4691      	mov	r9, r2
 8004db4:	f023 0820 	bic.w	r8, r3, #32
 8004db8:	bfbc      	itt	lt
 8004dba:	4632      	movlt	r2, r6
 8004dbc:	4616      	movlt	r6, r2
 8004dbe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dc2:	d005      	beq.n	8004dd0 <__cvt+0x42>
 8004dc4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004dc8:	d100      	bne.n	8004dcc <__cvt+0x3e>
 8004dca:	3401      	adds	r4, #1
 8004dcc:	2102      	movs	r1, #2
 8004dce:	e000      	b.n	8004dd2 <__cvt+0x44>
 8004dd0:	2103      	movs	r1, #3
 8004dd2:	ab03      	add	r3, sp, #12
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	ab02      	add	r3, sp, #8
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	ec47 6b10 	vmov	d0, r6, r7
 8004dde:	4653      	mov	r3, sl
 8004de0:	4622      	mov	r2, r4
 8004de2:	f001 f8a9 	bl	8005f38 <_dtoa_r>
 8004de6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004dea:	4605      	mov	r5, r0
 8004dec:	d119      	bne.n	8004e22 <__cvt+0x94>
 8004dee:	f019 0f01 	tst.w	r9, #1
 8004df2:	d00e      	beq.n	8004e12 <__cvt+0x84>
 8004df4:	eb00 0904 	add.w	r9, r0, r4
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	4639      	mov	r1, r7
 8004e00:	f7fb fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e04:	b108      	cbz	r0, 8004e0a <__cvt+0x7c>
 8004e06:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e0a:	2230      	movs	r2, #48	@ 0x30
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	454b      	cmp	r3, r9
 8004e10:	d31e      	bcc.n	8004e50 <__cvt+0xc2>
 8004e12:	9b03      	ldr	r3, [sp, #12]
 8004e14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e16:	1b5b      	subs	r3, r3, r5
 8004e18:	4628      	mov	r0, r5
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	b004      	add	sp, #16
 8004e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e22:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e26:	eb00 0904 	add.w	r9, r0, r4
 8004e2a:	d1e5      	bne.n	8004df8 <__cvt+0x6a>
 8004e2c:	7803      	ldrb	r3, [r0, #0]
 8004e2e:	2b30      	cmp	r3, #48	@ 0x30
 8004e30:	d10a      	bne.n	8004e48 <__cvt+0xba>
 8004e32:	2200      	movs	r2, #0
 8004e34:	2300      	movs	r3, #0
 8004e36:	4630      	mov	r0, r6
 8004e38:	4639      	mov	r1, r7
 8004e3a:	f7fb fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e3e:	b918      	cbnz	r0, 8004e48 <__cvt+0xba>
 8004e40:	f1c4 0401 	rsb	r4, r4, #1
 8004e44:	f8ca 4000 	str.w	r4, [sl]
 8004e48:	f8da 3000 	ldr.w	r3, [sl]
 8004e4c:	4499      	add	r9, r3
 8004e4e:	e7d3      	b.n	8004df8 <__cvt+0x6a>
 8004e50:	1c59      	adds	r1, r3, #1
 8004e52:	9103      	str	r1, [sp, #12]
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	e7d9      	b.n	8004e0c <__cvt+0x7e>

08004e58 <__exponent>:
 8004e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e5a:	2900      	cmp	r1, #0
 8004e5c:	bfba      	itte	lt
 8004e5e:	4249      	neglt	r1, r1
 8004e60:	232d      	movlt	r3, #45	@ 0x2d
 8004e62:	232b      	movge	r3, #43	@ 0x2b
 8004e64:	2909      	cmp	r1, #9
 8004e66:	7002      	strb	r2, [r0, #0]
 8004e68:	7043      	strb	r3, [r0, #1]
 8004e6a:	dd29      	ble.n	8004ec0 <__exponent+0x68>
 8004e6c:	f10d 0307 	add.w	r3, sp, #7
 8004e70:	461d      	mov	r5, r3
 8004e72:	270a      	movs	r7, #10
 8004e74:	461a      	mov	r2, r3
 8004e76:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e7a:	fb07 1416 	mls	r4, r7, r6, r1
 8004e7e:	3430      	adds	r4, #48	@ 0x30
 8004e80:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e84:	460c      	mov	r4, r1
 8004e86:	2c63      	cmp	r4, #99	@ 0x63
 8004e88:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	dcf1      	bgt.n	8004e74 <__exponent+0x1c>
 8004e90:	3130      	adds	r1, #48	@ 0x30
 8004e92:	1e94      	subs	r4, r2, #2
 8004e94:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e98:	1c41      	adds	r1, r0, #1
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	42ab      	cmp	r3, r5
 8004e9e:	d30a      	bcc.n	8004eb6 <__exponent+0x5e>
 8004ea0:	f10d 0309 	add.w	r3, sp, #9
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	42ac      	cmp	r4, r5
 8004ea8:	bf88      	it	hi
 8004eaa:	2300      	movhi	r3, #0
 8004eac:	3302      	adds	r3, #2
 8004eae:	4403      	add	r3, r0
 8004eb0:	1a18      	subs	r0, r3, r0
 8004eb2:	b003      	add	sp, #12
 8004eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004eba:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ebe:	e7ed      	b.n	8004e9c <__exponent+0x44>
 8004ec0:	2330      	movs	r3, #48	@ 0x30
 8004ec2:	3130      	adds	r1, #48	@ 0x30
 8004ec4:	7083      	strb	r3, [r0, #2]
 8004ec6:	70c1      	strb	r1, [r0, #3]
 8004ec8:	1d03      	adds	r3, r0, #4
 8004eca:	e7f1      	b.n	8004eb0 <__exponent+0x58>

08004ecc <_printf_float>:
 8004ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed0:	b08d      	sub	sp, #52	@ 0x34
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ed8:	4616      	mov	r6, r2
 8004eda:	461f      	mov	r7, r3
 8004edc:	4605      	mov	r5, r0
 8004ede:	f000 ff23 	bl	8005d28 <_localeconv_r>
 8004ee2:	6803      	ldr	r3, [r0, #0]
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fb f9c2 	bl	8000270 <strlen>
 8004eec:	2300      	movs	r3, #0
 8004eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ef4:	9005      	str	r0, [sp, #20]
 8004ef6:	3307      	adds	r3, #7
 8004ef8:	f023 0307 	bic.w	r3, r3, #7
 8004efc:	f103 0208 	add.w	r2, r3, #8
 8004f00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f04:	f8d4 b000 	ldr.w	fp, [r4]
 8004f08:	f8c8 2000 	str.w	r2, [r8]
 8004f0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004f14:	9307      	str	r3, [sp, #28]
 8004f16:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f22:	4b9c      	ldr	r3, [pc, #624]	@ (8005194 <_printf_float+0x2c8>)
 8004f24:	f04f 32ff 	mov.w	r2, #4294967295
 8004f28:	f7fb fe00 	bl	8000b2c <__aeabi_dcmpun>
 8004f2c:	bb70      	cbnz	r0, 8004f8c <_printf_float+0xc0>
 8004f2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f32:	4b98      	ldr	r3, [pc, #608]	@ (8005194 <_printf_float+0x2c8>)
 8004f34:	f04f 32ff 	mov.w	r2, #4294967295
 8004f38:	f7fb fdda 	bl	8000af0 <__aeabi_dcmple>
 8004f3c:	bb30      	cbnz	r0, 8004f8c <_printf_float+0xc0>
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2300      	movs	r3, #0
 8004f42:	4640      	mov	r0, r8
 8004f44:	4649      	mov	r1, r9
 8004f46:	f7fb fdc9 	bl	8000adc <__aeabi_dcmplt>
 8004f4a:	b110      	cbz	r0, 8004f52 <_printf_float+0x86>
 8004f4c:	232d      	movs	r3, #45	@ 0x2d
 8004f4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f52:	4a91      	ldr	r2, [pc, #580]	@ (8005198 <_printf_float+0x2cc>)
 8004f54:	4b91      	ldr	r3, [pc, #580]	@ (800519c <_printf_float+0x2d0>)
 8004f56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f5a:	bf94      	ite	ls
 8004f5c:	4690      	movls	r8, r2
 8004f5e:	4698      	movhi	r8, r3
 8004f60:	2303      	movs	r3, #3
 8004f62:	6123      	str	r3, [r4, #16]
 8004f64:	f02b 0304 	bic.w	r3, fp, #4
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	f04f 0900 	mov.w	r9, #0
 8004f6e:	9700      	str	r7, [sp, #0]
 8004f70:	4633      	mov	r3, r6
 8004f72:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f74:	4621      	mov	r1, r4
 8004f76:	4628      	mov	r0, r5
 8004f78:	f000 f9d2 	bl	8005320 <_printf_common>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	f040 808d 	bne.w	800509c <_printf_float+0x1d0>
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	b00d      	add	sp, #52	@ 0x34
 8004f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	4640      	mov	r0, r8
 8004f92:	4649      	mov	r1, r9
 8004f94:	f7fb fdca 	bl	8000b2c <__aeabi_dcmpun>
 8004f98:	b140      	cbz	r0, 8004fac <_printf_float+0xe0>
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bfbc      	itt	lt
 8004fa0:	232d      	movlt	r3, #45	@ 0x2d
 8004fa2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80051a0 <_printf_float+0x2d4>)
 8004fa8:	4b7e      	ldr	r3, [pc, #504]	@ (80051a4 <_printf_float+0x2d8>)
 8004faa:	e7d4      	b.n	8004f56 <_printf_float+0x8a>
 8004fac:	6863      	ldr	r3, [r4, #4]
 8004fae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004fb2:	9206      	str	r2, [sp, #24]
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	d13b      	bne.n	8005030 <_printf_float+0x164>
 8004fb8:	2306      	movs	r3, #6
 8004fba:	6063      	str	r3, [r4, #4]
 8004fbc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	6022      	str	r2, [r4, #0]
 8004fc4:	9303      	str	r3, [sp, #12]
 8004fc6:	ab0a      	add	r3, sp, #40	@ 0x28
 8004fc8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004fcc:	ab09      	add	r3, sp, #36	@ 0x24
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	6861      	ldr	r1, [r4, #4]
 8004fd2:	ec49 8b10 	vmov	d0, r8, r9
 8004fd6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f7ff fed7 	bl	8004d8e <__cvt>
 8004fe0:	9b06      	ldr	r3, [sp, #24]
 8004fe2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004fe4:	2b47      	cmp	r3, #71	@ 0x47
 8004fe6:	4680      	mov	r8, r0
 8004fe8:	d129      	bne.n	800503e <_printf_float+0x172>
 8004fea:	1cc8      	adds	r0, r1, #3
 8004fec:	db02      	blt.n	8004ff4 <_printf_float+0x128>
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	4299      	cmp	r1, r3
 8004ff2:	dd41      	ble.n	8005078 <_printf_float+0x1ac>
 8004ff4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ff8:	fa5f fa8a 	uxtb.w	sl, sl
 8004ffc:	3901      	subs	r1, #1
 8004ffe:	4652      	mov	r2, sl
 8005000:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005004:	9109      	str	r1, [sp, #36]	@ 0x24
 8005006:	f7ff ff27 	bl	8004e58 <__exponent>
 800500a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800500c:	1813      	adds	r3, r2, r0
 800500e:	2a01      	cmp	r2, #1
 8005010:	4681      	mov	r9, r0
 8005012:	6123      	str	r3, [r4, #16]
 8005014:	dc02      	bgt.n	800501c <_printf_float+0x150>
 8005016:	6822      	ldr	r2, [r4, #0]
 8005018:	07d2      	lsls	r2, r2, #31
 800501a:	d501      	bpl.n	8005020 <_printf_float+0x154>
 800501c:	3301      	adds	r3, #1
 800501e:	6123      	str	r3, [r4, #16]
 8005020:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0a2      	beq.n	8004f6e <_printf_float+0xa2>
 8005028:	232d      	movs	r3, #45	@ 0x2d
 800502a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800502e:	e79e      	b.n	8004f6e <_printf_float+0xa2>
 8005030:	9a06      	ldr	r2, [sp, #24]
 8005032:	2a47      	cmp	r2, #71	@ 0x47
 8005034:	d1c2      	bne.n	8004fbc <_printf_float+0xf0>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1c0      	bne.n	8004fbc <_printf_float+0xf0>
 800503a:	2301      	movs	r3, #1
 800503c:	e7bd      	b.n	8004fba <_printf_float+0xee>
 800503e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005042:	d9db      	bls.n	8004ffc <_printf_float+0x130>
 8005044:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005048:	d118      	bne.n	800507c <_printf_float+0x1b0>
 800504a:	2900      	cmp	r1, #0
 800504c:	6863      	ldr	r3, [r4, #4]
 800504e:	dd0b      	ble.n	8005068 <_printf_float+0x19c>
 8005050:	6121      	str	r1, [r4, #16]
 8005052:	b913      	cbnz	r3, 800505a <_printf_float+0x18e>
 8005054:	6822      	ldr	r2, [r4, #0]
 8005056:	07d0      	lsls	r0, r2, #31
 8005058:	d502      	bpl.n	8005060 <_printf_float+0x194>
 800505a:	3301      	adds	r3, #1
 800505c:	440b      	add	r3, r1
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005062:	f04f 0900 	mov.w	r9, #0
 8005066:	e7db      	b.n	8005020 <_printf_float+0x154>
 8005068:	b913      	cbnz	r3, 8005070 <_printf_float+0x1a4>
 800506a:	6822      	ldr	r2, [r4, #0]
 800506c:	07d2      	lsls	r2, r2, #31
 800506e:	d501      	bpl.n	8005074 <_printf_float+0x1a8>
 8005070:	3302      	adds	r3, #2
 8005072:	e7f4      	b.n	800505e <_printf_float+0x192>
 8005074:	2301      	movs	r3, #1
 8005076:	e7f2      	b.n	800505e <_printf_float+0x192>
 8005078:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800507c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800507e:	4299      	cmp	r1, r3
 8005080:	db05      	blt.n	800508e <_printf_float+0x1c2>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	6121      	str	r1, [r4, #16]
 8005086:	07d8      	lsls	r0, r3, #31
 8005088:	d5ea      	bpl.n	8005060 <_printf_float+0x194>
 800508a:	1c4b      	adds	r3, r1, #1
 800508c:	e7e7      	b.n	800505e <_printf_float+0x192>
 800508e:	2900      	cmp	r1, #0
 8005090:	bfd4      	ite	le
 8005092:	f1c1 0202 	rsble	r2, r1, #2
 8005096:	2201      	movgt	r2, #1
 8005098:	4413      	add	r3, r2
 800509a:	e7e0      	b.n	800505e <_printf_float+0x192>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	055a      	lsls	r2, r3, #21
 80050a0:	d407      	bmi.n	80050b2 <_printf_float+0x1e6>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	4642      	mov	r2, r8
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	d12b      	bne.n	8005108 <_printf_float+0x23c>
 80050b0:	e767      	b.n	8004f82 <_printf_float+0xb6>
 80050b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050b6:	f240 80dd 	bls.w	8005274 <_printf_float+0x3a8>
 80050ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050be:	2200      	movs	r2, #0
 80050c0:	2300      	movs	r3, #0
 80050c2:	f7fb fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d033      	beq.n	8005132 <_printf_float+0x266>
 80050ca:	4a37      	ldr	r2, [pc, #220]	@ (80051a8 <_printf_float+0x2dc>)
 80050cc:	2301      	movs	r3, #1
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	f43f af54 	beq.w	8004f82 <_printf_float+0xb6>
 80050da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80050de:	4543      	cmp	r3, r8
 80050e0:	db02      	blt.n	80050e8 <_printf_float+0x21c>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	07d8      	lsls	r0, r3, #31
 80050e6:	d50f      	bpl.n	8005108 <_printf_float+0x23c>
 80050e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ec:	4631      	mov	r1, r6
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	f43f af45 	beq.w	8004f82 <_printf_float+0xb6>
 80050f8:	f04f 0900 	mov.w	r9, #0
 80050fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005100:	f104 0a1a 	add.w	sl, r4, #26
 8005104:	45c8      	cmp	r8, r9
 8005106:	dc09      	bgt.n	800511c <_printf_float+0x250>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	079b      	lsls	r3, r3, #30
 800510c:	f100 8103 	bmi.w	8005316 <_printf_float+0x44a>
 8005110:	68e0      	ldr	r0, [r4, #12]
 8005112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005114:	4298      	cmp	r0, r3
 8005116:	bfb8      	it	lt
 8005118:	4618      	movlt	r0, r3
 800511a:	e734      	b.n	8004f86 <_printf_float+0xba>
 800511c:	2301      	movs	r3, #1
 800511e:	4652      	mov	r2, sl
 8005120:	4631      	mov	r1, r6
 8005122:	4628      	mov	r0, r5
 8005124:	47b8      	blx	r7
 8005126:	3001      	adds	r0, #1
 8005128:	f43f af2b 	beq.w	8004f82 <_printf_float+0xb6>
 800512c:	f109 0901 	add.w	r9, r9, #1
 8005130:	e7e8      	b.n	8005104 <_printf_float+0x238>
 8005132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	dc39      	bgt.n	80051ac <_printf_float+0x2e0>
 8005138:	4a1b      	ldr	r2, [pc, #108]	@ (80051a8 <_printf_float+0x2dc>)
 800513a:	2301      	movs	r3, #1
 800513c:	4631      	mov	r1, r6
 800513e:	4628      	mov	r0, r5
 8005140:	47b8      	blx	r7
 8005142:	3001      	adds	r0, #1
 8005144:	f43f af1d 	beq.w	8004f82 <_printf_float+0xb6>
 8005148:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800514c:	ea59 0303 	orrs.w	r3, r9, r3
 8005150:	d102      	bne.n	8005158 <_printf_float+0x28c>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	07d9      	lsls	r1, r3, #31
 8005156:	d5d7      	bpl.n	8005108 <_printf_float+0x23c>
 8005158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	f43f af0d 	beq.w	8004f82 <_printf_float+0xb6>
 8005168:	f04f 0a00 	mov.w	sl, #0
 800516c:	f104 0b1a 	add.w	fp, r4, #26
 8005170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005172:	425b      	negs	r3, r3
 8005174:	4553      	cmp	r3, sl
 8005176:	dc01      	bgt.n	800517c <_printf_float+0x2b0>
 8005178:	464b      	mov	r3, r9
 800517a:	e793      	b.n	80050a4 <_printf_float+0x1d8>
 800517c:	2301      	movs	r3, #1
 800517e:	465a      	mov	r2, fp
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	47b8      	blx	r7
 8005186:	3001      	adds	r0, #1
 8005188:	f43f aefb 	beq.w	8004f82 <_printf_float+0xb6>
 800518c:	f10a 0a01 	add.w	sl, sl, #1
 8005190:	e7ee      	b.n	8005170 <_printf_float+0x2a4>
 8005192:	bf00      	nop
 8005194:	7fefffff 	.word	0x7fefffff
 8005198:	08009554 	.word	0x08009554
 800519c:	08009558 	.word	0x08009558
 80051a0:	0800955c 	.word	0x0800955c
 80051a4:	08009560 	.word	0x08009560
 80051a8:	08009564 	.word	0x08009564
 80051ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80051b2:	4553      	cmp	r3, sl
 80051b4:	bfa8      	it	ge
 80051b6:	4653      	movge	r3, sl
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	4699      	mov	r9, r3
 80051bc:	dc36      	bgt.n	800522c <_printf_float+0x360>
 80051be:	f04f 0b00 	mov.w	fp, #0
 80051c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051c6:	f104 021a 	add.w	r2, r4, #26
 80051ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051cc:	9306      	str	r3, [sp, #24]
 80051ce:	eba3 0309 	sub.w	r3, r3, r9
 80051d2:	455b      	cmp	r3, fp
 80051d4:	dc31      	bgt.n	800523a <_printf_float+0x36e>
 80051d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051d8:	459a      	cmp	sl, r3
 80051da:	dc3a      	bgt.n	8005252 <_printf_float+0x386>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	07da      	lsls	r2, r3, #31
 80051e0:	d437      	bmi.n	8005252 <_printf_float+0x386>
 80051e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051e4:	ebaa 0903 	sub.w	r9, sl, r3
 80051e8:	9b06      	ldr	r3, [sp, #24]
 80051ea:	ebaa 0303 	sub.w	r3, sl, r3
 80051ee:	4599      	cmp	r9, r3
 80051f0:	bfa8      	it	ge
 80051f2:	4699      	movge	r9, r3
 80051f4:	f1b9 0f00 	cmp.w	r9, #0
 80051f8:	dc33      	bgt.n	8005262 <_printf_float+0x396>
 80051fa:	f04f 0800 	mov.w	r8, #0
 80051fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005202:	f104 0b1a 	add.w	fp, r4, #26
 8005206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005208:	ebaa 0303 	sub.w	r3, sl, r3
 800520c:	eba3 0309 	sub.w	r3, r3, r9
 8005210:	4543      	cmp	r3, r8
 8005212:	f77f af79 	ble.w	8005108 <_printf_float+0x23c>
 8005216:	2301      	movs	r3, #1
 8005218:	465a      	mov	r2, fp
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	f43f aeae 	beq.w	8004f82 <_printf_float+0xb6>
 8005226:	f108 0801 	add.w	r8, r8, #1
 800522a:	e7ec      	b.n	8005206 <_printf_float+0x33a>
 800522c:	4642      	mov	r2, r8
 800522e:	4631      	mov	r1, r6
 8005230:	4628      	mov	r0, r5
 8005232:	47b8      	blx	r7
 8005234:	3001      	adds	r0, #1
 8005236:	d1c2      	bne.n	80051be <_printf_float+0x2f2>
 8005238:	e6a3      	b.n	8004f82 <_printf_float+0xb6>
 800523a:	2301      	movs	r3, #1
 800523c:	4631      	mov	r1, r6
 800523e:	4628      	mov	r0, r5
 8005240:	9206      	str	r2, [sp, #24]
 8005242:	47b8      	blx	r7
 8005244:	3001      	adds	r0, #1
 8005246:	f43f ae9c 	beq.w	8004f82 <_printf_float+0xb6>
 800524a:	9a06      	ldr	r2, [sp, #24]
 800524c:	f10b 0b01 	add.w	fp, fp, #1
 8005250:	e7bb      	b.n	80051ca <_printf_float+0x2fe>
 8005252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005256:	4631      	mov	r1, r6
 8005258:	4628      	mov	r0, r5
 800525a:	47b8      	blx	r7
 800525c:	3001      	adds	r0, #1
 800525e:	d1c0      	bne.n	80051e2 <_printf_float+0x316>
 8005260:	e68f      	b.n	8004f82 <_printf_float+0xb6>
 8005262:	9a06      	ldr	r2, [sp, #24]
 8005264:	464b      	mov	r3, r9
 8005266:	4442      	add	r2, r8
 8005268:	4631      	mov	r1, r6
 800526a:	4628      	mov	r0, r5
 800526c:	47b8      	blx	r7
 800526e:	3001      	adds	r0, #1
 8005270:	d1c3      	bne.n	80051fa <_printf_float+0x32e>
 8005272:	e686      	b.n	8004f82 <_printf_float+0xb6>
 8005274:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005278:	f1ba 0f01 	cmp.w	sl, #1
 800527c:	dc01      	bgt.n	8005282 <_printf_float+0x3b6>
 800527e:	07db      	lsls	r3, r3, #31
 8005280:	d536      	bpl.n	80052f0 <_printf_float+0x424>
 8005282:	2301      	movs	r3, #1
 8005284:	4642      	mov	r2, r8
 8005286:	4631      	mov	r1, r6
 8005288:	4628      	mov	r0, r5
 800528a:	47b8      	blx	r7
 800528c:	3001      	adds	r0, #1
 800528e:	f43f ae78 	beq.w	8004f82 <_printf_float+0xb6>
 8005292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005296:	4631      	mov	r1, r6
 8005298:	4628      	mov	r0, r5
 800529a:	47b8      	blx	r7
 800529c:	3001      	adds	r0, #1
 800529e:	f43f ae70 	beq.w	8004f82 <_printf_float+0xb6>
 80052a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80052a6:	2200      	movs	r2, #0
 80052a8:	2300      	movs	r3, #0
 80052aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052ae:	f7fb fc0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80052b2:	b9c0      	cbnz	r0, 80052e6 <_printf_float+0x41a>
 80052b4:	4653      	mov	r3, sl
 80052b6:	f108 0201 	add.w	r2, r8, #1
 80052ba:	4631      	mov	r1, r6
 80052bc:	4628      	mov	r0, r5
 80052be:	47b8      	blx	r7
 80052c0:	3001      	adds	r0, #1
 80052c2:	d10c      	bne.n	80052de <_printf_float+0x412>
 80052c4:	e65d      	b.n	8004f82 <_printf_float+0xb6>
 80052c6:	2301      	movs	r3, #1
 80052c8:	465a      	mov	r2, fp
 80052ca:	4631      	mov	r1, r6
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b8      	blx	r7
 80052d0:	3001      	adds	r0, #1
 80052d2:	f43f ae56 	beq.w	8004f82 <_printf_float+0xb6>
 80052d6:	f108 0801 	add.w	r8, r8, #1
 80052da:	45d0      	cmp	r8, sl
 80052dc:	dbf3      	blt.n	80052c6 <_printf_float+0x3fa>
 80052de:	464b      	mov	r3, r9
 80052e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80052e4:	e6df      	b.n	80050a6 <_printf_float+0x1da>
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	f104 0b1a 	add.w	fp, r4, #26
 80052ee:	e7f4      	b.n	80052da <_printf_float+0x40e>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4642      	mov	r2, r8
 80052f4:	e7e1      	b.n	80052ba <_printf_float+0x3ee>
 80052f6:	2301      	movs	r3, #1
 80052f8:	464a      	mov	r2, r9
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	f43f ae3e 	beq.w	8004f82 <_printf_float+0xb6>
 8005306:	f108 0801 	add.w	r8, r8, #1
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800530e:	1a5b      	subs	r3, r3, r1
 8005310:	4543      	cmp	r3, r8
 8005312:	dcf0      	bgt.n	80052f6 <_printf_float+0x42a>
 8005314:	e6fc      	b.n	8005110 <_printf_float+0x244>
 8005316:	f04f 0800 	mov.w	r8, #0
 800531a:	f104 0919 	add.w	r9, r4, #25
 800531e:	e7f4      	b.n	800530a <_printf_float+0x43e>

08005320 <_printf_common>:
 8005320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005324:	4616      	mov	r6, r2
 8005326:	4698      	mov	r8, r3
 8005328:	688a      	ldr	r2, [r1, #8]
 800532a:	690b      	ldr	r3, [r1, #16]
 800532c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005330:	4293      	cmp	r3, r2
 8005332:	bfb8      	it	lt
 8005334:	4613      	movlt	r3, r2
 8005336:	6033      	str	r3, [r6, #0]
 8005338:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800533c:	4607      	mov	r7, r0
 800533e:	460c      	mov	r4, r1
 8005340:	b10a      	cbz	r2, 8005346 <_printf_common+0x26>
 8005342:	3301      	adds	r3, #1
 8005344:	6033      	str	r3, [r6, #0]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	0699      	lsls	r1, r3, #26
 800534a:	bf42      	ittt	mi
 800534c:	6833      	ldrmi	r3, [r6, #0]
 800534e:	3302      	addmi	r3, #2
 8005350:	6033      	strmi	r3, [r6, #0]
 8005352:	6825      	ldr	r5, [r4, #0]
 8005354:	f015 0506 	ands.w	r5, r5, #6
 8005358:	d106      	bne.n	8005368 <_printf_common+0x48>
 800535a:	f104 0a19 	add.w	sl, r4, #25
 800535e:	68e3      	ldr	r3, [r4, #12]
 8005360:	6832      	ldr	r2, [r6, #0]
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	42ab      	cmp	r3, r5
 8005366:	dc26      	bgt.n	80053b6 <_printf_common+0x96>
 8005368:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800536c:	6822      	ldr	r2, [r4, #0]
 800536e:	3b00      	subs	r3, #0
 8005370:	bf18      	it	ne
 8005372:	2301      	movne	r3, #1
 8005374:	0692      	lsls	r2, r2, #26
 8005376:	d42b      	bmi.n	80053d0 <_printf_common+0xb0>
 8005378:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800537c:	4641      	mov	r1, r8
 800537e:	4638      	mov	r0, r7
 8005380:	47c8      	blx	r9
 8005382:	3001      	adds	r0, #1
 8005384:	d01e      	beq.n	80053c4 <_printf_common+0xa4>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	6922      	ldr	r2, [r4, #16]
 800538a:	f003 0306 	and.w	r3, r3, #6
 800538e:	2b04      	cmp	r3, #4
 8005390:	bf02      	ittt	eq
 8005392:	68e5      	ldreq	r5, [r4, #12]
 8005394:	6833      	ldreq	r3, [r6, #0]
 8005396:	1aed      	subeq	r5, r5, r3
 8005398:	68a3      	ldr	r3, [r4, #8]
 800539a:	bf0c      	ite	eq
 800539c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053a0:	2500      	movne	r5, #0
 80053a2:	4293      	cmp	r3, r2
 80053a4:	bfc4      	itt	gt
 80053a6:	1a9b      	subgt	r3, r3, r2
 80053a8:	18ed      	addgt	r5, r5, r3
 80053aa:	2600      	movs	r6, #0
 80053ac:	341a      	adds	r4, #26
 80053ae:	42b5      	cmp	r5, r6
 80053b0:	d11a      	bne.n	80053e8 <_printf_common+0xc8>
 80053b2:	2000      	movs	r0, #0
 80053b4:	e008      	b.n	80053c8 <_printf_common+0xa8>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4652      	mov	r2, sl
 80053ba:	4641      	mov	r1, r8
 80053bc:	4638      	mov	r0, r7
 80053be:	47c8      	blx	r9
 80053c0:	3001      	adds	r0, #1
 80053c2:	d103      	bne.n	80053cc <_printf_common+0xac>
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053cc:	3501      	adds	r5, #1
 80053ce:	e7c6      	b.n	800535e <_printf_common+0x3e>
 80053d0:	18e1      	adds	r1, r4, r3
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	2030      	movs	r0, #48	@ 0x30
 80053d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053da:	4422      	add	r2, r4
 80053dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053e4:	3302      	adds	r3, #2
 80053e6:	e7c7      	b.n	8005378 <_printf_common+0x58>
 80053e8:	2301      	movs	r3, #1
 80053ea:	4622      	mov	r2, r4
 80053ec:	4641      	mov	r1, r8
 80053ee:	4638      	mov	r0, r7
 80053f0:	47c8      	blx	r9
 80053f2:	3001      	adds	r0, #1
 80053f4:	d0e6      	beq.n	80053c4 <_printf_common+0xa4>
 80053f6:	3601      	adds	r6, #1
 80053f8:	e7d9      	b.n	80053ae <_printf_common+0x8e>
	...

080053fc <_printf_i>:
 80053fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	7e0f      	ldrb	r7, [r1, #24]
 8005402:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005404:	2f78      	cmp	r7, #120	@ 0x78
 8005406:	4691      	mov	r9, r2
 8005408:	4680      	mov	r8, r0
 800540a:	460c      	mov	r4, r1
 800540c:	469a      	mov	sl, r3
 800540e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005412:	d807      	bhi.n	8005424 <_printf_i+0x28>
 8005414:	2f62      	cmp	r7, #98	@ 0x62
 8005416:	d80a      	bhi.n	800542e <_printf_i+0x32>
 8005418:	2f00      	cmp	r7, #0
 800541a:	f000 80d2 	beq.w	80055c2 <_printf_i+0x1c6>
 800541e:	2f58      	cmp	r7, #88	@ 0x58
 8005420:	f000 80b9 	beq.w	8005596 <_printf_i+0x19a>
 8005424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005428:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800542c:	e03a      	b.n	80054a4 <_printf_i+0xa8>
 800542e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005432:	2b15      	cmp	r3, #21
 8005434:	d8f6      	bhi.n	8005424 <_printf_i+0x28>
 8005436:	a101      	add	r1, pc, #4	@ (adr r1, 800543c <_printf_i+0x40>)
 8005438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800543c:	08005495 	.word	0x08005495
 8005440:	080054a9 	.word	0x080054a9
 8005444:	08005425 	.word	0x08005425
 8005448:	08005425 	.word	0x08005425
 800544c:	08005425 	.word	0x08005425
 8005450:	08005425 	.word	0x08005425
 8005454:	080054a9 	.word	0x080054a9
 8005458:	08005425 	.word	0x08005425
 800545c:	08005425 	.word	0x08005425
 8005460:	08005425 	.word	0x08005425
 8005464:	08005425 	.word	0x08005425
 8005468:	080055a9 	.word	0x080055a9
 800546c:	080054d3 	.word	0x080054d3
 8005470:	08005563 	.word	0x08005563
 8005474:	08005425 	.word	0x08005425
 8005478:	08005425 	.word	0x08005425
 800547c:	080055cb 	.word	0x080055cb
 8005480:	08005425 	.word	0x08005425
 8005484:	080054d3 	.word	0x080054d3
 8005488:	08005425 	.word	0x08005425
 800548c:	08005425 	.word	0x08005425
 8005490:	0800556b 	.word	0x0800556b
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	1d1a      	adds	r2, r3, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6032      	str	r2, [r6, #0]
 800549c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054a4:	2301      	movs	r3, #1
 80054a6:	e09d      	b.n	80055e4 <_printf_i+0x1e8>
 80054a8:	6833      	ldr	r3, [r6, #0]
 80054aa:	6820      	ldr	r0, [r4, #0]
 80054ac:	1d19      	adds	r1, r3, #4
 80054ae:	6031      	str	r1, [r6, #0]
 80054b0:	0606      	lsls	r6, r0, #24
 80054b2:	d501      	bpl.n	80054b8 <_printf_i+0xbc>
 80054b4:	681d      	ldr	r5, [r3, #0]
 80054b6:	e003      	b.n	80054c0 <_printf_i+0xc4>
 80054b8:	0645      	lsls	r5, r0, #25
 80054ba:	d5fb      	bpl.n	80054b4 <_printf_i+0xb8>
 80054bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054c0:	2d00      	cmp	r5, #0
 80054c2:	da03      	bge.n	80054cc <_printf_i+0xd0>
 80054c4:	232d      	movs	r3, #45	@ 0x2d
 80054c6:	426d      	negs	r5, r5
 80054c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054cc:	4859      	ldr	r0, [pc, #356]	@ (8005634 <_printf_i+0x238>)
 80054ce:	230a      	movs	r3, #10
 80054d0:	e011      	b.n	80054f6 <_printf_i+0xfa>
 80054d2:	6821      	ldr	r1, [r4, #0]
 80054d4:	6833      	ldr	r3, [r6, #0]
 80054d6:	0608      	lsls	r0, r1, #24
 80054d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80054dc:	d402      	bmi.n	80054e4 <_printf_i+0xe8>
 80054de:	0649      	lsls	r1, r1, #25
 80054e0:	bf48      	it	mi
 80054e2:	b2ad      	uxthmi	r5, r5
 80054e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80054e6:	4853      	ldr	r0, [pc, #332]	@ (8005634 <_printf_i+0x238>)
 80054e8:	6033      	str	r3, [r6, #0]
 80054ea:	bf14      	ite	ne
 80054ec:	230a      	movne	r3, #10
 80054ee:	2308      	moveq	r3, #8
 80054f0:	2100      	movs	r1, #0
 80054f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054f6:	6866      	ldr	r6, [r4, #4]
 80054f8:	60a6      	str	r6, [r4, #8]
 80054fa:	2e00      	cmp	r6, #0
 80054fc:	bfa2      	ittt	ge
 80054fe:	6821      	ldrge	r1, [r4, #0]
 8005500:	f021 0104 	bicge.w	r1, r1, #4
 8005504:	6021      	strge	r1, [r4, #0]
 8005506:	b90d      	cbnz	r5, 800550c <_printf_i+0x110>
 8005508:	2e00      	cmp	r6, #0
 800550a:	d04b      	beq.n	80055a4 <_printf_i+0x1a8>
 800550c:	4616      	mov	r6, r2
 800550e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005512:	fb03 5711 	mls	r7, r3, r1, r5
 8005516:	5dc7      	ldrb	r7, [r0, r7]
 8005518:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800551c:	462f      	mov	r7, r5
 800551e:	42bb      	cmp	r3, r7
 8005520:	460d      	mov	r5, r1
 8005522:	d9f4      	bls.n	800550e <_printf_i+0x112>
 8005524:	2b08      	cmp	r3, #8
 8005526:	d10b      	bne.n	8005540 <_printf_i+0x144>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	07df      	lsls	r7, r3, #31
 800552c:	d508      	bpl.n	8005540 <_printf_i+0x144>
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	6861      	ldr	r1, [r4, #4]
 8005532:	4299      	cmp	r1, r3
 8005534:	bfde      	ittt	le
 8005536:	2330      	movle	r3, #48	@ 0x30
 8005538:	f806 3c01 	strble.w	r3, [r6, #-1]
 800553c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005540:	1b92      	subs	r2, r2, r6
 8005542:	6122      	str	r2, [r4, #16]
 8005544:	f8cd a000 	str.w	sl, [sp]
 8005548:	464b      	mov	r3, r9
 800554a:	aa03      	add	r2, sp, #12
 800554c:	4621      	mov	r1, r4
 800554e:	4640      	mov	r0, r8
 8005550:	f7ff fee6 	bl	8005320 <_printf_common>
 8005554:	3001      	adds	r0, #1
 8005556:	d14a      	bne.n	80055ee <_printf_i+0x1f2>
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	b004      	add	sp, #16
 800555e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	f043 0320 	orr.w	r3, r3, #32
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	4833      	ldr	r0, [pc, #204]	@ (8005638 <_printf_i+0x23c>)
 800556c:	2778      	movs	r7, #120	@ 0x78
 800556e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	6831      	ldr	r1, [r6, #0]
 8005576:	061f      	lsls	r7, r3, #24
 8005578:	f851 5b04 	ldr.w	r5, [r1], #4
 800557c:	d402      	bmi.n	8005584 <_printf_i+0x188>
 800557e:	065f      	lsls	r7, r3, #25
 8005580:	bf48      	it	mi
 8005582:	b2ad      	uxthmi	r5, r5
 8005584:	6031      	str	r1, [r6, #0]
 8005586:	07d9      	lsls	r1, r3, #31
 8005588:	bf44      	itt	mi
 800558a:	f043 0320 	orrmi.w	r3, r3, #32
 800558e:	6023      	strmi	r3, [r4, #0]
 8005590:	b11d      	cbz	r5, 800559a <_printf_i+0x19e>
 8005592:	2310      	movs	r3, #16
 8005594:	e7ac      	b.n	80054f0 <_printf_i+0xf4>
 8005596:	4827      	ldr	r0, [pc, #156]	@ (8005634 <_printf_i+0x238>)
 8005598:	e7e9      	b.n	800556e <_printf_i+0x172>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	f023 0320 	bic.w	r3, r3, #32
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	e7f6      	b.n	8005592 <_printf_i+0x196>
 80055a4:	4616      	mov	r6, r2
 80055a6:	e7bd      	b.n	8005524 <_printf_i+0x128>
 80055a8:	6833      	ldr	r3, [r6, #0]
 80055aa:	6825      	ldr	r5, [r4, #0]
 80055ac:	6961      	ldr	r1, [r4, #20]
 80055ae:	1d18      	adds	r0, r3, #4
 80055b0:	6030      	str	r0, [r6, #0]
 80055b2:	062e      	lsls	r6, r5, #24
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	d501      	bpl.n	80055bc <_printf_i+0x1c0>
 80055b8:	6019      	str	r1, [r3, #0]
 80055ba:	e002      	b.n	80055c2 <_printf_i+0x1c6>
 80055bc:	0668      	lsls	r0, r5, #25
 80055be:	d5fb      	bpl.n	80055b8 <_printf_i+0x1bc>
 80055c0:	8019      	strh	r1, [r3, #0]
 80055c2:	2300      	movs	r3, #0
 80055c4:	6123      	str	r3, [r4, #16]
 80055c6:	4616      	mov	r6, r2
 80055c8:	e7bc      	b.n	8005544 <_printf_i+0x148>
 80055ca:	6833      	ldr	r3, [r6, #0]
 80055cc:	1d1a      	adds	r2, r3, #4
 80055ce:	6032      	str	r2, [r6, #0]
 80055d0:	681e      	ldr	r6, [r3, #0]
 80055d2:	6862      	ldr	r2, [r4, #4]
 80055d4:	2100      	movs	r1, #0
 80055d6:	4630      	mov	r0, r6
 80055d8:	f7fa fdfa 	bl	80001d0 <memchr>
 80055dc:	b108      	cbz	r0, 80055e2 <_printf_i+0x1e6>
 80055de:	1b80      	subs	r0, r0, r6
 80055e0:	6060      	str	r0, [r4, #4]
 80055e2:	6863      	ldr	r3, [r4, #4]
 80055e4:	6123      	str	r3, [r4, #16]
 80055e6:	2300      	movs	r3, #0
 80055e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ec:	e7aa      	b.n	8005544 <_printf_i+0x148>
 80055ee:	6923      	ldr	r3, [r4, #16]
 80055f0:	4632      	mov	r2, r6
 80055f2:	4649      	mov	r1, r9
 80055f4:	4640      	mov	r0, r8
 80055f6:	47d0      	blx	sl
 80055f8:	3001      	adds	r0, #1
 80055fa:	d0ad      	beq.n	8005558 <_printf_i+0x15c>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	079b      	lsls	r3, r3, #30
 8005600:	d413      	bmi.n	800562a <_printf_i+0x22e>
 8005602:	68e0      	ldr	r0, [r4, #12]
 8005604:	9b03      	ldr	r3, [sp, #12]
 8005606:	4298      	cmp	r0, r3
 8005608:	bfb8      	it	lt
 800560a:	4618      	movlt	r0, r3
 800560c:	e7a6      	b.n	800555c <_printf_i+0x160>
 800560e:	2301      	movs	r3, #1
 8005610:	4632      	mov	r2, r6
 8005612:	4649      	mov	r1, r9
 8005614:	4640      	mov	r0, r8
 8005616:	47d0      	blx	sl
 8005618:	3001      	adds	r0, #1
 800561a:	d09d      	beq.n	8005558 <_printf_i+0x15c>
 800561c:	3501      	adds	r5, #1
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	9903      	ldr	r1, [sp, #12]
 8005622:	1a5b      	subs	r3, r3, r1
 8005624:	42ab      	cmp	r3, r5
 8005626:	dcf2      	bgt.n	800560e <_printf_i+0x212>
 8005628:	e7eb      	b.n	8005602 <_printf_i+0x206>
 800562a:	2500      	movs	r5, #0
 800562c:	f104 0619 	add.w	r6, r4, #25
 8005630:	e7f5      	b.n	800561e <_printf_i+0x222>
 8005632:	bf00      	nop
 8005634:	08009566 	.word	0x08009566
 8005638:	08009577 	.word	0x08009577

0800563c <_scanf_float>:
 800563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005640:	b087      	sub	sp, #28
 8005642:	4617      	mov	r7, r2
 8005644:	9303      	str	r3, [sp, #12]
 8005646:	688b      	ldr	r3, [r1, #8]
 8005648:	1e5a      	subs	r2, r3, #1
 800564a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800564e:	bf81      	itttt	hi
 8005650:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005654:	eb03 0b05 	addhi.w	fp, r3, r5
 8005658:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800565c:	608b      	strhi	r3, [r1, #8]
 800565e:	680b      	ldr	r3, [r1, #0]
 8005660:	460a      	mov	r2, r1
 8005662:	f04f 0500 	mov.w	r5, #0
 8005666:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800566a:	f842 3b1c 	str.w	r3, [r2], #28
 800566e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005672:	4680      	mov	r8, r0
 8005674:	460c      	mov	r4, r1
 8005676:	bf98      	it	ls
 8005678:	f04f 0b00 	movls.w	fp, #0
 800567c:	9201      	str	r2, [sp, #4]
 800567e:	4616      	mov	r6, r2
 8005680:	46aa      	mov	sl, r5
 8005682:	46a9      	mov	r9, r5
 8005684:	9502      	str	r5, [sp, #8]
 8005686:	68a2      	ldr	r2, [r4, #8]
 8005688:	b152      	cbz	r2, 80056a0 <_scanf_float+0x64>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005690:	d864      	bhi.n	800575c <_scanf_float+0x120>
 8005692:	2b40      	cmp	r3, #64	@ 0x40
 8005694:	d83c      	bhi.n	8005710 <_scanf_float+0xd4>
 8005696:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800569a:	b2c8      	uxtb	r0, r1
 800569c:	280e      	cmp	r0, #14
 800569e:	d93a      	bls.n	8005716 <_scanf_float+0xda>
 80056a0:	f1b9 0f00 	cmp.w	r9, #0
 80056a4:	d003      	beq.n	80056ae <_scanf_float+0x72>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056b2:	f1ba 0f01 	cmp.w	sl, #1
 80056b6:	f200 8117 	bhi.w	80058e8 <_scanf_float+0x2ac>
 80056ba:	9b01      	ldr	r3, [sp, #4]
 80056bc:	429e      	cmp	r6, r3
 80056be:	f200 8108 	bhi.w	80058d2 <_scanf_float+0x296>
 80056c2:	2001      	movs	r0, #1
 80056c4:	b007      	add	sp, #28
 80056c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80056ce:	2a0d      	cmp	r2, #13
 80056d0:	d8e6      	bhi.n	80056a0 <_scanf_float+0x64>
 80056d2:	a101      	add	r1, pc, #4	@ (adr r1, 80056d8 <_scanf_float+0x9c>)
 80056d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056d8:	0800581f 	.word	0x0800581f
 80056dc:	080056a1 	.word	0x080056a1
 80056e0:	080056a1 	.word	0x080056a1
 80056e4:	080056a1 	.word	0x080056a1
 80056e8:	0800587f 	.word	0x0800587f
 80056ec:	08005857 	.word	0x08005857
 80056f0:	080056a1 	.word	0x080056a1
 80056f4:	080056a1 	.word	0x080056a1
 80056f8:	0800582d 	.word	0x0800582d
 80056fc:	080056a1 	.word	0x080056a1
 8005700:	080056a1 	.word	0x080056a1
 8005704:	080056a1 	.word	0x080056a1
 8005708:	080056a1 	.word	0x080056a1
 800570c:	080057e5 	.word	0x080057e5
 8005710:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005714:	e7db      	b.n	80056ce <_scanf_float+0x92>
 8005716:	290e      	cmp	r1, #14
 8005718:	d8c2      	bhi.n	80056a0 <_scanf_float+0x64>
 800571a:	a001      	add	r0, pc, #4	@ (adr r0, 8005720 <_scanf_float+0xe4>)
 800571c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005720:	080057d5 	.word	0x080057d5
 8005724:	080056a1 	.word	0x080056a1
 8005728:	080057d5 	.word	0x080057d5
 800572c:	0800586b 	.word	0x0800586b
 8005730:	080056a1 	.word	0x080056a1
 8005734:	0800577d 	.word	0x0800577d
 8005738:	080057bb 	.word	0x080057bb
 800573c:	080057bb 	.word	0x080057bb
 8005740:	080057bb 	.word	0x080057bb
 8005744:	080057bb 	.word	0x080057bb
 8005748:	080057bb 	.word	0x080057bb
 800574c:	080057bb 	.word	0x080057bb
 8005750:	080057bb 	.word	0x080057bb
 8005754:	080057bb 	.word	0x080057bb
 8005758:	080057bb 	.word	0x080057bb
 800575c:	2b6e      	cmp	r3, #110	@ 0x6e
 800575e:	d809      	bhi.n	8005774 <_scanf_float+0x138>
 8005760:	2b60      	cmp	r3, #96	@ 0x60
 8005762:	d8b2      	bhi.n	80056ca <_scanf_float+0x8e>
 8005764:	2b54      	cmp	r3, #84	@ 0x54
 8005766:	d07b      	beq.n	8005860 <_scanf_float+0x224>
 8005768:	2b59      	cmp	r3, #89	@ 0x59
 800576a:	d199      	bne.n	80056a0 <_scanf_float+0x64>
 800576c:	2d07      	cmp	r5, #7
 800576e:	d197      	bne.n	80056a0 <_scanf_float+0x64>
 8005770:	2508      	movs	r5, #8
 8005772:	e02c      	b.n	80057ce <_scanf_float+0x192>
 8005774:	2b74      	cmp	r3, #116	@ 0x74
 8005776:	d073      	beq.n	8005860 <_scanf_float+0x224>
 8005778:	2b79      	cmp	r3, #121	@ 0x79
 800577a:	e7f6      	b.n	800576a <_scanf_float+0x12e>
 800577c:	6821      	ldr	r1, [r4, #0]
 800577e:	05c8      	lsls	r0, r1, #23
 8005780:	d51b      	bpl.n	80057ba <_scanf_float+0x17e>
 8005782:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005786:	6021      	str	r1, [r4, #0]
 8005788:	f109 0901 	add.w	r9, r9, #1
 800578c:	f1bb 0f00 	cmp.w	fp, #0
 8005790:	d003      	beq.n	800579a <_scanf_float+0x15e>
 8005792:	3201      	adds	r2, #1
 8005794:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005798:	60a2      	str	r2, [r4, #8]
 800579a:	68a3      	ldr	r3, [r4, #8]
 800579c:	3b01      	subs	r3, #1
 800579e:	60a3      	str	r3, [r4, #8]
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	3301      	adds	r3, #1
 80057a4:	6123      	str	r3, [r4, #16]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	f340 8087 	ble.w	80058c0 <_scanf_float+0x284>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	e765      	b.n	8005686 <_scanf_float+0x4a>
 80057ba:	eb1a 0105 	adds.w	r1, sl, r5
 80057be:	f47f af6f 	bne.w	80056a0 <_scanf_float+0x64>
 80057c2:	6822      	ldr	r2, [r4, #0]
 80057c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80057c8:	6022      	str	r2, [r4, #0]
 80057ca:	460d      	mov	r5, r1
 80057cc:	468a      	mov	sl, r1
 80057ce:	f806 3b01 	strb.w	r3, [r6], #1
 80057d2:	e7e2      	b.n	800579a <_scanf_float+0x15e>
 80057d4:	6822      	ldr	r2, [r4, #0]
 80057d6:	0610      	lsls	r0, r2, #24
 80057d8:	f57f af62 	bpl.w	80056a0 <_scanf_float+0x64>
 80057dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057e0:	6022      	str	r2, [r4, #0]
 80057e2:	e7f4      	b.n	80057ce <_scanf_float+0x192>
 80057e4:	f1ba 0f00 	cmp.w	sl, #0
 80057e8:	d10e      	bne.n	8005808 <_scanf_float+0x1cc>
 80057ea:	f1b9 0f00 	cmp.w	r9, #0
 80057ee:	d10e      	bne.n	800580e <_scanf_float+0x1d2>
 80057f0:	6822      	ldr	r2, [r4, #0]
 80057f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80057f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80057fa:	d108      	bne.n	800580e <_scanf_float+0x1d2>
 80057fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005800:	6022      	str	r2, [r4, #0]
 8005802:	f04f 0a01 	mov.w	sl, #1
 8005806:	e7e2      	b.n	80057ce <_scanf_float+0x192>
 8005808:	f1ba 0f02 	cmp.w	sl, #2
 800580c:	d055      	beq.n	80058ba <_scanf_float+0x27e>
 800580e:	2d01      	cmp	r5, #1
 8005810:	d002      	beq.n	8005818 <_scanf_float+0x1dc>
 8005812:	2d04      	cmp	r5, #4
 8005814:	f47f af44 	bne.w	80056a0 <_scanf_float+0x64>
 8005818:	3501      	adds	r5, #1
 800581a:	b2ed      	uxtb	r5, r5
 800581c:	e7d7      	b.n	80057ce <_scanf_float+0x192>
 800581e:	f1ba 0f01 	cmp.w	sl, #1
 8005822:	f47f af3d 	bne.w	80056a0 <_scanf_float+0x64>
 8005826:	f04f 0a02 	mov.w	sl, #2
 800582a:	e7d0      	b.n	80057ce <_scanf_float+0x192>
 800582c:	b97d      	cbnz	r5, 800584e <_scanf_float+0x212>
 800582e:	f1b9 0f00 	cmp.w	r9, #0
 8005832:	f47f af38 	bne.w	80056a6 <_scanf_float+0x6a>
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800583c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005840:	f040 8108 	bne.w	8005a54 <_scanf_float+0x418>
 8005844:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005848:	6022      	str	r2, [r4, #0]
 800584a:	2501      	movs	r5, #1
 800584c:	e7bf      	b.n	80057ce <_scanf_float+0x192>
 800584e:	2d03      	cmp	r5, #3
 8005850:	d0e2      	beq.n	8005818 <_scanf_float+0x1dc>
 8005852:	2d05      	cmp	r5, #5
 8005854:	e7de      	b.n	8005814 <_scanf_float+0x1d8>
 8005856:	2d02      	cmp	r5, #2
 8005858:	f47f af22 	bne.w	80056a0 <_scanf_float+0x64>
 800585c:	2503      	movs	r5, #3
 800585e:	e7b6      	b.n	80057ce <_scanf_float+0x192>
 8005860:	2d06      	cmp	r5, #6
 8005862:	f47f af1d 	bne.w	80056a0 <_scanf_float+0x64>
 8005866:	2507      	movs	r5, #7
 8005868:	e7b1      	b.n	80057ce <_scanf_float+0x192>
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	0591      	lsls	r1, r2, #22
 800586e:	f57f af17 	bpl.w	80056a0 <_scanf_float+0x64>
 8005872:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005876:	6022      	str	r2, [r4, #0]
 8005878:	f8cd 9008 	str.w	r9, [sp, #8]
 800587c:	e7a7      	b.n	80057ce <_scanf_float+0x192>
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005884:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005888:	d006      	beq.n	8005898 <_scanf_float+0x25c>
 800588a:	0550      	lsls	r0, r2, #21
 800588c:	f57f af08 	bpl.w	80056a0 <_scanf_float+0x64>
 8005890:	f1b9 0f00 	cmp.w	r9, #0
 8005894:	f000 80de 	beq.w	8005a54 <_scanf_float+0x418>
 8005898:	0591      	lsls	r1, r2, #22
 800589a:	bf58      	it	pl
 800589c:	9902      	ldrpl	r1, [sp, #8]
 800589e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80058a2:	bf58      	it	pl
 80058a4:	eba9 0101 	subpl.w	r1, r9, r1
 80058a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80058ac:	bf58      	it	pl
 80058ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80058b2:	6022      	str	r2, [r4, #0]
 80058b4:	f04f 0900 	mov.w	r9, #0
 80058b8:	e789      	b.n	80057ce <_scanf_float+0x192>
 80058ba:	f04f 0a03 	mov.w	sl, #3
 80058be:	e786      	b.n	80057ce <_scanf_float+0x192>
 80058c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80058c4:	4639      	mov	r1, r7
 80058c6:	4640      	mov	r0, r8
 80058c8:	4798      	blx	r3
 80058ca:	2800      	cmp	r0, #0
 80058cc:	f43f aedb 	beq.w	8005686 <_scanf_float+0x4a>
 80058d0:	e6e6      	b.n	80056a0 <_scanf_float+0x64>
 80058d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058da:	463a      	mov	r2, r7
 80058dc:	4640      	mov	r0, r8
 80058de:	4798      	blx	r3
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	6123      	str	r3, [r4, #16]
 80058e6:	e6e8      	b.n	80056ba <_scanf_float+0x7e>
 80058e8:	1e6b      	subs	r3, r5, #1
 80058ea:	2b06      	cmp	r3, #6
 80058ec:	d824      	bhi.n	8005938 <_scanf_float+0x2fc>
 80058ee:	2d02      	cmp	r5, #2
 80058f0:	d836      	bhi.n	8005960 <_scanf_float+0x324>
 80058f2:	9b01      	ldr	r3, [sp, #4]
 80058f4:	429e      	cmp	r6, r3
 80058f6:	f67f aee4 	bls.w	80056c2 <_scanf_float+0x86>
 80058fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005902:	463a      	mov	r2, r7
 8005904:	4640      	mov	r0, r8
 8005906:	4798      	blx	r3
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	3b01      	subs	r3, #1
 800590c:	6123      	str	r3, [r4, #16]
 800590e:	e7f0      	b.n	80058f2 <_scanf_float+0x2b6>
 8005910:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005914:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005918:	463a      	mov	r2, r7
 800591a:	4640      	mov	r0, r8
 800591c:	4798      	blx	r3
 800591e:	6923      	ldr	r3, [r4, #16]
 8005920:	3b01      	subs	r3, #1
 8005922:	6123      	str	r3, [r4, #16]
 8005924:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005928:	fa5f fa8a 	uxtb.w	sl, sl
 800592c:	f1ba 0f02 	cmp.w	sl, #2
 8005930:	d1ee      	bne.n	8005910 <_scanf_float+0x2d4>
 8005932:	3d03      	subs	r5, #3
 8005934:	b2ed      	uxtb	r5, r5
 8005936:	1b76      	subs	r6, r6, r5
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	05da      	lsls	r2, r3, #23
 800593c:	d530      	bpl.n	80059a0 <_scanf_float+0x364>
 800593e:	055b      	lsls	r3, r3, #21
 8005940:	d511      	bpl.n	8005966 <_scanf_float+0x32a>
 8005942:	9b01      	ldr	r3, [sp, #4]
 8005944:	429e      	cmp	r6, r3
 8005946:	f67f aebc 	bls.w	80056c2 <_scanf_float+0x86>
 800594a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800594e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005952:	463a      	mov	r2, r7
 8005954:	4640      	mov	r0, r8
 8005956:	4798      	blx	r3
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	3b01      	subs	r3, #1
 800595c:	6123      	str	r3, [r4, #16]
 800595e:	e7f0      	b.n	8005942 <_scanf_float+0x306>
 8005960:	46aa      	mov	sl, r5
 8005962:	46b3      	mov	fp, r6
 8005964:	e7de      	b.n	8005924 <_scanf_float+0x2e8>
 8005966:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	2965      	cmp	r1, #101	@ 0x65
 800596e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005972:	f106 35ff 	add.w	r5, r6, #4294967295
 8005976:	6123      	str	r3, [r4, #16]
 8005978:	d00c      	beq.n	8005994 <_scanf_float+0x358>
 800597a:	2945      	cmp	r1, #69	@ 0x45
 800597c:	d00a      	beq.n	8005994 <_scanf_float+0x358>
 800597e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005982:	463a      	mov	r2, r7
 8005984:	4640      	mov	r0, r8
 8005986:	4798      	blx	r3
 8005988:	6923      	ldr	r3, [r4, #16]
 800598a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800598e:	3b01      	subs	r3, #1
 8005990:	1eb5      	subs	r5, r6, #2
 8005992:	6123      	str	r3, [r4, #16]
 8005994:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005998:	463a      	mov	r2, r7
 800599a:	4640      	mov	r0, r8
 800599c:	4798      	blx	r3
 800599e:	462e      	mov	r6, r5
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	f012 0210 	ands.w	r2, r2, #16
 80059a6:	d001      	beq.n	80059ac <_scanf_float+0x370>
 80059a8:	2000      	movs	r0, #0
 80059aa:	e68b      	b.n	80056c4 <_scanf_float+0x88>
 80059ac:	7032      	strb	r2, [r6, #0]
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059b8:	d11c      	bne.n	80059f4 <_scanf_float+0x3b8>
 80059ba:	9b02      	ldr	r3, [sp, #8]
 80059bc:	454b      	cmp	r3, r9
 80059be:	eba3 0209 	sub.w	r2, r3, r9
 80059c2:	d123      	bne.n	8005a0c <_scanf_float+0x3d0>
 80059c4:	9901      	ldr	r1, [sp, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	4640      	mov	r0, r8
 80059ca:	f002 fc2d 	bl	8008228 <_strtod_r>
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	6821      	ldr	r1, [r4, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f011 0f02 	tst.w	r1, #2
 80059d8:	ec57 6b10 	vmov	r6, r7, d0
 80059dc:	f103 0204 	add.w	r2, r3, #4
 80059e0:	d01f      	beq.n	8005a22 <_scanf_float+0x3e6>
 80059e2:	9903      	ldr	r1, [sp, #12]
 80059e4:	600a      	str	r2, [r1, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	e9c3 6700 	strd	r6, r7, [r3]
 80059ec:	68e3      	ldr	r3, [r4, #12]
 80059ee:	3301      	adds	r3, #1
 80059f0:	60e3      	str	r3, [r4, #12]
 80059f2:	e7d9      	b.n	80059a8 <_scanf_float+0x36c>
 80059f4:	9b04      	ldr	r3, [sp, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0e4      	beq.n	80059c4 <_scanf_float+0x388>
 80059fa:	9905      	ldr	r1, [sp, #20]
 80059fc:	230a      	movs	r3, #10
 80059fe:	3101      	adds	r1, #1
 8005a00:	4640      	mov	r0, r8
 8005a02:	f002 fc91 	bl	8008328 <_strtol_r>
 8005a06:	9b04      	ldr	r3, [sp, #16]
 8005a08:	9e05      	ldr	r6, [sp, #20]
 8005a0a:	1ac2      	subs	r2, r0, r3
 8005a0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005a10:	429e      	cmp	r6, r3
 8005a12:	bf28      	it	cs
 8005a14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005a18:	4910      	ldr	r1, [pc, #64]	@ (8005a5c <_scanf_float+0x420>)
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f000 f918 	bl	8005c50 <siprintf>
 8005a20:	e7d0      	b.n	80059c4 <_scanf_float+0x388>
 8005a22:	f011 0f04 	tst.w	r1, #4
 8005a26:	9903      	ldr	r1, [sp, #12]
 8005a28:	600a      	str	r2, [r1, #0]
 8005a2a:	d1dc      	bne.n	80059e6 <_scanf_float+0x3aa>
 8005a2c:	681d      	ldr	r5, [r3, #0]
 8005a2e:	4632      	mov	r2, r6
 8005a30:	463b      	mov	r3, r7
 8005a32:	4630      	mov	r0, r6
 8005a34:	4639      	mov	r1, r7
 8005a36:	f7fb f879 	bl	8000b2c <__aeabi_dcmpun>
 8005a3a:	b128      	cbz	r0, 8005a48 <_scanf_float+0x40c>
 8005a3c:	4808      	ldr	r0, [pc, #32]	@ (8005a60 <_scanf_float+0x424>)
 8005a3e:	f000 f9eb 	bl	8005e18 <nanf>
 8005a42:	ed85 0a00 	vstr	s0, [r5]
 8005a46:	e7d1      	b.n	80059ec <_scanf_float+0x3b0>
 8005a48:	4630      	mov	r0, r6
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	f7fb f8cc 	bl	8000be8 <__aeabi_d2f>
 8005a50:	6028      	str	r0, [r5, #0]
 8005a52:	e7cb      	b.n	80059ec <_scanf_float+0x3b0>
 8005a54:	f04f 0900 	mov.w	r9, #0
 8005a58:	e629      	b.n	80056ae <_scanf_float+0x72>
 8005a5a:	bf00      	nop
 8005a5c:	08009588 	.word	0x08009588
 8005a60:	0800991d 	.word	0x0800991d

08005a64 <std>:
 8005a64:	2300      	movs	r3, #0
 8005a66:	b510      	push	{r4, lr}
 8005a68:	4604      	mov	r4, r0
 8005a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a72:	6083      	str	r3, [r0, #8]
 8005a74:	8181      	strh	r1, [r0, #12]
 8005a76:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a78:	81c2      	strh	r2, [r0, #14]
 8005a7a:	6183      	str	r3, [r0, #24]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	2208      	movs	r2, #8
 8005a80:	305c      	adds	r0, #92	@ 0x5c
 8005a82:	f000 f948 	bl	8005d16 <memset>
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <std+0x58>)
 8005a88:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <std+0x5c>)
 8005a8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac4 <std+0x60>)
 8005a90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <std+0x64>)
 8005a94:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a96:	4b0d      	ldr	r3, [pc, #52]	@ (8005acc <std+0x68>)
 8005a98:	6224      	str	r4, [r4, #32]
 8005a9a:	429c      	cmp	r4, r3
 8005a9c:	d006      	beq.n	8005aac <std+0x48>
 8005a9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005aa2:	4294      	cmp	r4, r2
 8005aa4:	d002      	beq.n	8005aac <std+0x48>
 8005aa6:	33d0      	adds	r3, #208	@ 0xd0
 8005aa8:	429c      	cmp	r4, r3
 8005aaa:	d105      	bne.n	8005ab8 <std+0x54>
 8005aac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab4:	f000 b9ac 	b.w	8005e10 <__retarget_lock_init_recursive>
 8005ab8:	bd10      	pop	{r4, pc}
 8005aba:	bf00      	nop
 8005abc:	08005c91 	.word	0x08005c91
 8005ac0:	08005cb3 	.word	0x08005cb3
 8005ac4:	08005ceb 	.word	0x08005ceb
 8005ac8:	08005d0f 	.word	0x08005d0f
 8005acc:	200002d4 	.word	0x200002d4

08005ad0 <stdio_exit_handler>:
 8005ad0:	4a02      	ldr	r2, [pc, #8]	@ (8005adc <stdio_exit_handler+0xc>)
 8005ad2:	4903      	ldr	r1, [pc, #12]	@ (8005ae0 <stdio_exit_handler+0x10>)
 8005ad4:	4803      	ldr	r0, [pc, #12]	@ (8005ae4 <stdio_exit_handler+0x14>)
 8005ad6:	f000 b869 	b.w	8005bac <_fwalk_sglue>
 8005ada:	bf00      	nop
 8005adc:	2000000c 	.word	0x2000000c
 8005ae0:	080086e5 	.word	0x080086e5
 8005ae4:	2000001c 	.word	0x2000001c

08005ae8 <cleanup_stdio>:
 8005ae8:	6841      	ldr	r1, [r0, #4]
 8005aea:	4b0c      	ldr	r3, [pc, #48]	@ (8005b1c <cleanup_stdio+0x34>)
 8005aec:	4299      	cmp	r1, r3
 8005aee:	b510      	push	{r4, lr}
 8005af0:	4604      	mov	r4, r0
 8005af2:	d001      	beq.n	8005af8 <cleanup_stdio+0x10>
 8005af4:	f002 fdf6 	bl	80086e4 <_fflush_r>
 8005af8:	68a1      	ldr	r1, [r4, #8]
 8005afa:	4b09      	ldr	r3, [pc, #36]	@ (8005b20 <cleanup_stdio+0x38>)
 8005afc:	4299      	cmp	r1, r3
 8005afe:	d002      	beq.n	8005b06 <cleanup_stdio+0x1e>
 8005b00:	4620      	mov	r0, r4
 8005b02:	f002 fdef 	bl	80086e4 <_fflush_r>
 8005b06:	68e1      	ldr	r1, [r4, #12]
 8005b08:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <cleanup_stdio+0x3c>)
 8005b0a:	4299      	cmp	r1, r3
 8005b0c:	d004      	beq.n	8005b18 <cleanup_stdio+0x30>
 8005b0e:	4620      	mov	r0, r4
 8005b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b14:	f002 bde6 	b.w	80086e4 <_fflush_r>
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200002d4 	.word	0x200002d4
 8005b20:	2000033c 	.word	0x2000033c
 8005b24:	200003a4 	.word	0x200003a4

08005b28 <global_stdio_init.part.0>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <global_stdio_init.part.0+0x30>)
 8005b2c:	4c0b      	ldr	r4, [pc, #44]	@ (8005b5c <global_stdio_init.part.0+0x34>)
 8005b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b60 <global_stdio_init.part.0+0x38>)
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	4620      	mov	r0, r4
 8005b34:	2200      	movs	r2, #0
 8005b36:	2104      	movs	r1, #4
 8005b38:	f7ff ff94 	bl	8005a64 <std>
 8005b3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b40:	2201      	movs	r2, #1
 8005b42:	2109      	movs	r1, #9
 8005b44:	f7ff ff8e 	bl	8005a64 <std>
 8005b48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b52:	2112      	movs	r1, #18
 8005b54:	f7ff bf86 	b.w	8005a64 <std>
 8005b58:	2000040c 	.word	0x2000040c
 8005b5c:	200002d4 	.word	0x200002d4
 8005b60:	08005ad1 	.word	0x08005ad1

08005b64 <__sfp_lock_acquire>:
 8005b64:	4801      	ldr	r0, [pc, #4]	@ (8005b6c <__sfp_lock_acquire+0x8>)
 8005b66:	f000 b954 	b.w	8005e12 <__retarget_lock_acquire_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	20000415 	.word	0x20000415

08005b70 <__sfp_lock_release>:
 8005b70:	4801      	ldr	r0, [pc, #4]	@ (8005b78 <__sfp_lock_release+0x8>)
 8005b72:	f000 b94f 	b.w	8005e14 <__retarget_lock_release_recursive>
 8005b76:	bf00      	nop
 8005b78:	20000415 	.word	0x20000415

08005b7c <__sinit>:
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	4604      	mov	r4, r0
 8005b80:	f7ff fff0 	bl	8005b64 <__sfp_lock_acquire>
 8005b84:	6a23      	ldr	r3, [r4, #32]
 8005b86:	b11b      	cbz	r3, 8005b90 <__sinit+0x14>
 8005b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b8c:	f7ff bff0 	b.w	8005b70 <__sfp_lock_release>
 8005b90:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <__sinit+0x28>)
 8005b92:	6223      	str	r3, [r4, #32]
 8005b94:	4b04      	ldr	r3, [pc, #16]	@ (8005ba8 <__sinit+0x2c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1f5      	bne.n	8005b88 <__sinit+0xc>
 8005b9c:	f7ff ffc4 	bl	8005b28 <global_stdio_init.part.0>
 8005ba0:	e7f2      	b.n	8005b88 <__sinit+0xc>
 8005ba2:	bf00      	nop
 8005ba4:	08005ae9 	.word	0x08005ae9
 8005ba8:	2000040c 	.word	0x2000040c

08005bac <_fwalk_sglue>:
 8005bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	4688      	mov	r8, r1
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	2600      	movs	r6, #0
 8005bb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bbc:	f1b9 0901 	subs.w	r9, r9, #1
 8005bc0:	d505      	bpl.n	8005bce <_fwalk_sglue+0x22>
 8005bc2:	6824      	ldr	r4, [r4, #0]
 8005bc4:	2c00      	cmp	r4, #0
 8005bc6:	d1f7      	bne.n	8005bb8 <_fwalk_sglue+0xc>
 8005bc8:	4630      	mov	r0, r6
 8005bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bce:	89ab      	ldrh	r3, [r5, #12]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d907      	bls.n	8005be4 <_fwalk_sglue+0x38>
 8005bd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	d003      	beq.n	8005be4 <_fwalk_sglue+0x38>
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4638      	mov	r0, r7
 8005be0:	47c0      	blx	r8
 8005be2:	4306      	orrs	r6, r0
 8005be4:	3568      	adds	r5, #104	@ 0x68
 8005be6:	e7e9      	b.n	8005bbc <_fwalk_sglue+0x10>

08005be8 <sniprintf>:
 8005be8:	b40c      	push	{r2, r3}
 8005bea:	b530      	push	{r4, r5, lr}
 8005bec:	4b17      	ldr	r3, [pc, #92]	@ (8005c4c <sniprintf+0x64>)
 8005bee:	1e0c      	subs	r4, r1, #0
 8005bf0:	681d      	ldr	r5, [r3, #0]
 8005bf2:	b09d      	sub	sp, #116	@ 0x74
 8005bf4:	da08      	bge.n	8005c08 <sniprintf+0x20>
 8005bf6:	238b      	movs	r3, #139	@ 0x8b
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfe:	b01d      	add	sp, #116	@ 0x74
 8005c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c04:	b002      	add	sp, #8
 8005c06:	4770      	bx	lr
 8005c08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005c0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c10:	bf14      	ite	ne
 8005c12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c16:	4623      	moveq	r3, r4
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	9307      	str	r3, [sp, #28]
 8005c1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c20:	9002      	str	r0, [sp, #8]
 8005c22:	9006      	str	r0, [sp, #24]
 8005c24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005c2a:	ab21      	add	r3, sp, #132	@ 0x84
 8005c2c:	a902      	add	r1, sp, #8
 8005c2e:	4628      	mov	r0, r5
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	f002 fbd7 	bl	80083e4 <_svfiprintf_r>
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	bfbc      	itt	lt
 8005c3a:	238b      	movlt	r3, #139	@ 0x8b
 8005c3c:	602b      	strlt	r3, [r5, #0]
 8005c3e:	2c00      	cmp	r4, #0
 8005c40:	d0dd      	beq.n	8005bfe <sniprintf+0x16>
 8005c42:	9b02      	ldr	r3, [sp, #8]
 8005c44:	2200      	movs	r2, #0
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	e7d9      	b.n	8005bfe <sniprintf+0x16>
 8005c4a:	bf00      	nop
 8005c4c:	20000018 	.word	0x20000018

08005c50 <siprintf>:
 8005c50:	b40e      	push	{r1, r2, r3}
 8005c52:	b500      	push	{lr}
 8005c54:	b09c      	sub	sp, #112	@ 0x70
 8005c56:	ab1d      	add	r3, sp, #116	@ 0x74
 8005c58:	9002      	str	r0, [sp, #8]
 8005c5a:	9006      	str	r0, [sp, #24]
 8005c5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005c60:	4809      	ldr	r0, [pc, #36]	@ (8005c88 <siprintf+0x38>)
 8005c62:	9107      	str	r1, [sp, #28]
 8005c64:	9104      	str	r1, [sp, #16]
 8005c66:	4909      	ldr	r1, [pc, #36]	@ (8005c8c <siprintf+0x3c>)
 8005c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c6c:	9105      	str	r1, [sp, #20]
 8005c6e:	6800      	ldr	r0, [r0, #0]
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	a902      	add	r1, sp, #8
 8005c74:	f002 fbb6 	bl	80083e4 <_svfiprintf_r>
 8005c78:	9b02      	ldr	r3, [sp, #8]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	b01c      	add	sp, #112	@ 0x70
 8005c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c84:	b003      	add	sp, #12
 8005c86:	4770      	bx	lr
 8005c88:	20000018 	.word	0x20000018
 8005c8c:	ffff0208 	.word	0xffff0208

08005c90 <__sread>:
 8005c90:	b510      	push	{r4, lr}
 8005c92:	460c      	mov	r4, r1
 8005c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c98:	f000 f86c 	bl	8005d74 <_read_r>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	bfab      	itete	ge
 8005ca0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ca4:	181b      	addge	r3, r3, r0
 8005ca6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005caa:	bfac      	ite	ge
 8005cac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005cae:	81a3      	strhlt	r3, [r4, #12]
 8005cb0:	bd10      	pop	{r4, pc}

08005cb2 <__swrite>:
 8005cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb6:	461f      	mov	r7, r3
 8005cb8:	898b      	ldrh	r3, [r1, #12]
 8005cba:	05db      	lsls	r3, r3, #23
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	4616      	mov	r6, r2
 8005cc2:	d505      	bpl.n	8005cd0 <__swrite+0x1e>
 8005cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc8:	2302      	movs	r3, #2
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f000 f840 	bl	8005d50 <_lseek_r>
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cda:	81a3      	strh	r3, [r4, #12]
 8005cdc:	4632      	mov	r2, r6
 8005cde:	463b      	mov	r3, r7
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce6:	f000 b857 	b.w	8005d98 <_write_r>

08005cea <__sseek>:
 8005cea:	b510      	push	{r4, lr}
 8005cec:	460c      	mov	r4, r1
 8005cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf2:	f000 f82d 	bl	8005d50 <_lseek_r>
 8005cf6:	1c43      	adds	r3, r0, #1
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	bf15      	itete	ne
 8005cfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d06:	81a3      	strheq	r3, [r4, #12]
 8005d08:	bf18      	it	ne
 8005d0a:	81a3      	strhne	r3, [r4, #12]
 8005d0c:	bd10      	pop	{r4, pc}

08005d0e <__sclose>:
 8005d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d12:	f000 b80d 	b.w	8005d30 <_close_r>

08005d16 <memset>:
 8005d16:	4402      	add	r2, r0
 8005d18:	4603      	mov	r3, r0
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d100      	bne.n	8005d20 <memset+0xa>
 8005d1e:	4770      	bx	lr
 8005d20:	f803 1b01 	strb.w	r1, [r3], #1
 8005d24:	e7f9      	b.n	8005d1a <memset+0x4>
	...

08005d28 <_localeconv_r>:
 8005d28:	4800      	ldr	r0, [pc, #0]	@ (8005d2c <_localeconv_r+0x4>)
 8005d2a:	4770      	bx	lr
 8005d2c:	20000158 	.word	0x20000158

08005d30 <_close_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d06      	ldr	r5, [pc, #24]	@ (8005d4c <_close_r+0x1c>)
 8005d34:	2300      	movs	r3, #0
 8005d36:	4604      	mov	r4, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	602b      	str	r3, [r5, #0]
 8005d3c:	f7fb ff23 	bl	8001b86 <_close>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_close_r+0x1a>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_close_r+0x1a>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	20000410 	.word	0x20000410

08005d50 <_lseek_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d07      	ldr	r5, [pc, #28]	@ (8005d70 <_lseek_r+0x20>)
 8005d54:	4604      	mov	r4, r0
 8005d56:	4608      	mov	r0, r1
 8005d58:	4611      	mov	r1, r2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	602a      	str	r2, [r5, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f7fb ff38 	bl	8001bd4 <_lseek>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_lseek_r+0x1e>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_lseek_r+0x1e>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	20000410 	.word	0x20000410

08005d74 <_read_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d07      	ldr	r5, [pc, #28]	@ (8005d94 <_read_r+0x20>)
 8005d78:	4604      	mov	r4, r0
 8005d7a:	4608      	mov	r0, r1
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	2200      	movs	r2, #0
 8005d80:	602a      	str	r2, [r5, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	f7fb fec6 	bl	8001b14 <_read>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_read_r+0x1e>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_read_r+0x1e>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	20000410 	.word	0x20000410

08005d98 <_write_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d07      	ldr	r5, [pc, #28]	@ (8005db8 <_write_r+0x20>)
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	4608      	mov	r0, r1
 8005da0:	4611      	mov	r1, r2
 8005da2:	2200      	movs	r2, #0
 8005da4:	602a      	str	r2, [r5, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f7fb fed1 	bl	8001b4e <_write>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_write_r+0x1e>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_write_r+0x1e>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	20000410 	.word	0x20000410

08005dbc <__errno>:
 8005dbc:	4b01      	ldr	r3, [pc, #4]	@ (8005dc4 <__errno+0x8>)
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20000018 	.word	0x20000018

08005dc8 <__libc_init_array>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	4d0d      	ldr	r5, [pc, #52]	@ (8005e00 <__libc_init_array+0x38>)
 8005dcc:	4c0d      	ldr	r4, [pc, #52]	@ (8005e04 <__libc_init_array+0x3c>)
 8005dce:	1b64      	subs	r4, r4, r5
 8005dd0:	10a4      	asrs	r4, r4, #2
 8005dd2:	2600      	movs	r6, #0
 8005dd4:	42a6      	cmp	r6, r4
 8005dd6:	d109      	bne.n	8005dec <__libc_init_array+0x24>
 8005dd8:	4d0b      	ldr	r5, [pc, #44]	@ (8005e08 <__libc_init_array+0x40>)
 8005dda:	4c0c      	ldr	r4, [pc, #48]	@ (8005e0c <__libc_init_array+0x44>)
 8005ddc:	f003 fb72 	bl	80094c4 <_init>
 8005de0:	1b64      	subs	r4, r4, r5
 8005de2:	10a4      	asrs	r4, r4, #2
 8005de4:	2600      	movs	r6, #0
 8005de6:	42a6      	cmp	r6, r4
 8005de8:	d105      	bne.n	8005df6 <__libc_init_array+0x2e>
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df0:	4798      	blx	r3
 8005df2:	3601      	adds	r6, #1
 8005df4:	e7ee      	b.n	8005dd4 <__libc_init_array+0xc>
 8005df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfa:	4798      	blx	r3
 8005dfc:	3601      	adds	r6, #1
 8005dfe:	e7f2      	b.n	8005de6 <__libc_init_array+0x1e>
 8005e00:	08009988 	.word	0x08009988
 8005e04:	08009988 	.word	0x08009988
 8005e08:	08009988 	.word	0x08009988
 8005e0c:	0800998c 	.word	0x0800998c

08005e10 <__retarget_lock_init_recursive>:
 8005e10:	4770      	bx	lr

08005e12 <__retarget_lock_acquire_recursive>:
 8005e12:	4770      	bx	lr

08005e14 <__retarget_lock_release_recursive>:
 8005e14:	4770      	bx	lr
	...

08005e18 <nanf>:
 8005e18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005e20 <nanf+0x8>
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	7fc00000 	.word	0x7fc00000

08005e24 <quorem>:
 8005e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	6903      	ldr	r3, [r0, #16]
 8005e2a:	690c      	ldr	r4, [r1, #16]
 8005e2c:	42a3      	cmp	r3, r4
 8005e2e:	4607      	mov	r7, r0
 8005e30:	db7e      	blt.n	8005f30 <quorem+0x10c>
 8005e32:	3c01      	subs	r4, #1
 8005e34:	f101 0814 	add.w	r8, r1, #20
 8005e38:	00a3      	lsls	r3, r4, #2
 8005e3a:	f100 0514 	add.w	r5, r0, #20
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e44:	9301      	str	r3, [sp, #4]
 8005e46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	429a      	cmp	r2, r3
 8005e52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e56:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e5a:	d32e      	bcc.n	8005eba <quorem+0x96>
 8005e5c:	f04f 0a00 	mov.w	sl, #0
 8005e60:	46c4      	mov	ip, r8
 8005e62:	46ae      	mov	lr, r5
 8005e64:	46d3      	mov	fp, sl
 8005e66:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e6a:	b298      	uxth	r0, r3
 8005e6c:	fb06 a000 	mla	r0, r6, r0, sl
 8005e70:	0c02      	lsrs	r2, r0, #16
 8005e72:	0c1b      	lsrs	r3, r3, #16
 8005e74:	fb06 2303 	mla	r3, r6, r3, r2
 8005e78:	f8de 2000 	ldr.w	r2, [lr]
 8005e7c:	b280      	uxth	r0, r0
 8005e7e:	b292      	uxth	r2, r2
 8005e80:	1a12      	subs	r2, r2, r0
 8005e82:	445a      	add	r2, fp
 8005e84:	f8de 0000 	ldr.w	r0, [lr]
 8005e88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e96:	b292      	uxth	r2, r2
 8005e98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e9c:	45e1      	cmp	r9, ip
 8005e9e:	f84e 2b04 	str.w	r2, [lr], #4
 8005ea2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ea6:	d2de      	bcs.n	8005e66 <quorem+0x42>
 8005ea8:	9b00      	ldr	r3, [sp, #0]
 8005eaa:	58eb      	ldr	r3, [r5, r3]
 8005eac:	b92b      	cbnz	r3, 8005eba <quorem+0x96>
 8005eae:	9b01      	ldr	r3, [sp, #4]
 8005eb0:	3b04      	subs	r3, #4
 8005eb2:	429d      	cmp	r5, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	d32f      	bcc.n	8005f18 <quorem+0xf4>
 8005eb8:	613c      	str	r4, [r7, #16]
 8005eba:	4638      	mov	r0, r7
 8005ebc:	f001 f9c4 	bl	8007248 <__mcmp>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	db25      	blt.n	8005f10 <quorem+0xec>
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ecc:	f8d1 c000 	ldr.w	ip, [r1]
 8005ed0:	fa1f fe82 	uxth.w	lr, r2
 8005ed4:	fa1f f38c 	uxth.w	r3, ip
 8005ed8:	eba3 030e 	sub.w	r3, r3, lr
 8005edc:	4403      	add	r3, r0
 8005ede:	0c12      	lsrs	r2, r2, #16
 8005ee0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005ee4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eee:	45c1      	cmp	r9, r8
 8005ef0:	f841 3b04 	str.w	r3, [r1], #4
 8005ef4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ef8:	d2e6      	bcs.n	8005ec8 <quorem+0xa4>
 8005efa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005efe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f02:	b922      	cbnz	r2, 8005f0e <quorem+0xea>
 8005f04:	3b04      	subs	r3, #4
 8005f06:	429d      	cmp	r5, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	d30b      	bcc.n	8005f24 <quorem+0x100>
 8005f0c:	613c      	str	r4, [r7, #16]
 8005f0e:	3601      	adds	r6, #1
 8005f10:	4630      	mov	r0, r6
 8005f12:	b003      	add	sp, #12
 8005f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f18:	6812      	ldr	r2, [r2, #0]
 8005f1a:	3b04      	subs	r3, #4
 8005f1c:	2a00      	cmp	r2, #0
 8005f1e:	d1cb      	bne.n	8005eb8 <quorem+0x94>
 8005f20:	3c01      	subs	r4, #1
 8005f22:	e7c6      	b.n	8005eb2 <quorem+0x8e>
 8005f24:	6812      	ldr	r2, [r2, #0]
 8005f26:	3b04      	subs	r3, #4
 8005f28:	2a00      	cmp	r2, #0
 8005f2a:	d1ef      	bne.n	8005f0c <quorem+0xe8>
 8005f2c:	3c01      	subs	r4, #1
 8005f2e:	e7ea      	b.n	8005f06 <quorem+0xe2>
 8005f30:	2000      	movs	r0, #0
 8005f32:	e7ee      	b.n	8005f12 <quorem+0xee>
 8005f34:	0000      	movs	r0, r0
	...

08005f38 <_dtoa_r>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	69c7      	ldr	r7, [r0, #28]
 8005f3e:	b099      	sub	sp, #100	@ 0x64
 8005f40:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f44:	ec55 4b10 	vmov	r4, r5, d0
 8005f48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005f4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f4c:	4683      	mov	fp, r0
 8005f4e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f52:	b97f      	cbnz	r7, 8005f74 <_dtoa_r+0x3c>
 8005f54:	2010      	movs	r0, #16
 8005f56:	f000 fdfd 	bl	8006b54 <malloc>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005f60:	b920      	cbnz	r0, 8005f6c <_dtoa_r+0x34>
 8005f62:	4ba7      	ldr	r3, [pc, #668]	@ (8006200 <_dtoa_r+0x2c8>)
 8005f64:	21ef      	movs	r1, #239	@ 0xef
 8005f66:	48a7      	ldr	r0, [pc, #668]	@ (8006204 <_dtoa_r+0x2cc>)
 8005f68:	f002 fc36 	bl	80087d8 <__assert_func>
 8005f6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005f70:	6007      	str	r7, [r0, #0]
 8005f72:	60c7      	str	r7, [r0, #12]
 8005f74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f78:	6819      	ldr	r1, [r3, #0]
 8005f7a:	b159      	cbz	r1, 8005f94 <_dtoa_r+0x5c>
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	604a      	str	r2, [r1, #4]
 8005f80:	2301      	movs	r3, #1
 8005f82:	4093      	lsls	r3, r2
 8005f84:	608b      	str	r3, [r1, #8]
 8005f86:	4658      	mov	r0, fp
 8005f88:	f000 feda 	bl	8006d40 <_Bfree>
 8005f8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	1e2b      	subs	r3, r5, #0
 8005f96:	bfb9      	ittee	lt
 8005f98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f9c:	9303      	strlt	r3, [sp, #12]
 8005f9e:	2300      	movge	r3, #0
 8005fa0:	6033      	strge	r3, [r6, #0]
 8005fa2:	9f03      	ldr	r7, [sp, #12]
 8005fa4:	4b98      	ldr	r3, [pc, #608]	@ (8006208 <_dtoa_r+0x2d0>)
 8005fa6:	bfbc      	itt	lt
 8005fa8:	2201      	movlt	r2, #1
 8005faa:	6032      	strlt	r2, [r6, #0]
 8005fac:	43bb      	bics	r3, r7
 8005fae:	d112      	bne.n	8005fd6 <_dtoa_r+0x9e>
 8005fb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005fb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005fbc:	4323      	orrs	r3, r4
 8005fbe:	f000 854d 	beq.w	8006a5c <_dtoa_r+0xb24>
 8005fc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005fc4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800621c <_dtoa_r+0x2e4>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 854f 	beq.w	8006a6c <_dtoa_r+0xb34>
 8005fce:	f10a 0303 	add.w	r3, sl, #3
 8005fd2:	f000 bd49 	b.w	8006a68 <_dtoa_r+0xb30>
 8005fd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	ec51 0b17 	vmov	r0, r1, d7
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005fe6:	f7fa fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fea:	4680      	mov	r8, r0
 8005fec:	b158      	cbz	r0, 8006006 <_dtoa_r+0xce>
 8005fee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ff6:	b113      	cbz	r3, 8005ffe <_dtoa_r+0xc6>
 8005ff8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005ffa:	4b84      	ldr	r3, [pc, #528]	@ (800620c <_dtoa_r+0x2d4>)
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006220 <_dtoa_r+0x2e8>
 8006002:	f000 bd33 	b.w	8006a6c <_dtoa_r+0xb34>
 8006006:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800600a:	aa16      	add	r2, sp, #88	@ 0x58
 800600c:	a917      	add	r1, sp, #92	@ 0x5c
 800600e:	4658      	mov	r0, fp
 8006010:	f001 fa3a 	bl	8007488 <__d2b>
 8006014:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006018:	4681      	mov	r9, r0
 800601a:	2e00      	cmp	r6, #0
 800601c:	d077      	beq.n	800610e <_dtoa_r+0x1d6>
 800601e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006020:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800602c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006030:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006034:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006038:	4619      	mov	r1, r3
 800603a:	2200      	movs	r2, #0
 800603c:	4b74      	ldr	r3, [pc, #464]	@ (8006210 <_dtoa_r+0x2d8>)
 800603e:	f7fa f923 	bl	8000288 <__aeabi_dsub>
 8006042:	a369      	add	r3, pc, #420	@ (adr r3, 80061e8 <_dtoa_r+0x2b0>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa fad6 	bl	80005f8 <__aeabi_dmul>
 800604c:	a368      	add	r3, pc, #416	@ (adr r3, 80061f0 <_dtoa_r+0x2b8>)
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	f7fa f91b 	bl	800028c <__adddf3>
 8006056:	4604      	mov	r4, r0
 8006058:	4630      	mov	r0, r6
 800605a:	460d      	mov	r5, r1
 800605c:	f7fa fa62 	bl	8000524 <__aeabi_i2d>
 8006060:	a365      	add	r3, pc, #404	@ (adr r3, 80061f8 <_dtoa_r+0x2c0>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f7fa fac7 	bl	80005f8 <__aeabi_dmul>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4620      	mov	r0, r4
 8006070:	4629      	mov	r1, r5
 8006072:	f7fa f90b 	bl	800028c <__adddf3>
 8006076:	4604      	mov	r4, r0
 8006078:	460d      	mov	r5, r1
 800607a:	f7fa fd6d 	bl	8000b58 <__aeabi_d2iz>
 800607e:	2200      	movs	r2, #0
 8006080:	4607      	mov	r7, r0
 8006082:	2300      	movs	r3, #0
 8006084:	4620      	mov	r0, r4
 8006086:	4629      	mov	r1, r5
 8006088:	f7fa fd28 	bl	8000adc <__aeabi_dcmplt>
 800608c:	b140      	cbz	r0, 80060a0 <_dtoa_r+0x168>
 800608e:	4638      	mov	r0, r7
 8006090:	f7fa fa48 	bl	8000524 <__aeabi_i2d>
 8006094:	4622      	mov	r2, r4
 8006096:	462b      	mov	r3, r5
 8006098:	f7fa fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 800609c:	b900      	cbnz	r0, 80060a0 <_dtoa_r+0x168>
 800609e:	3f01      	subs	r7, #1
 80060a0:	2f16      	cmp	r7, #22
 80060a2:	d851      	bhi.n	8006148 <_dtoa_r+0x210>
 80060a4:	4b5b      	ldr	r3, [pc, #364]	@ (8006214 <_dtoa_r+0x2dc>)
 80060a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060b2:	f7fa fd13 	bl	8000adc <__aeabi_dcmplt>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d048      	beq.n	800614c <_dtoa_r+0x214>
 80060ba:	3f01      	subs	r7, #1
 80060bc:	2300      	movs	r3, #0
 80060be:	9312      	str	r3, [sp, #72]	@ 0x48
 80060c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80060c2:	1b9b      	subs	r3, r3, r6
 80060c4:	1e5a      	subs	r2, r3, #1
 80060c6:	bf44      	itt	mi
 80060c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80060cc:	2300      	movmi	r3, #0
 80060ce:	9208      	str	r2, [sp, #32]
 80060d0:	bf54      	ite	pl
 80060d2:	f04f 0800 	movpl.w	r8, #0
 80060d6:	9308      	strmi	r3, [sp, #32]
 80060d8:	2f00      	cmp	r7, #0
 80060da:	db39      	blt.n	8006150 <_dtoa_r+0x218>
 80060dc:	9b08      	ldr	r3, [sp, #32]
 80060de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80060e0:	443b      	add	r3, r7
 80060e2:	9308      	str	r3, [sp, #32]
 80060e4:	2300      	movs	r3, #0
 80060e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80060e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ea:	2b09      	cmp	r3, #9
 80060ec:	d864      	bhi.n	80061b8 <_dtoa_r+0x280>
 80060ee:	2b05      	cmp	r3, #5
 80060f0:	bfc4      	itt	gt
 80060f2:	3b04      	subgt	r3, #4
 80060f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80060f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f8:	f1a3 0302 	sub.w	r3, r3, #2
 80060fc:	bfcc      	ite	gt
 80060fe:	2400      	movgt	r4, #0
 8006100:	2401      	movle	r4, #1
 8006102:	2b03      	cmp	r3, #3
 8006104:	d863      	bhi.n	80061ce <_dtoa_r+0x296>
 8006106:	e8df f003 	tbb	[pc, r3]
 800610a:	372a      	.short	0x372a
 800610c:	5535      	.short	0x5535
 800610e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006112:	441e      	add	r6, r3
 8006114:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006118:	2b20      	cmp	r3, #32
 800611a:	bfc1      	itttt	gt
 800611c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006120:	409f      	lslgt	r7, r3
 8006122:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006126:	fa24 f303 	lsrgt.w	r3, r4, r3
 800612a:	bfd6      	itet	le
 800612c:	f1c3 0320 	rsble	r3, r3, #32
 8006130:	ea47 0003 	orrgt.w	r0, r7, r3
 8006134:	fa04 f003 	lslle.w	r0, r4, r3
 8006138:	f7fa f9e4 	bl	8000504 <__aeabi_ui2d>
 800613c:	2201      	movs	r2, #1
 800613e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006142:	3e01      	subs	r6, #1
 8006144:	9214      	str	r2, [sp, #80]	@ 0x50
 8006146:	e777      	b.n	8006038 <_dtoa_r+0x100>
 8006148:	2301      	movs	r3, #1
 800614a:	e7b8      	b.n	80060be <_dtoa_r+0x186>
 800614c:	9012      	str	r0, [sp, #72]	@ 0x48
 800614e:	e7b7      	b.n	80060c0 <_dtoa_r+0x188>
 8006150:	427b      	negs	r3, r7
 8006152:	930a      	str	r3, [sp, #40]	@ 0x28
 8006154:	2300      	movs	r3, #0
 8006156:	eba8 0807 	sub.w	r8, r8, r7
 800615a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800615c:	e7c4      	b.n	80060e8 <_dtoa_r+0x1b0>
 800615e:	2300      	movs	r3, #0
 8006160:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006162:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006164:	2b00      	cmp	r3, #0
 8006166:	dc35      	bgt.n	80061d4 <_dtoa_r+0x29c>
 8006168:	2301      	movs	r3, #1
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	9307      	str	r3, [sp, #28]
 800616e:	461a      	mov	r2, r3
 8006170:	920e      	str	r2, [sp, #56]	@ 0x38
 8006172:	e00b      	b.n	800618c <_dtoa_r+0x254>
 8006174:	2301      	movs	r3, #1
 8006176:	e7f3      	b.n	8006160 <_dtoa_r+0x228>
 8006178:	2300      	movs	r3, #0
 800617a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800617c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	2b01      	cmp	r3, #1
 8006186:	9307      	str	r3, [sp, #28]
 8006188:	bfb8      	it	lt
 800618a:	2301      	movlt	r3, #1
 800618c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006190:	2100      	movs	r1, #0
 8006192:	2204      	movs	r2, #4
 8006194:	f102 0514 	add.w	r5, r2, #20
 8006198:	429d      	cmp	r5, r3
 800619a:	d91f      	bls.n	80061dc <_dtoa_r+0x2a4>
 800619c:	6041      	str	r1, [r0, #4]
 800619e:	4658      	mov	r0, fp
 80061a0:	f000 fd8e 	bl	8006cc0 <_Balloc>
 80061a4:	4682      	mov	sl, r0
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d13c      	bne.n	8006224 <_dtoa_r+0x2ec>
 80061aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006218 <_dtoa_r+0x2e0>)
 80061ac:	4602      	mov	r2, r0
 80061ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80061b2:	e6d8      	b.n	8005f66 <_dtoa_r+0x2e>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e7e0      	b.n	800617a <_dtoa_r+0x242>
 80061b8:	2401      	movs	r4, #1
 80061ba:	2300      	movs	r3, #0
 80061bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80061be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80061c0:	f04f 33ff 	mov.w	r3, #4294967295
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	9307      	str	r3, [sp, #28]
 80061c8:	2200      	movs	r2, #0
 80061ca:	2312      	movs	r3, #18
 80061cc:	e7d0      	b.n	8006170 <_dtoa_r+0x238>
 80061ce:	2301      	movs	r3, #1
 80061d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061d2:	e7f5      	b.n	80061c0 <_dtoa_r+0x288>
 80061d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	9307      	str	r3, [sp, #28]
 80061da:	e7d7      	b.n	800618c <_dtoa_r+0x254>
 80061dc:	3101      	adds	r1, #1
 80061de:	0052      	lsls	r2, r2, #1
 80061e0:	e7d8      	b.n	8006194 <_dtoa_r+0x25c>
 80061e2:	bf00      	nop
 80061e4:	f3af 8000 	nop.w
 80061e8:	636f4361 	.word	0x636f4361
 80061ec:	3fd287a7 	.word	0x3fd287a7
 80061f0:	8b60c8b3 	.word	0x8b60c8b3
 80061f4:	3fc68a28 	.word	0x3fc68a28
 80061f8:	509f79fb 	.word	0x509f79fb
 80061fc:	3fd34413 	.word	0x3fd34413
 8006200:	0800959a 	.word	0x0800959a
 8006204:	080095b1 	.word	0x080095b1
 8006208:	7ff00000 	.word	0x7ff00000
 800620c:	08009565 	.word	0x08009565
 8006210:	3ff80000 	.word	0x3ff80000
 8006214:	080096a8 	.word	0x080096a8
 8006218:	08009609 	.word	0x08009609
 800621c:	08009596 	.word	0x08009596
 8006220:	08009564 	.word	0x08009564
 8006224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006228:	6018      	str	r0, [r3, #0]
 800622a:	9b07      	ldr	r3, [sp, #28]
 800622c:	2b0e      	cmp	r3, #14
 800622e:	f200 80a4 	bhi.w	800637a <_dtoa_r+0x442>
 8006232:	2c00      	cmp	r4, #0
 8006234:	f000 80a1 	beq.w	800637a <_dtoa_r+0x442>
 8006238:	2f00      	cmp	r7, #0
 800623a:	dd33      	ble.n	80062a4 <_dtoa_r+0x36c>
 800623c:	4bad      	ldr	r3, [pc, #692]	@ (80064f4 <_dtoa_r+0x5bc>)
 800623e:	f007 020f 	and.w	r2, r7, #15
 8006242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006246:	ed93 7b00 	vldr	d7, [r3]
 800624a:	05f8      	lsls	r0, r7, #23
 800624c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006250:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006254:	d516      	bpl.n	8006284 <_dtoa_r+0x34c>
 8006256:	4ba8      	ldr	r3, [pc, #672]	@ (80064f8 <_dtoa_r+0x5c0>)
 8006258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800625c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006260:	f7fa faf4 	bl	800084c <__aeabi_ddiv>
 8006264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006268:	f004 040f 	and.w	r4, r4, #15
 800626c:	2603      	movs	r6, #3
 800626e:	4da2      	ldr	r5, [pc, #648]	@ (80064f8 <_dtoa_r+0x5c0>)
 8006270:	b954      	cbnz	r4, 8006288 <_dtoa_r+0x350>
 8006272:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800627a:	f7fa fae7 	bl	800084c <__aeabi_ddiv>
 800627e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006282:	e028      	b.n	80062d6 <_dtoa_r+0x39e>
 8006284:	2602      	movs	r6, #2
 8006286:	e7f2      	b.n	800626e <_dtoa_r+0x336>
 8006288:	07e1      	lsls	r1, r4, #31
 800628a:	d508      	bpl.n	800629e <_dtoa_r+0x366>
 800628c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006290:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006294:	f7fa f9b0 	bl	80005f8 <__aeabi_dmul>
 8006298:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800629c:	3601      	adds	r6, #1
 800629e:	1064      	asrs	r4, r4, #1
 80062a0:	3508      	adds	r5, #8
 80062a2:	e7e5      	b.n	8006270 <_dtoa_r+0x338>
 80062a4:	f000 80d2 	beq.w	800644c <_dtoa_r+0x514>
 80062a8:	427c      	negs	r4, r7
 80062aa:	4b92      	ldr	r3, [pc, #584]	@ (80064f4 <_dtoa_r+0x5bc>)
 80062ac:	4d92      	ldr	r5, [pc, #584]	@ (80064f8 <_dtoa_r+0x5c0>)
 80062ae:	f004 020f 	and.w	r2, r4, #15
 80062b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062be:	f7fa f99b 	bl	80005f8 <__aeabi_dmul>
 80062c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062c6:	1124      	asrs	r4, r4, #4
 80062c8:	2300      	movs	r3, #0
 80062ca:	2602      	movs	r6, #2
 80062cc:	2c00      	cmp	r4, #0
 80062ce:	f040 80b2 	bne.w	8006436 <_dtoa_r+0x4fe>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1d3      	bne.n	800627e <_dtoa_r+0x346>
 80062d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80062d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80b7 	beq.w	8006450 <_dtoa_r+0x518>
 80062e2:	4b86      	ldr	r3, [pc, #536]	@ (80064fc <_dtoa_r+0x5c4>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	f7fa fbf7 	bl	8000adc <__aeabi_dcmplt>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	f000 80ae 	beq.w	8006450 <_dtoa_r+0x518>
 80062f4:	9b07      	ldr	r3, [sp, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 80aa 	beq.w	8006450 <_dtoa_r+0x518>
 80062fc:	9b00      	ldr	r3, [sp, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	dd37      	ble.n	8006372 <_dtoa_r+0x43a>
 8006302:	1e7b      	subs	r3, r7, #1
 8006304:	9304      	str	r3, [sp, #16]
 8006306:	4620      	mov	r0, r4
 8006308:	4b7d      	ldr	r3, [pc, #500]	@ (8006500 <_dtoa_r+0x5c8>)
 800630a:	2200      	movs	r2, #0
 800630c:	4629      	mov	r1, r5
 800630e:	f7fa f973 	bl	80005f8 <__aeabi_dmul>
 8006312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006316:	9c00      	ldr	r4, [sp, #0]
 8006318:	3601      	adds	r6, #1
 800631a:	4630      	mov	r0, r6
 800631c:	f7fa f902 	bl	8000524 <__aeabi_i2d>
 8006320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006324:	f7fa f968 	bl	80005f8 <__aeabi_dmul>
 8006328:	4b76      	ldr	r3, [pc, #472]	@ (8006504 <_dtoa_r+0x5cc>)
 800632a:	2200      	movs	r2, #0
 800632c:	f7f9 ffae 	bl	800028c <__adddf3>
 8006330:	4605      	mov	r5, r0
 8006332:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006336:	2c00      	cmp	r4, #0
 8006338:	f040 808d 	bne.w	8006456 <_dtoa_r+0x51e>
 800633c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006340:	4b71      	ldr	r3, [pc, #452]	@ (8006508 <_dtoa_r+0x5d0>)
 8006342:	2200      	movs	r2, #0
 8006344:	f7f9 ffa0 	bl	8000288 <__aeabi_dsub>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006350:	462a      	mov	r2, r5
 8006352:	4633      	mov	r3, r6
 8006354:	f7fa fbe0 	bl	8000b18 <__aeabi_dcmpgt>
 8006358:	2800      	cmp	r0, #0
 800635a:	f040 828b 	bne.w	8006874 <_dtoa_r+0x93c>
 800635e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006362:	462a      	mov	r2, r5
 8006364:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006368:	f7fa fbb8 	bl	8000adc <__aeabi_dcmplt>
 800636c:	2800      	cmp	r0, #0
 800636e:	f040 8128 	bne.w	80065c2 <_dtoa_r+0x68a>
 8006372:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006376:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800637a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800637c:	2b00      	cmp	r3, #0
 800637e:	f2c0 815a 	blt.w	8006636 <_dtoa_r+0x6fe>
 8006382:	2f0e      	cmp	r7, #14
 8006384:	f300 8157 	bgt.w	8006636 <_dtoa_r+0x6fe>
 8006388:	4b5a      	ldr	r3, [pc, #360]	@ (80064f4 <_dtoa_r+0x5bc>)
 800638a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800638e:	ed93 7b00 	vldr	d7, [r3]
 8006392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006394:	2b00      	cmp	r3, #0
 8006396:	ed8d 7b00 	vstr	d7, [sp]
 800639a:	da03      	bge.n	80063a4 <_dtoa_r+0x46c>
 800639c:	9b07      	ldr	r3, [sp, #28]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f340 8101 	ble.w	80065a6 <_dtoa_r+0x66e>
 80063a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80063a8:	4656      	mov	r6, sl
 80063aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063ae:	4620      	mov	r0, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7fa fa4b 	bl	800084c <__aeabi_ddiv>
 80063b6:	f7fa fbcf 	bl	8000b58 <__aeabi_d2iz>
 80063ba:	4680      	mov	r8, r0
 80063bc:	f7fa f8b2 	bl	8000524 <__aeabi_i2d>
 80063c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063c4:	f7fa f918 	bl	80005f8 <__aeabi_dmul>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4620      	mov	r0, r4
 80063ce:	4629      	mov	r1, r5
 80063d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80063d4:	f7f9 ff58 	bl	8000288 <__aeabi_dsub>
 80063d8:	f806 4b01 	strb.w	r4, [r6], #1
 80063dc:	9d07      	ldr	r5, [sp, #28]
 80063de:	eba6 040a 	sub.w	r4, r6, sl
 80063e2:	42a5      	cmp	r5, r4
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	f040 8117 	bne.w	800661a <_dtoa_r+0x6e2>
 80063ec:	f7f9 ff4e 	bl	800028c <__adddf3>
 80063f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063f4:	4604      	mov	r4, r0
 80063f6:	460d      	mov	r5, r1
 80063f8:	f7fa fb8e 	bl	8000b18 <__aeabi_dcmpgt>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	f040 80f9 	bne.w	80065f4 <_dtoa_r+0x6bc>
 8006402:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006406:	4620      	mov	r0, r4
 8006408:	4629      	mov	r1, r5
 800640a:	f7fa fb5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800640e:	b118      	cbz	r0, 8006418 <_dtoa_r+0x4e0>
 8006410:	f018 0f01 	tst.w	r8, #1
 8006414:	f040 80ee 	bne.w	80065f4 <_dtoa_r+0x6bc>
 8006418:	4649      	mov	r1, r9
 800641a:	4658      	mov	r0, fp
 800641c:	f000 fc90 	bl	8006d40 <_Bfree>
 8006420:	2300      	movs	r3, #0
 8006422:	7033      	strb	r3, [r6, #0]
 8006424:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006426:	3701      	adds	r7, #1
 8006428:	601f      	str	r7, [r3, #0]
 800642a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 831d 	beq.w	8006a6c <_dtoa_r+0xb34>
 8006432:	601e      	str	r6, [r3, #0]
 8006434:	e31a      	b.n	8006a6c <_dtoa_r+0xb34>
 8006436:	07e2      	lsls	r2, r4, #31
 8006438:	d505      	bpl.n	8006446 <_dtoa_r+0x50e>
 800643a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800643e:	f7fa f8db 	bl	80005f8 <__aeabi_dmul>
 8006442:	3601      	adds	r6, #1
 8006444:	2301      	movs	r3, #1
 8006446:	1064      	asrs	r4, r4, #1
 8006448:	3508      	adds	r5, #8
 800644a:	e73f      	b.n	80062cc <_dtoa_r+0x394>
 800644c:	2602      	movs	r6, #2
 800644e:	e742      	b.n	80062d6 <_dtoa_r+0x39e>
 8006450:	9c07      	ldr	r4, [sp, #28]
 8006452:	9704      	str	r7, [sp, #16]
 8006454:	e761      	b.n	800631a <_dtoa_r+0x3e2>
 8006456:	4b27      	ldr	r3, [pc, #156]	@ (80064f4 <_dtoa_r+0x5bc>)
 8006458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800645a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800645e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006462:	4454      	add	r4, sl
 8006464:	2900      	cmp	r1, #0
 8006466:	d053      	beq.n	8006510 <_dtoa_r+0x5d8>
 8006468:	4928      	ldr	r1, [pc, #160]	@ (800650c <_dtoa_r+0x5d4>)
 800646a:	2000      	movs	r0, #0
 800646c:	f7fa f9ee 	bl	800084c <__aeabi_ddiv>
 8006470:	4633      	mov	r3, r6
 8006472:	462a      	mov	r2, r5
 8006474:	f7f9 ff08 	bl	8000288 <__aeabi_dsub>
 8006478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800647c:	4656      	mov	r6, sl
 800647e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006482:	f7fa fb69 	bl	8000b58 <__aeabi_d2iz>
 8006486:	4605      	mov	r5, r0
 8006488:	f7fa f84c 	bl	8000524 <__aeabi_i2d>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006494:	f7f9 fef8 	bl	8000288 <__aeabi_dsub>
 8006498:	3530      	adds	r5, #48	@ 0x30
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064a2:	f806 5b01 	strb.w	r5, [r6], #1
 80064a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064aa:	f7fa fb17 	bl	8000adc <__aeabi_dcmplt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d171      	bne.n	8006596 <_dtoa_r+0x65e>
 80064b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064b6:	4911      	ldr	r1, [pc, #68]	@ (80064fc <_dtoa_r+0x5c4>)
 80064b8:	2000      	movs	r0, #0
 80064ba:	f7f9 fee5 	bl	8000288 <__aeabi_dsub>
 80064be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064c2:	f7fa fb0b 	bl	8000adc <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f040 8095 	bne.w	80065f6 <_dtoa_r+0x6be>
 80064cc:	42a6      	cmp	r6, r4
 80064ce:	f43f af50 	beq.w	8006372 <_dtoa_r+0x43a>
 80064d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006500 <_dtoa_r+0x5c8>)
 80064d8:	2200      	movs	r2, #0
 80064da:	f7fa f88d 	bl	80005f8 <__aeabi_dmul>
 80064de:	4b08      	ldr	r3, [pc, #32]	@ (8006500 <_dtoa_r+0x5c8>)
 80064e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064e4:	2200      	movs	r2, #0
 80064e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ea:	f7fa f885 	bl	80005f8 <__aeabi_dmul>
 80064ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f2:	e7c4      	b.n	800647e <_dtoa_r+0x546>
 80064f4:	080096a8 	.word	0x080096a8
 80064f8:	08009680 	.word	0x08009680
 80064fc:	3ff00000 	.word	0x3ff00000
 8006500:	40240000 	.word	0x40240000
 8006504:	401c0000 	.word	0x401c0000
 8006508:	40140000 	.word	0x40140000
 800650c:	3fe00000 	.word	0x3fe00000
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	f7fa f870 	bl	80005f8 <__aeabi_dmul>
 8006518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800651c:	9415      	str	r4, [sp, #84]	@ 0x54
 800651e:	4656      	mov	r6, sl
 8006520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006524:	f7fa fb18 	bl	8000b58 <__aeabi_d2iz>
 8006528:	4605      	mov	r5, r0
 800652a:	f7f9 fffb 	bl	8000524 <__aeabi_i2d>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006536:	f7f9 fea7 	bl	8000288 <__aeabi_dsub>
 800653a:	3530      	adds	r5, #48	@ 0x30
 800653c:	f806 5b01 	strb.w	r5, [r6], #1
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	42a6      	cmp	r6, r4
 8006546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	d124      	bne.n	800659a <_dtoa_r+0x662>
 8006550:	4bac      	ldr	r3, [pc, #688]	@ (8006804 <_dtoa_r+0x8cc>)
 8006552:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006556:	f7f9 fe99 	bl	800028c <__adddf3>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006562:	f7fa fad9 	bl	8000b18 <__aeabi_dcmpgt>
 8006566:	2800      	cmp	r0, #0
 8006568:	d145      	bne.n	80065f6 <_dtoa_r+0x6be>
 800656a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800656e:	49a5      	ldr	r1, [pc, #660]	@ (8006804 <_dtoa_r+0x8cc>)
 8006570:	2000      	movs	r0, #0
 8006572:	f7f9 fe89 	bl	8000288 <__aeabi_dsub>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800657e:	f7fa faad 	bl	8000adc <__aeabi_dcmplt>
 8006582:	2800      	cmp	r0, #0
 8006584:	f43f aef5 	beq.w	8006372 <_dtoa_r+0x43a>
 8006588:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800658a:	1e73      	subs	r3, r6, #1
 800658c:	9315      	str	r3, [sp, #84]	@ 0x54
 800658e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006592:	2b30      	cmp	r3, #48	@ 0x30
 8006594:	d0f8      	beq.n	8006588 <_dtoa_r+0x650>
 8006596:	9f04      	ldr	r7, [sp, #16]
 8006598:	e73e      	b.n	8006418 <_dtoa_r+0x4e0>
 800659a:	4b9b      	ldr	r3, [pc, #620]	@ (8006808 <_dtoa_r+0x8d0>)
 800659c:	f7fa f82c 	bl	80005f8 <__aeabi_dmul>
 80065a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a4:	e7bc      	b.n	8006520 <_dtoa_r+0x5e8>
 80065a6:	d10c      	bne.n	80065c2 <_dtoa_r+0x68a>
 80065a8:	4b98      	ldr	r3, [pc, #608]	@ (800680c <_dtoa_r+0x8d4>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065b0:	f7fa f822 	bl	80005f8 <__aeabi_dmul>
 80065b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065b8:	f7fa faa4 	bl	8000b04 <__aeabi_dcmpge>
 80065bc:	2800      	cmp	r0, #0
 80065be:	f000 8157 	beq.w	8006870 <_dtoa_r+0x938>
 80065c2:	2400      	movs	r4, #0
 80065c4:	4625      	mov	r5, r4
 80065c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065c8:	43db      	mvns	r3, r3
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	4656      	mov	r6, sl
 80065ce:	2700      	movs	r7, #0
 80065d0:	4621      	mov	r1, r4
 80065d2:	4658      	mov	r0, fp
 80065d4:	f000 fbb4 	bl	8006d40 <_Bfree>
 80065d8:	2d00      	cmp	r5, #0
 80065da:	d0dc      	beq.n	8006596 <_dtoa_r+0x65e>
 80065dc:	b12f      	cbz	r7, 80065ea <_dtoa_r+0x6b2>
 80065de:	42af      	cmp	r7, r5
 80065e0:	d003      	beq.n	80065ea <_dtoa_r+0x6b2>
 80065e2:	4639      	mov	r1, r7
 80065e4:	4658      	mov	r0, fp
 80065e6:	f000 fbab 	bl	8006d40 <_Bfree>
 80065ea:	4629      	mov	r1, r5
 80065ec:	4658      	mov	r0, fp
 80065ee:	f000 fba7 	bl	8006d40 <_Bfree>
 80065f2:	e7d0      	b.n	8006596 <_dtoa_r+0x65e>
 80065f4:	9704      	str	r7, [sp, #16]
 80065f6:	4633      	mov	r3, r6
 80065f8:	461e      	mov	r6, r3
 80065fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065fe:	2a39      	cmp	r2, #57	@ 0x39
 8006600:	d107      	bne.n	8006612 <_dtoa_r+0x6da>
 8006602:	459a      	cmp	sl, r3
 8006604:	d1f8      	bne.n	80065f8 <_dtoa_r+0x6c0>
 8006606:	9a04      	ldr	r2, [sp, #16]
 8006608:	3201      	adds	r2, #1
 800660a:	9204      	str	r2, [sp, #16]
 800660c:	2230      	movs	r2, #48	@ 0x30
 800660e:	f88a 2000 	strb.w	r2, [sl]
 8006612:	781a      	ldrb	r2, [r3, #0]
 8006614:	3201      	adds	r2, #1
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	e7bd      	b.n	8006596 <_dtoa_r+0x65e>
 800661a:	4b7b      	ldr	r3, [pc, #492]	@ (8006808 <_dtoa_r+0x8d0>)
 800661c:	2200      	movs	r2, #0
 800661e:	f7f9 ffeb 	bl	80005f8 <__aeabi_dmul>
 8006622:	2200      	movs	r2, #0
 8006624:	2300      	movs	r3, #0
 8006626:	4604      	mov	r4, r0
 8006628:	460d      	mov	r5, r1
 800662a:	f7fa fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800662e:	2800      	cmp	r0, #0
 8006630:	f43f aebb 	beq.w	80063aa <_dtoa_r+0x472>
 8006634:	e6f0      	b.n	8006418 <_dtoa_r+0x4e0>
 8006636:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006638:	2a00      	cmp	r2, #0
 800663a:	f000 80db 	beq.w	80067f4 <_dtoa_r+0x8bc>
 800663e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006640:	2a01      	cmp	r2, #1
 8006642:	f300 80bf 	bgt.w	80067c4 <_dtoa_r+0x88c>
 8006646:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006648:	2a00      	cmp	r2, #0
 800664a:	f000 80b7 	beq.w	80067bc <_dtoa_r+0x884>
 800664e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006652:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006654:	4646      	mov	r6, r8
 8006656:	9a08      	ldr	r2, [sp, #32]
 8006658:	2101      	movs	r1, #1
 800665a:	441a      	add	r2, r3
 800665c:	4658      	mov	r0, fp
 800665e:	4498      	add	r8, r3
 8006660:	9208      	str	r2, [sp, #32]
 8006662:	f000 fc6b 	bl	8006f3c <__i2b>
 8006666:	4605      	mov	r5, r0
 8006668:	b15e      	cbz	r6, 8006682 <_dtoa_r+0x74a>
 800666a:	9b08      	ldr	r3, [sp, #32]
 800666c:	2b00      	cmp	r3, #0
 800666e:	dd08      	ble.n	8006682 <_dtoa_r+0x74a>
 8006670:	42b3      	cmp	r3, r6
 8006672:	9a08      	ldr	r2, [sp, #32]
 8006674:	bfa8      	it	ge
 8006676:	4633      	movge	r3, r6
 8006678:	eba8 0803 	sub.w	r8, r8, r3
 800667c:	1af6      	subs	r6, r6, r3
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	9308      	str	r3, [sp, #32]
 8006682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006684:	b1f3      	cbz	r3, 80066c4 <_dtoa_r+0x78c>
 8006686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80b7 	beq.w	80067fc <_dtoa_r+0x8c4>
 800668e:	b18c      	cbz	r4, 80066b4 <_dtoa_r+0x77c>
 8006690:	4629      	mov	r1, r5
 8006692:	4622      	mov	r2, r4
 8006694:	4658      	mov	r0, fp
 8006696:	f000 fd11 	bl	80070bc <__pow5mult>
 800669a:	464a      	mov	r2, r9
 800669c:	4601      	mov	r1, r0
 800669e:	4605      	mov	r5, r0
 80066a0:	4658      	mov	r0, fp
 80066a2:	f000 fc61 	bl	8006f68 <__multiply>
 80066a6:	4649      	mov	r1, r9
 80066a8:	9004      	str	r0, [sp, #16]
 80066aa:	4658      	mov	r0, fp
 80066ac:	f000 fb48 	bl	8006d40 <_Bfree>
 80066b0:	9b04      	ldr	r3, [sp, #16]
 80066b2:	4699      	mov	r9, r3
 80066b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066b6:	1b1a      	subs	r2, r3, r4
 80066b8:	d004      	beq.n	80066c4 <_dtoa_r+0x78c>
 80066ba:	4649      	mov	r1, r9
 80066bc:	4658      	mov	r0, fp
 80066be:	f000 fcfd 	bl	80070bc <__pow5mult>
 80066c2:	4681      	mov	r9, r0
 80066c4:	2101      	movs	r1, #1
 80066c6:	4658      	mov	r0, fp
 80066c8:	f000 fc38 	bl	8006f3c <__i2b>
 80066cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066ce:	4604      	mov	r4, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 81cf 	beq.w	8006a74 <_dtoa_r+0xb3c>
 80066d6:	461a      	mov	r2, r3
 80066d8:	4601      	mov	r1, r0
 80066da:	4658      	mov	r0, fp
 80066dc:	f000 fcee 	bl	80070bc <__pow5mult>
 80066e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	4604      	mov	r4, r0
 80066e6:	f300 8095 	bgt.w	8006814 <_dtoa_r+0x8dc>
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 8087 	bne.w	8006800 <_dtoa_r+0x8c8>
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f040 8089 	bne.w	8006810 <_dtoa_r+0x8d8>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006704:	0d1b      	lsrs	r3, r3, #20
 8006706:	051b      	lsls	r3, r3, #20
 8006708:	b12b      	cbz	r3, 8006716 <_dtoa_r+0x7de>
 800670a:	9b08      	ldr	r3, [sp, #32]
 800670c:	3301      	adds	r3, #1
 800670e:	9308      	str	r3, [sp, #32]
 8006710:	f108 0801 	add.w	r8, r8, #1
 8006714:	2301      	movs	r3, #1
 8006716:	930a      	str	r3, [sp, #40]	@ 0x28
 8006718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 81b0 	beq.w	8006a80 <_dtoa_r+0xb48>
 8006720:	6923      	ldr	r3, [r4, #16]
 8006722:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006726:	6918      	ldr	r0, [r3, #16]
 8006728:	f000 fbbc 	bl	8006ea4 <__hi0bits>
 800672c:	f1c0 0020 	rsb	r0, r0, #32
 8006730:	9b08      	ldr	r3, [sp, #32]
 8006732:	4418      	add	r0, r3
 8006734:	f010 001f 	ands.w	r0, r0, #31
 8006738:	d077      	beq.n	800682a <_dtoa_r+0x8f2>
 800673a:	f1c0 0320 	rsb	r3, r0, #32
 800673e:	2b04      	cmp	r3, #4
 8006740:	dd6b      	ble.n	800681a <_dtoa_r+0x8e2>
 8006742:	9b08      	ldr	r3, [sp, #32]
 8006744:	f1c0 001c 	rsb	r0, r0, #28
 8006748:	4403      	add	r3, r0
 800674a:	4480      	add	r8, r0
 800674c:	4406      	add	r6, r0
 800674e:	9308      	str	r3, [sp, #32]
 8006750:	f1b8 0f00 	cmp.w	r8, #0
 8006754:	dd05      	ble.n	8006762 <_dtoa_r+0x82a>
 8006756:	4649      	mov	r1, r9
 8006758:	4642      	mov	r2, r8
 800675a:	4658      	mov	r0, fp
 800675c:	f000 fd08 	bl	8007170 <__lshift>
 8006760:	4681      	mov	r9, r0
 8006762:	9b08      	ldr	r3, [sp, #32]
 8006764:	2b00      	cmp	r3, #0
 8006766:	dd05      	ble.n	8006774 <_dtoa_r+0x83c>
 8006768:	4621      	mov	r1, r4
 800676a:	461a      	mov	r2, r3
 800676c:	4658      	mov	r0, fp
 800676e:	f000 fcff 	bl	8007170 <__lshift>
 8006772:	4604      	mov	r4, r0
 8006774:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006776:	2b00      	cmp	r3, #0
 8006778:	d059      	beq.n	800682e <_dtoa_r+0x8f6>
 800677a:	4621      	mov	r1, r4
 800677c:	4648      	mov	r0, r9
 800677e:	f000 fd63 	bl	8007248 <__mcmp>
 8006782:	2800      	cmp	r0, #0
 8006784:	da53      	bge.n	800682e <_dtoa_r+0x8f6>
 8006786:	1e7b      	subs	r3, r7, #1
 8006788:	9304      	str	r3, [sp, #16]
 800678a:	4649      	mov	r1, r9
 800678c:	2300      	movs	r3, #0
 800678e:	220a      	movs	r2, #10
 8006790:	4658      	mov	r0, fp
 8006792:	f000 faf7 	bl	8006d84 <__multadd>
 8006796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006798:	4681      	mov	r9, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8172 	beq.w	8006a84 <_dtoa_r+0xb4c>
 80067a0:	2300      	movs	r3, #0
 80067a2:	4629      	mov	r1, r5
 80067a4:	220a      	movs	r2, #10
 80067a6:	4658      	mov	r0, fp
 80067a8:	f000 faec 	bl	8006d84 <__multadd>
 80067ac:	9b00      	ldr	r3, [sp, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	4605      	mov	r5, r0
 80067b2:	dc67      	bgt.n	8006884 <_dtoa_r+0x94c>
 80067b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	dc41      	bgt.n	800683e <_dtoa_r+0x906>
 80067ba:	e063      	b.n	8006884 <_dtoa_r+0x94c>
 80067bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80067be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80067c2:	e746      	b.n	8006652 <_dtoa_r+0x71a>
 80067c4:	9b07      	ldr	r3, [sp, #28]
 80067c6:	1e5c      	subs	r4, r3, #1
 80067c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ca:	42a3      	cmp	r3, r4
 80067cc:	bfbf      	itttt	lt
 80067ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80067d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80067d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80067d4:	1ae3      	sublt	r3, r4, r3
 80067d6:	bfb4      	ite	lt
 80067d8:	18d2      	addlt	r2, r2, r3
 80067da:	1b1c      	subge	r4, r3, r4
 80067dc:	9b07      	ldr	r3, [sp, #28]
 80067de:	bfbc      	itt	lt
 80067e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80067e2:	2400      	movlt	r4, #0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bfb5      	itete	lt
 80067e8:	eba8 0603 	sublt.w	r6, r8, r3
 80067ec:	9b07      	ldrge	r3, [sp, #28]
 80067ee:	2300      	movlt	r3, #0
 80067f0:	4646      	movge	r6, r8
 80067f2:	e730      	b.n	8006656 <_dtoa_r+0x71e>
 80067f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80067f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80067f8:	4646      	mov	r6, r8
 80067fa:	e735      	b.n	8006668 <_dtoa_r+0x730>
 80067fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067fe:	e75c      	b.n	80066ba <_dtoa_r+0x782>
 8006800:	2300      	movs	r3, #0
 8006802:	e788      	b.n	8006716 <_dtoa_r+0x7de>
 8006804:	3fe00000 	.word	0x3fe00000
 8006808:	40240000 	.word	0x40240000
 800680c:	40140000 	.word	0x40140000
 8006810:	9b02      	ldr	r3, [sp, #8]
 8006812:	e780      	b.n	8006716 <_dtoa_r+0x7de>
 8006814:	2300      	movs	r3, #0
 8006816:	930a      	str	r3, [sp, #40]	@ 0x28
 8006818:	e782      	b.n	8006720 <_dtoa_r+0x7e8>
 800681a:	d099      	beq.n	8006750 <_dtoa_r+0x818>
 800681c:	9a08      	ldr	r2, [sp, #32]
 800681e:	331c      	adds	r3, #28
 8006820:	441a      	add	r2, r3
 8006822:	4498      	add	r8, r3
 8006824:	441e      	add	r6, r3
 8006826:	9208      	str	r2, [sp, #32]
 8006828:	e792      	b.n	8006750 <_dtoa_r+0x818>
 800682a:	4603      	mov	r3, r0
 800682c:	e7f6      	b.n	800681c <_dtoa_r+0x8e4>
 800682e:	9b07      	ldr	r3, [sp, #28]
 8006830:	9704      	str	r7, [sp, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	dc20      	bgt.n	8006878 <_dtoa_r+0x940>
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800683a:	2b02      	cmp	r3, #2
 800683c:	dd1e      	ble.n	800687c <_dtoa_r+0x944>
 800683e:	9b00      	ldr	r3, [sp, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f47f aec0 	bne.w	80065c6 <_dtoa_r+0x68e>
 8006846:	4621      	mov	r1, r4
 8006848:	2205      	movs	r2, #5
 800684a:	4658      	mov	r0, fp
 800684c:	f000 fa9a 	bl	8006d84 <__multadd>
 8006850:	4601      	mov	r1, r0
 8006852:	4604      	mov	r4, r0
 8006854:	4648      	mov	r0, r9
 8006856:	f000 fcf7 	bl	8007248 <__mcmp>
 800685a:	2800      	cmp	r0, #0
 800685c:	f77f aeb3 	ble.w	80065c6 <_dtoa_r+0x68e>
 8006860:	4656      	mov	r6, sl
 8006862:	2331      	movs	r3, #49	@ 0x31
 8006864:	f806 3b01 	strb.w	r3, [r6], #1
 8006868:	9b04      	ldr	r3, [sp, #16]
 800686a:	3301      	adds	r3, #1
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	e6ae      	b.n	80065ce <_dtoa_r+0x696>
 8006870:	9c07      	ldr	r4, [sp, #28]
 8006872:	9704      	str	r7, [sp, #16]
 8006874:	4625      	mov	r5, r4
 8006876:	e7f3      	b.n	8006860 <_dtoa_r+0x928>
 8006878:	9b07      	ldr	r3, [sp, #28]
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8104 	beq.w	8006a8c <_dtoa_r+0xb54>
 8006884:	2e00      	cmp	r6, #0
 8006886:	dd05      	ble.n	8006894 <_dtoa_r+0x95c>
 8006888:	4629      	mov	r1, r5
 800688a:	4632      	mov	r2, r6
 800688c:	4658      	mov	r0, fp
 800688e:	f000 fc6f 	bl	8007170 <__lshift>
 8006892:	4605      	mov	r5, r0
 8006894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	d05a      	beq.n	8006950 <_dtoa_r+0xa18>
 800689a:	6869      	ldr	r1, [r5, #4]
 800689c:	4658      	mov	r0, fp
 800689e:	f000 fa0f 	bl	8006cc0 <_Balloc>
 80068a2:	4606      	mov	r6, r0
 80068a4:	b928      	cbnz	r0, 80068b2 <_dtoa_r+0x97a>
 80068a6:	4b84      	ldr	r3, [pc, #528]	@ (8006ab8 <_dtoa_r+0xb80>)
 80068a8:	4602      	mov	r2, r0
 80068aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80068ae:	f7ff bb5a 	b.w	8005f66 <_dtoa_r+0x2e>
 80068b2:	692a      	ldr	r2, [r5, #16]
 80068b4:	3202      	adds	r2, #2
 80068b6:	0092      	lsls	r2, r2, #2
 80068b8:	f105 010c 	add.w	r1, r5, #12
 80068bc:	300c      	adds	r0, #12
 80068be:	f001 ff75 	bl	80087ac <memcpy>
 80068c2:	2201      	movs	r2, #1
 80068c4:	4631      	mov	r1, r6
 80068c6:	4658      	mov	r0, fp
 80068c8:	f000 fc52 	bl	8007170 <__lshift>
 80068cc:	f10a 0301 	add.w	r3, sl, #1
 80068d0:	9307      	str	r3, [sp, #28]
 80068d2:	9b00      	ldr	r3, [sp, #0]
 80068d4:	4453      	add	r3, sl
 80068d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068d8:	9b02      	ldr	r3, [sp, #8]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	462f      	mov	r7, r5
 80068e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80068e2:	4605      	mov	r5, r0
 80068e4:	9b07      	ldr	r3, [sp, #28]
 80068e6:	4621      	mov	r1, r4
 80068e8:	3b01      	subs	r3, #1
 80068ea:	4648      	mov	r0, r9
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	f7ff fa99 	bl	8005e24 <quorem>
 80068f2:	4639      	mov	r1, r7
 80068f4:	9002      	str	r0, [sp, #8]
 80068f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80068fa:	4648      	mov	r0, r9
 80068fc:	f000 fca4 	bl	8007248 <__mcmp>
 8006900:	462a      	mov	r2, r5
 8006902:	9008      	str	r0, [sp, #32]
 8006904:	4621      	mov	r1, r4
 8006906:	4658      	mov	r0, fp
 8006908:	f000 fcba 	bl	8007280 <__mdiff>
 800690c:	68c2      	ldr	r2, [r0, #12]
 800690e:	4606      	mov	r6, r0
 8006910:	bb02      	cbnz	r2, 8006954 <_dtoa_r+0xa1c>
 8006912:	4601      	mov	r1, r0
 8006914:	4648      	mov	r0, r9
 8006916:	f000 fc97 	bl	8007248 <__mcmp>
 800691a:	4602      	mov	r2, r0
 800691c:	4631      	mov	r1, r6
 800691e:	4658      	mov	r0, fp
 8006920:	920e      	str	r2, [sp, #56]	@ 0x38
 8006922:	f000 fa0d 	bl	8006d40 <_Bfree>
 8006926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006928:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800692a:	9e07      	ldr	r6, [sp, #28]
 800692c:	ea43 0102 	orr.w	r1, r3, r2
 8006930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006932:	4319      	orrs	r1, r3
 8006934:	d110      	bne.n	8006958 <_dtoa_r+0xa20>
 8006936:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800693a:	d029      	beq.n	8006990 <_dtoa_r+0xa58>
 800693c:	9b08      	ldr	r3, [sp, #32]
 800693e:	2b00      	cmp	r3, #0
 8006940:	dd02      	ble.n	8006948 <_dtoa_r+0xa10>
 8006942:	9b02      	ldr	r3, [sp, #8]
 8006944:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006948:	9b00      	ldr	r3, [sp, #0]
 800694a:	f883 8000 	strb.w	r8, [r3]
 800694e:	e63f      	b.n	80065d0 <_dtoa_r+0x698>
 8006950:	4628      	mov	r0, r5
 8006952:	e7bb      	b.n	80068cc <_dtoa_r+0x994>
 8006954:	2201      	movs	r2, #1
 8006956:	e7e1      	b.n	800691c <_dtoa_r+0x9e4>
 8006958:	9b08      	ldr	r3, [sp, #32]
 800695a:	2b00      	cmp	r3, #0
 800695c:	db04      	blt.n	8006968 <_dtoa_r+0xa30>
 800695e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006960:	430b      	orrs	r3, r1
 8006962:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006964:	430b      	orrs	r3, r1
 8006966:	d120      	bne.n	80069aa <_dtoa_r+0xa72>
 8006968:	2a00      	cmp	r2, #0
 800696a:	dded      	ble.n	8006948 <_dtoa_r+0xa10>
 800696c:	4649      	mov	r1, r9
 800696e:	2201      	movs	r2, #1
 8006970:	4658      	mov	r0, fp
 8006972:	f000 fbfd 	bl	8007170 <__lshift>
 8006976:	4621      	mov	r1, r4
 8006978:	4681      	mov	r9, r0
 800697a:	f000 fc65 	bl	8007248 <__mcmp>
 800697e:	2800      	cmp	r0, #0
 8006980:	dc03      	bgt.n	800698a <_dtoa_r+0xa52>
 8006982:	d1e1      	bne.n	8006948 <_dtoa_r+0xa10>
 8006984:	f018 0f01 	tst.w	r8, #1
 8006988:	d0de      	beq.n	8006948 <_dtoa_r+0xa10>
 800698a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800698e:	d1d8      	bne.n	8006942 <_dtoa_r+0xa0a>
 8006990:	9a00      	ldr	r2, [sp, #0]
 8006992:	2339      	movs	r3, #57	@ 0x39
 8006994:	7013      	strb	r3, [r2, #0]
 8006996:	4633      	mov	r3, r6
 8006998:	461e      	mov	r6, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80069a0:	2a39      	cmp	r2, #57	@ 0x39
 80069a2:	d052      	beq.n	8006a4a <_dtoa_r+0xb12>
 80069a4:	3201      	adds	r2, #1
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	e612      	b.n	80065d0 <_dtoa_r+0x698>
 80069aa:	2a00      	cmp	r2, #0
 80069ac:	dd07      	ble.n	80069be <_dtoa_r+0xa86>
 80069ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069b2:	d0ed      	beq.n	8006990 <_dtoa_r+0xa58>
 80069b4:	9a00      	ldr	r2, [sp, #0]
 80069b6:	f108 0301 	add.w	r3, r8, #1
 80069ba:	7013      	strb	r3, [r2, #0]
 80069bc:	e608      	b.n	80065d0 <_dtoa_r+0x698>
 80069be:	9b07      	ldr	r3, [sp, #28]
 80069c0:	9a07      	ldr	r2, [sp, #28]
 80069c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80069c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d028      	beq.n	8006a1e <_dtoa_r+0xae6>
 80069cc:	4649      	mov	r1, r9
 80069ce:	2300      	movs	r3, #0
 80069d0:	220a      	movs	r2, #10
 80069d2:	4658      	mov	r0, fp
 80069d4:	f000 f9d6 	bl	8006d84 <__multadd>
 80069d8:	42af      	cmp	r7, r5
 80069da:	4681      	mov	r9, r0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	f04f 020a 	mov.w	r2, #10
 80069e4:	4639      	mov	r1, r7
 80069e6:	4658      	mov	r0, fp
 80069e8:	d107      	bne.n	80069fa <_dtoa_r+0xac2>
 80069ea:	f000 f9cb 	bl	8006d84 <__multadd>
 80069ee:	4607      	mov	r7, r0
 80069f0:	4605      	mov	r5, r0
 80069f2:	9b07      	ldr	r3, [sp, #28]
 80069f4:	3301      	adds	r3, #1
 80069f6:	9307      	str	r3, [sp, #28]
 80069f8:	e774      	b.n	80068e4 <_dtoa_r+0x9ac>
 80069fa:	f000 f9c3 	bl	8006d84 <__multadd>
 80069fe:	4629      	mov	r1, r5
 8006a00:	4607      	mov	r7, r0
 8006a02:	2300      	movs	r3, #0
 8006a04:	220a      	movs	r2, #10
 8006a06:	4658      	mov	r0, fp
 8006a08:	f000 f9bc 	bl	8006d84 <__multadd>
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	e7f0      	b.n	80069f2 <_dtoa_r+0xaba>
 8006a10:	9b00      	ldr	r3, [sp, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	bfcc      	ite	gt
 8006a16:	461e      	movgt	r6, r3
 8006a18:	2601      	movle	r6, #1
 8006a1a:	4456      	add	r6, sl
 8006a1c:	2700      	movs	r7, #0
 8006a1e:	4649      	mov	r1, r9
 8006a20:	2201      	movs	r2, #1
 8006a22:	4658      	mov	r0, fp
 8006a24:	f000 fba4 	bl	8007170 <__lshift>
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4681      	mov	r9, r0
 8006a2c:	f000 fc0c 	bl	8007248 <__mcmp>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	dcb0      	bgt.n	8006996 <_dtoa_r+0xa5e>
 8006a34:	d102      	bne.n	8006a3c <_dtoa_r+0xb04>
 8006a36:	f018 0f01 	tst.w	r8, #1
 8006a3a:	d1ac      	bne.n	8006996 <_dtoa_r+0xa5e>
 8006a3c:	4633      	mov	r3, r6
 8006a3e:	461e      	mov	r6, r3
 8006a40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a44:	2a30      	cmp	r2, #48	@ 0x30
 8006a46:	d0fa      	beq.n	8006a3e <_dtoa_r+0xb06>
 8006a48:	e5c2      	b.n	80065d0 <_dtoa_r+0x698>
 8006a4a:	459a      	cmp	sl, r3
 8006a4c:	d1a4      	bne.n	8006998 <_dtoa_r+0xa60>
 8006a4e:	9b04      	ldr	r3, [sp, #16]
 8006a50:	3301      	adds	r3, #1
 8006a52:	9304      	str	r3, [sp, #16]
 8006a54:	2331      	movs	r3, #49	@ 0x31
 8006a56:	f88a 3000 	strb.w	r3, [sl]
 8006a5a:	e5b9      	b.n	80065d0 <_dtoa_r+0x698>
 8006a5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006abc <_dtoa_r+0xb84>
 8006a62:	b11b      	cbz	r3, 8006a6c <_dtoa_r+0xb34>
 8006a64:	f10a 0308 	add.w	r3, sl, #8
 8006a68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	b019      	add	sp, #100	@ 0x64
 8006a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	f77f ae37 	ble.w	80066ea <_dtoa_r+0x7b2>
 8006a7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a80:	2001      	movs	r0, #1
 8006a82:	e655      	b.n	8006730 <_dtoa_r+0x7f8>
 8006a84:	9b00      	ldr	r3, [sp, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f77f aed6 	ble.w	8006838 <_dtoa_r+0x900>
 8006a8c:	4656      	mov	r6, sl
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4648      	mov	r0, r9
 8006a92:	f7ff f9c7 	bl	8005e24 <quorem>
 8006a96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a9a:	f806 8b01 	strb.w	r8, [r6], #1
 8006a9e:	9b00      	ldr	r3, [sp, #0]
 8006aa0:	eba6 020a 	sub.w	r2, r6, sl
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	ddb3      	ble.n	8006a10 <_dtoa_r+0xad8>
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	2300      	movs	r3, #0
 8006aac:	220a      	movs	r2, #10
 8006aae:	4658      	mov	r0, fp
 8006ab0:	f000 f968 	bl	8006d84 <__multadd>
 8006ab4:	4681      	mov	r9, r0
 8006ab6:	e7ea      	b.n	8006a8e <_dtoa_r+0xb56>
 8006ab8:	08009609 	.word	0x08009609
 8006abc:	0800958d 	.word	0x0800958d

08006ac0 <_free_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	d041      	beq.n	8006b4c <_free_r+0x8c>
 8006ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006acc:	1f0c      	subs	r4, r1, #4
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bfb8      	it	lt
 8006ad2:	18e4      	addlt	r4, r4, r3
 8006ad4:	f000 f8e8 	bl	8006ca8 <__malloc_lock>
 8006ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b50 <_free_r+0x90>)
 8006ada:	6813      	ldr	r3, [r2, #0]
 8006adc:	b933      	cbnz	r3, 8006aec <_free_r+0x2c>
 8006ade:	6063      	str	r3, [r4, #4]
 8006ae0:	6014      	str	r4, [r2, #0]
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ae8:	f000 b8e4 	b.w	8006cb4 <__malloc_unlock>
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	d908      	bls.n	8006b02 <_free_r+0x42>
 8006af0:	6820      	ldr	r0, [r4, #0]
 8006af2:	1821      	adds	r1, r4, r0
 8006af4:	428b      	cmp	r3, r1
 8006af6:	bf01      	itttt	eq
 8006af8:	6819      	ldreq	r1, [r3, #0]
 8006afa:	685b      	ldreq	r3, [r3, #4]
 8006afc:	1809      	addeq	r1, r1, r0
 8006afe:	6021      	streq	r1, [r4, #0]
 8006b00:	e7ed      	b.n	8006ade <_free_r+0x1e>
 8006b02:	461a      	mov	r2, r3
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	b10b      	cbz	r3, 8006b0c <_free_r+0x4c>
 8006b08:	42a3      	cmp	r3, r4
 8006b0a:	d9fa      	bls.n	8006b02 <_free_r+0x42>
 8006b0c:	6811      	ldr	r1, [r2, #0]
 8006b0e:	1850      	adds	r0, r2, r1
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d10b      	bne.n	8006b2c <_free_r+0x6c>
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	4401      	add	r1, r0
 8006b18:	1850      	adds	r0, r2, r1
 8006b1a:	4283      	cmp	r3, r0
 8006b1c:	6011      	str	r1, [r2, #0]
 8006b1e:	d1e0      	bne.n	8006ae2 <_free_r+0x22>
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	6053      	str	r3, [r2, #4]
 8006b26:	4408      	add	r0, r1
 8006b28:	6010      	str	r0, [r2, #0]
 8006b2a:	e7da      	b.n	8006ae2 <_free_r+0x22>
 8006b2c:	d902      	bls.n	8006b34 <_free_r+0x74>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	e7d6      	b.n	8006ae2 <_free_r+0x22>
 8006b34:	6820      	ldr	r0, [r4, #0]
 8006b36:	1821      	adds	r1, r4, r0
 8006b38:	428b      	cmp	r3, r1
 8006b3a:	bf04      	itt	eq
 8006b3c:	6819      	ldreq	r1, [r3, #0]
 8006b3e:	685b      	ldreq	r3, [r3, #4]
 8006b40:	6063      	str	r3, [r4, #4]
 8006b42:	bf04      	itt	eq
 8006b44:	1809      	addeq	r1, r1, r0
 8006b46:	6021      	streq	r1, [r4, #0]
 8006b48:	6054      	str	r4, [r2, #4]
 8006b4a:	e7ca      	b.n	8006ae2 <_free_r+0x22>
 8006b4c:	bd38      	pop	{r3, r4, r5, pc}
 8006b4e:	bf00      	nop
 8006b50:	2000041c 	.word	0x2000041c

08006b54 <malloc>:
 8006b54:	4b02      	ldr	r3, [pc, #8]	@ (8006b60 <malloc+0xc>)
 8006b56:	4601      	mov	r1, r0
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	f000 b825 	b.w	8006ba8 <_malloc_r>
 8006b5e:	bf00      	nop
 8006b60:	20000018 	.word	0x20000018

08006b64 <sbrk_aligned>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4e0f      	ldr	r6, [pc, #60]	@ (8006ba4 <sbrk_aligned+0x40>)
 8006b68:	460c      	mov	r4, r1
 8006b6a:	6831      	ldr	r1, [r6, #0]
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	b911      	cbnz	r1, 8006b76 <sbrk_aligned+0x12>
 8006b70:	f001 fe0c 	bl	800878c <_sbrk_r>
 8006b74:	6030      	str	r0, [r6, #0]
 8006b76:	4621      	mov	r1, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f001 fe07 	bl	800878c <_sbrk_r>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d103      	bne.n	8006b8a <sbrk_aligned+0x26>
 8006b82:	f04f 34ff 	mov.w	r4, #4294967295
 8006b86:	4620      	mov	r0, r4
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	1cc4      	adds	r4, r0, #3
 8006b8c:	f024 0403 	bic.w	r4, r4, #3
 8006b90:	42a0      	cmp	r0, r4
 8006b92:	d0f8      	beq.n	8006b86 <sbrk_aligned+0x22>
 8006b94:	1a21      	subs	r1, r4, r0
 8006b96:	4628      	mov	r0, r5
 8006b98:	f001 fdf8 	bl	800878c <_sbrk_r>
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d1f2      	bne.n	8006b86 <sbrk_aligned+0x22>
 8006ba0:	e7ef      	b.n	8006b82 <sbrk_aligned+0x1e>
 8006ba2:	bf00      	nop
 8006ba4:	20000418 	.word	0x20000418

08006ba8 <_malloc_r>:
 8006ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bac:	1ccd      	adds	r5, r1, #3
 8006bae:	f025 0503 	bic.w	r5, r5, #3
 8006bb2:	3508      	adds	r5, #8
 8006bb4:	2d0c      	cmp	r5, #12
 8006bb6:	bf38      	it	cc
 8006bb8:	250c      	movcc	r5, #12
 8006bba:	2d00      	cmp	r5, #0
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	db01      	blt.n	8006bc4 <_malloc_r+0x1c>
 8006bc0:	42a9      	cmp	r1, r5
 8006bc2:	d904      	bls.n	8006bce <_malloc_r+0x26>
 8006bc4:	230c      	movs	r3, #12
 8006bc6:	6033      	str	r3, [r6, #0]
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ca4 <_malloc_r+0xfc>
 8006bd2:	f000 f869 	bl	8006ca8 <__malloc_lock>
 8006bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8006bda:	461c      	mov	r4, r3
 8006bdc:	bb44      	cbnz	r4, 8006c30 <_malloc_r+0x88>
 8006bde:	4629      	mov	r1, r5
 8006be0:	4630      	mov	r0, r6
 8006be2:	f7ff ffbf 	bl	8006b64 <sbrk_aligned>
 8006be6:	1c43      	adds	r3, r0, #1
 8006be8:	4604      	mov	r4, r0
 8006bea:	d158      	bne.n	8006c9e <_malloc_r+0xf6>
 8006bec:	f8d8 4000 	ldr.w	r4, [r8]
 8006bf0:	4627      	mov	r7, r4
 8006bf2:	2f00      	cmp	r7, #0
 8006bf4:	d143      	bne.n	8006c7e <_malloc_r+0xd6>
 8006bf6:	2c00      	cmp	r4, #0
 8006bf8:	d04b      	beq.n	8006c92 <_malloc_r+0xea>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	4630      	mov	r0, r6
 8006c00:	eb04 0903 	add.w	r9, r4, r3
 8006c04:	f001 fdc2 	bl	800878c <_sbrk_r>
 8006c08:	4581      	cmp	r9, r0
 8006c0a:	d142      	bne.n	8006c92 <_malloc_r+0xea>
 8006c0c:	6821      	ldr	r1, [r4, #0]
 8006c0e:	1a6d      	subs	r5, r5, r1
 8006c10:	4629      	mov	r1, r5
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7ff ffa6 	bl	8006b64 <sbrk_aligned>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d03a      	beq.n	8006c92 <_malloc_r+0xea>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	442b      	add	r3, r5
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	f8d8 3000 	ldr.w	r3, [r8]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	bb62      	cbnz	r2, 8006c84 <_malloc_r+0xdc>
 8006c2a:	f8c8 7000 	str.w	r7, [r8]
 8006c2e:	e00f      	b.n	8006c50 <_malloc_r+0xa8>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	1b52      	subs	r2, r2, r5
 8006c34:	d420      	bmi.n	8006c78 <_malloc_r+0xd0>
 8006c36:	2a0b      	cmp	r2, #11
 8006c38:	d917      	bls.n	8006c6a <_malloc_r+0xc2>
 8006c3a:	1961      	adds	r1, r4, r5
 8006c3c:	42a3      	cmp	r3, r4
 8006c3e:	6025      	str	r5, [r4, #0]
 8006c40:	bf18      	it	ne
 8006c42:	6059      	strne	r1, [r3, #4]
 8006c44:	6863      	ldr	r3, [r4, #4]
 8006c46:	bf08      	it	eq
 8006c48:	f8c8 1000 	streq.w	r1, [r8]
 8006c4c:	5162      	str	r2, [r4, r5]
 8006c4e:	604b      	str	r3, [r1, #4]
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 f82f 	bl	8006cb4 <__malloc_unlock>
 8006c56:	f104 000b 	add.w	r0, r4, #11
 8006c5a:	1d23      	adds	r3, r4, #4
 8006c5c:	f020 0007 	bic.w	r0, r0, #7
 8006c60:	1ac2      	subs	r2, r0, r3
 8006c62:	bf1c      	itt	ne
 8006c64:	1a1b      	subne	r3, r3, r0
 8006c66:	50a3      	strne	r3, [r4, r2]
 8006c68:	e7af      	b.n	8006bca <_malloc_r+0x22>
 8006c6a:	6862      	ldr	r2, [r4, #4]
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	bf0c      	ite	eq
 8006c70:	f8c8 2000 	streq.w	r2, [r8]
 8006c74:	605a      	strne	r2, [r3, #4]
 8006c76:	e7eb      	b.n	8006c50 <_malloc_r+0xa8>
 8006c78:	4623      	mov	r3, r4
 8006c7a:	6864      	ldr	r4, [r4, #4]
 8006c7c:	e7ae      	b.n	8006bdc <_malloc_r+0x34>
 8006c7e:	463c      	mov	r4, r7
 8006c80:	687f      	ldr	r7, [r7, #4]
 8006c82:	e7b6      	b.n	8006bf2 <_malloc_r+0x4a>
 8006c84:	461a      	mov	r2, r3
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	42a3      	cmp	r3, r4
 8006c8a:	d1fb      	bne.n	8006c84 <_malloc_r+0xdc>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	6053      	str	r3, [r2, #4]
 8006c90:	e7de      	b.n	8006c50 <_malloc_r+0xa8>
 8006c92:	230c      	movs	r3, #12
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 f80c 	bl	8006cb4 <__malloc_unlock>
 8006c9c:	e794      	b.n	8006bc8 <_malloc_r+0x20>
 8006c9e:	6005      	str	r5, [r0, #0]
 8006ca0:	e7d6      	b.n	8006c50 <_malloc_r+0xa8>
 8006ca2:	bf00      	nop
 8006ca4:	2000041c 	.word	0x2000041c

08006ca8 <__malloc_lock>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	@ (8006cb0 <__malloc_lock+0x8>)
 8006caa:	f7ff b8b2 	b.w	8005e12 <__retarget_lock_acquire_recursive>
 8006cae:	bf00      	nop
 8006cb0:	20000414 	.word	0x20000414

08006cb4 <__malloc_unlock>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	@ (8006cbc <__malloc_unlock+0x8>)
 8006cb6:	f7ff b8ad 	b.w	8005e14 <__retarget_lock_release_recursive>
 8006cba:	bf00      	nop
 8006cbc:	20000414 	.word	0x20000414

08006cc0 <_Balloc>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	69c6      	ldr	r6, [r0, #28]
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	460d      	mov	r5, r1
 8006cc8:	b976      	cbnz	r6, 8006ce8 <_Balloc+0x28>
 8006cca:	2010      	movs	r0, #16
 8006ccc:	f7ff ff42 	bl	8006b54 <malloc>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	61e0      	str	r0, [r4, #28]
 8006cd4:	b920      	cbnz	r0, 8006ce0 <_Balloc+0x20>
 8006cd6:	4b18      	ldr	r3, [pc, #96]	@ (8006d38 <_Balloc+0x78>)
 8006cd8:	4818      	ldr	r0, [pc, #96]	@ (8006d3c <_Balloc+0x7c>)
 8006cda:	216b      	movs	r1, #107	@ 0x6b
 8006cdc:	f001 fd7c 	bl	80087d8 <__assert_func>
 8006ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ce4:	6006      	str	r6, [r0, #0]
 8006ce6:	60c6      	str	r6, [r0, #12]
 8006ce8:	69e6      	ldr	r6, [r4, #28]
 8006cea:	68f3      	ldr	r3, [r6, #12]
 8006cec:	b183      	cbz	r3, 8006d10 <_Balloc+0x50>
 8006cee:	69e3      	ldr	r3, [r4, #28]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cf6:	b9b8      	cbnz	r0, 8006d28 <_Balloc+0x68>
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	fa01 f605 	lsl.w	r6, r1, r5
 8006cfe:	1d72      	adds	r2, r6, #5
 8006d00:	0092      	lsls	r2, r2, #2
 8006d02:	4620      	mov	r0, r4
 8006d04:	f001 fd86 	bl	8008814 <_calloc_r>
 8006d08:	b160      	cbz	r0, 8006d24 <_Balloc+0x64>
 8006d0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d0e:	e00e      	b.n	8006d2e <_Balloc+0x6e>
 8006d10:	2221      	movs	r2, #33	@ 0x21
 8006d12:	2104      	movs	r1, #4
 8006d14:	4620      	mov	r0, r4
 8006d16:	f001 fd7d 	bl	8008814 <_calloc_r>
 8006d1a:	69e3      	ldr	r3, [r4, #28]
 8006d1c:	60f0      	str	r0, [r6, #12]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e4      	bne.n	8006cee <_Balloc+0x2e>
 8006d24:	2000      	movs	r0, #0
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	6802      	ldr	r2, [r0, #0]
 8006d2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d34:	e7f7      	b.n	8006d26 <_Balloc+0x66>
 8006d36:	bf00      	nop
 8006d38:	0800959a 	.word	0x0800959a
 8006d3c:	0800961a 	.word	0x0800961a

08006d40 <_Bfree>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	69c6      	ldr	r6, [r0, #28]
 8006d44:	4605      	mov	r5, r0
 8006d46:	460c      	mov	r4, r1
 8006d48:	b976      	cbnz	r6, 8006d68 <_Bfree+0x28>
 8006d4a:	2010      	movs	r0, #16
 8006d4c:	f7ff ff02 	bl	8006b54 <malloc>
 8006d50:	4602      	mov	r2, r0
 8006d52:	61e8      	str	r0, [r5, #28]
 8006d54:	b920      	cbnz	r0, 8006d60 <_Bfree+0x20>
 8006d56:	4b09      	ldr	r3, [pc, #36]	@ (8006d7c <_Bfree+0x3c>)
 8006d58:	4809      	ldr	r0, [pc, #36]	@ (8006d80 <_Bfree+0x40>)
 8006d5a:	218f      	movs	r1, #143	@ 0x8f
 8006d5c:	f001 fd3c 	bl	80087d8 <__assert_func>
 8006d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d64:	6006      	str	r6, [r0, #0]
 8006d66:	60c6      	str	r6, [r0, #12]
 8006d68:	b13c      	cbz	r4, 8006d7a <_Bfree+0x3a>
 8006d6a:	69eb      	ldr	r3, [r5, #28]
 8006d6c:	6862      	ldr	r2, [r4, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d74:	6021      	str	r1, [r4, #0]
 8006d76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d7a:	bd70      	pop	{r4, r5, r6, pc}
 8006d7c:	0800959a 	.word	0x0800959a
 8006d80:	0800961a 	.word	0x0800961a

08006d84 <__multadd>:
 8006d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d88:	690d      	ldr	r5, [r1, #16]
 8006d8a:	4607      	mov	r7, r0
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	461e      	mov	r6, r3
 8006d90:	f101 0c14 	add.w	ip, r1, #20
 8006d94:	2000      	movs	r0, #0
 8006d96:	f8dc 3000 	ldr.w	r3, [ip]
 8006d9a:	b299      	uxth	r1, r3
 8006d9c:	fb02 6101 	mla	r1, r2, r1, r6
 8006da0:	0c1e      	lsrs	r6, r3, #16
 8006da2:	0c0b      	lsrs	r3, r1, #16
 8006da4:	fb02 3306 	mla	r3, r2, r6, r3
 8006da8:	b289      	uxth	r1, r1
 8006daa:	3001      	adds	r0, #1
 8006dac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006db0:	4285      	cmp	r5, r0
 8006db2:	f84c 1b04 	str.w	r1, [ip], #4
 8006db6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dba:	dcec      	bgt.n	8006d96 <__multadd+0x12>
 8006dbc:	b30e      	cbz	r6, 8006e02 <__multadd+0x7e>
 8006dbe:	68a3      	ldr	r3, [r4, #8]
 8006dc0:	42ab      	cmp	r3, r5
 8006dc2:	dc19      	bgt.n	8006df8 <__multadd+0x74>
 8006dc4:	6861      	ldr	r1, [r4, #4]
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	3101      	adds	r1, #1
 8006dca:	f7ff ff79 	bl	8006cc0 <_Balloc>
 8006dce:	4680      	mov	r8, r0
 8006dd0:	b928      	cbnz	r0, 8006dde <__multadd+0x5a>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e08 <__multadd+0x84>)
 8006dd6:	480d      	ldr	r0, [pc, #52]	@ (8006e0c <__multadd+0x88>)
 8006dd8:	21ba      	movs	r1, #186	@ 0xba
 8006dda:	f001 fcfd 	bl	80087d8 <__assert_func>
 8006dde:	6922      	ldr	r2, [r4, #16]
 8006de0:	3202      	adds	r2, #2
 8006de2:	f104 010c 	add.w	r1, r4, #12
 8006de6:	0092      	lsls	r2, r2, #2
 8006de8:	300c      	adds	r0, #12
 8006dea:	f001 fcdf 	bl	80087ac <memcpy>
 8006dee:	4621      	mov	r1, r4
 8006df0:	4638      	mov	r0, r7
 8006df2:	f7ff ffa5 	bl	8006d40 <_Bfree>
 8006df6:	4644      	mov	r4, r8
 8006df8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	615e      	str	r6, [r3, #20]
 8006e00:	6125      	str	r5, [r4, #16]
 8006e02:	4620      	mov	r0, r4
 8006e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e08:	08009609 	.word	0x08009609
 8006e0c:	0800961a 	.word	0x0800961a

08006e10 <__s2b>:
 8006e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e14:	460c      	mov	r4, r1
 8006e16:	4615      	mov	r5, r2
 8006e18:	461f      	mov	r7, r3
 8006e1a:	2209      	movs	r2, #9
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	4606      	mov	r6, r0
 8006e20:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e24:	2100      	movs	r1, #0
 8006e26:	2201      	movs	r2, #1
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	db09      	blt.n	8006e40 <__s2b+0x30>
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7ff ff47 	bl	8006cc0 <_Balloc>
 8006e32:	b940      	cbnz	r0, 8006e46 <__s2b+0x36>
 8006e34:	4602      	mov	r2, r0
 8006e36:	4b19      	ldr	r3, [pc, #100]	@ (8006e9c <__s2b+0x8c>)
 8006e38:	4819      	ldr	r0, [pc, #100]	@ (8006ea0 <__s2b+0x90>)
 8006e3a:	21d3      	movs	r1, #211	@ 0xd3
 8006e3c:	f001 fccc 	bl	80087d8 <__assert_func>
 8006e40:	0052      	lsls	r2, r2, #1
 8006e42:	3101      	adds	r1, #1
 8006e44:	e7f0      	b.n	8006e28 <__s2b+0x18>
 8006e46:	9b08      	ldr	r3, [sp, #32]
 8006e48:	6143      	str	r3, [r0, #20]
 8006e4a:	2d09      	cmp	r5, #9
 8006e4c:	f04f 0301 	mov.w	r3, #1
 8006e50:	6103      	str	r3, [r0, #16]
 8006e52:	dd16      	ble.n	8006e82 <__s2b+0x72>
 8006e54:	f104 0909 	add.w	r9, r4, #9
 8006e58:	46c8      	mov	r8, r9
 8006e5a:	442c      	add	r4, r5
 8006e5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e60:	4601      	mov	r1, r0
 8006e62:	3b30      	subs	r3, #48	@ 0x30
 8006e64:	220a      	movs	r2, #10
 8006e66:	4630      	mov	r0, r6
 8006e68:	f7ff ff8c 	bl	8006d84 <__multadd>
 8006e6c:	45a0      	cmp	r8, r4
 8006e6e:	d1f5      	bne.n	8006e5c <__s2b+0x4c>
 8006e70:	f1a5 0408 	sub.w	r4, r5, #8
 8006e74:	444c      	add	r4, r9
 8006e76:	1b2d      	subs	r5, r5, r4
 8006e78:	1963      	adds	r3, r4, r5
 8006e7a:	42bb      	cmp	r3, r7
 8006e7c:	db04      	blt.n	8006e88 <__s2b+0x78>
 8006e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e82:	340a      	adds	r4, #10
 8006e84:	2509      	movs	r5, #9
 8006e86:	e7f6      	b.n	8006e76 <__s2b+0x66>
 8006e88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e8c:	4601      	mov	r1, r0
 8006e8e:	3b30      	subs	r3, #48	@ 0x30
 8006e90:	220a      	movs	r2, #10
 8006e92:	4630      	mov	r0, r6
 8006e94:	f7ff ff76 	bl	8006d84 <__multadd>
 8006e98:	e7ee      	b.n	8006e78 <__s2b+0x68>
 8006e9a:	bf00      	nop
 8006e9c:	08009609 	.word	0x08009609
 8006ea0:	0800961a 	.word	0x0800961a

08006ea4 <__hi0bits>:
 8006ea4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	bf36      	itet	cc
 8006eac:	0403      	lslcc	r3, r0, #16
 8006eae:	2000      	movcs	r0, #0
 8006eb0:	2010      	movcc	r0, #16
 8006eb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eb6:	bf3c      	itt	cc
 8006eb8:	021b      	lslcc	r3, r3, #8
 8006eba:	3008      	addcc	r0, #8
 8006ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ec0:	bf3c      	itt	cc
 8006ec2:	011b      	lslcc	r3, r3, #4
 8006ec4:	3004      	addcc	r0, #4
 8006ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eca:	bf3c      	itt	cc
 8006ecc:	009b      	lslcc	r3, r3, #2
 8006ece:	3002      	addcc	r0, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	db05      	blt.n	8006ee0 <__hi0bits+0x3c>
 8006ed4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ed8:	f100 0001 	add.w	r0, r0, #1
 8006edc:	bf08      	it	eq
 8006ede:	2020      	moveq	r0, #32
 8006ee0:	4770      	bx	lr

08006ee2 <__lo0bits>:
 8006ee2:	6803      	ldr	r3, [r0, #0]
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	f013 0007 	ands.w	r0, r3, #7
 8006eea:	d00b      	beq.n	8006f04 <__lo0bits+0x22>
 8006eec:	07d9      	lsls	r1, r3, #31
 8006eee:	d421      	bmi.n	8006f34 <__lo0bits+0x52>
 8006ef0:	0798      	lsls	r0, r3, #30
 8006ef2:	bf49      	itett	mi
 8006ef4:	085b      	lsrmi	r3, r3, #1
 8006ef6:	089b      	lsrpl	r3, r3, #2
 8006ef8:	2001      	movmi	r0, #1
 8006efa:	6013      	strmi	r3, [r2, #0]
 8006efc:	bf5c      	itt	pl
 8006efe:	6013      	strpl	r3, [r2, #0]
 8006f00:	2002      	movpl	r0, #2
 8006f02:	4770      	bx	lr
 8006f04:	b299      	uxth	r1, r3
 8006f06:	b909      	cbnz	r1, 8006f0c <__lo0bits+0x2a>
 8006f08:	0c1b      	lsrs	r3, r3, #16
 8006f0a:	2010      	movs	r0, #16
 8006f0c:	b2d9      	uxtb	r1, r3
 8006f0e:	b909      	cbnz	r1, 8006f14 <__lo0bits+0x32>
 8006f10:	3008      	adds	r0, #8
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	0719      	lsls	r1, r3, #28
 8006f16:	bf04      	itt	eq
 8006f18:	091b      	lsreq	r3, r3, #4
 8006f1a:	3004      	addeq	r0, #4
 8006f1c:	0799      	lsls	r1, r3, #30
 8006f1e:	bf04      	itt	eq
 8006f20:	089b      	lsreq	r3, r3, #2
 8006f22:	3002      	addeq	r0, #2
 8006f24:	07d9      	lsls	r1, r3, #31
 8006f26:	d403      	bmi.n	8006f30 <__lo0bits+0x4e>
 8006f28:	085b      	lsrs	r3, r3, #1
 8006f2a:	f100 0001 	add.w	r0, r0, #1
 8006f2e:	d003      	beq.n	8006f38 <__lo0bits+0x56>
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	4770      	bx	lr
 8006f34:	2000      	movs	r0, #0
 8006f36:	4770      	bx	lr
 8006f38:	2020      	movs	r0, #32
 8006f3a:	4770      	bx	lr

08006f3c <__i2b>:
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	460c      	mov	r4, r1
 8006f40:	2101      	movs	r1, #1
 8006f42:	f7ff febd 	bl	8006cc0 <_Balloc>
 8006f46:	4602      	mov	r2, r0
 8006f48:	b928      	cbnz	r0, 8006f56 <__i2b+0x1a>
 8006f4a:	4b05      	ldr	r3, [pc, #20]	@ (8006f60 <__i2b+0x24>)
 8006f4c:	4805      	ldr	r0, [pc, #20]	@ (8006f64 <__i2b+0x28>)
 8006f4e:	f240 1145 	movw	r1, #325	@ 0x145
 8006f52:	f001 fc41 	bl	80087d8 <__assert_func>
 8006f56:	2301      	movs	r3, #1
 8006f58:	6144      	str	r4, [r0, #20]
 8006f5a:	6103      	str	r3, [r0, #16]
 8006f5c:	bd10      	pop	{r4, pc}
 8006f5e:	bf00      	nop
 8006f60:	08009609 	.word	0x08009609
 8006f64:	0800961a 	.word	0x0800961a

08006f68 <__multiply>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	690a      	ldr	r2, [r1, #16]
 8006f70:	6923      	ldr	r3, [r4, #16]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	bfa8      	it	ge
 8006f76:	4623      	movge	r3, r4
 8006f78:	460f      	mov	r7, r1
 8006f7a:	bfa4      	itt	ge
 8006f7c:	460c      	movge	r4, r1
 8006f7e:	461f      	movge	r7, r3
 8006f80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006f88:	68a3      	ldr	r3, [r4, #8]
 8006f8a:	6861      	ldr	r1, [r4, #4]
 8006f8c:	eb0a 0609 	add.w	r6, sl, r9
 8006f90:	42b3      	cmp	r3, r6
 8006f92:	b085      	sub	sp, #20
 8006f94:	bfb8      	it	lt
 8006f96:	3101      	addlt	r1, #1
 8006f98:	f7ff fe92 	bl	8006cc0 <_Balloc>
 8006f9c:	b930      	cbnz	r0, 8006fac <__multiply+0x44>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	4b44      	ldr	r3, [pc, #272]	@ (80070b4 <__multiply+0x14c>)
 8006fa2:	4845      	ldr	r0, [pc, #276]	@ (80070b8 <__multiply+0x150>)
 8006fa4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006fa8:	f001 fc16 	bl	80087d8 <__assert_func>
 8006fac:	f100 0514 	add.w	r5, r0, #20
 8006fb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fb4:	462b      	mov	r3, r5
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4543      	cmp	r3, r8
 8006fba:	d321      	bcc.n	8007000 <__multiply+0x98>
 8006fbc:	f107 0114 	add.w	r1, r7, #20
 8006fc0:	f104 0214 	add.w	r2, r4, #20
 8006fc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006fc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006fcc:	9302      	str	r3, [sp, #8]
 8006fce:	1b13      	subs	r3, r2, r4
 8006fd0:	3b15      	subs	r3, #21
 8006fd2:	f023 0303 	bic.w	r3, r3, #3
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	f104 0715 	add.w	r7, r4, #21
 8006fdc:	42ba      	cmp	r2, r7
 8006fde:	bf38      	it	cc
 8006fe0:	2304      	movcc	r3, #4
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	9103      	str	r1, [sp, #12]
 8006fe8:	428b      	cmp	r3, r1
 8006fea:	d80c      	bhi.n	8007006 <__multiply+0x9e>
 8006fec:	2e00      	cmp	r6, #0
 8006fee:	dd03      	ble.n	8006ff8 <__multiply+0x90>
 8006ff0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d05b      	beq.n	80070b0 <__multiply+0x148>
 8006ff8:	6106      	str	r6, [r0, #16]
 8006ffa:	b005      	add	sp, #20
 8006ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007000:	f843 2b04 	str.w	r2, [r3], #4
 8007004:	e7d8      	b.n	8006fb8 <__multiply+0x50>
 8007006:	f8b1 a000 	ldrh.w	sl, [r1]
 800700a:	f1ba 0f00 	cmp.w	sl, #0
 800700e:	d024      	beq.n	800705a <__multiply+0xf2>
 8007010:	f104 0e14 	add.w	lr, r4, #20
 8007014:	46a9      	mov	r9, r5
 8007016:	f04f 0c00 	mov.w	ip, #0
 800701a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800701e:	f8d9 3000 	ldr.w	r3, [r9]
 8007022:	fa1f fb87 	uxth.w	fp, r7
 8007026:	b29b      	uxth	r3, r3
 8007028:	fb0a 330b 	mla	r3, sl, fp, r3
 800702c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007030:	f8d9 7000 	ldr.w	r7, [r9]
 8007034:	4463      	add	r3, ip
 8007036:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800703a:	fb0a c70b 	mla	r7, sl, fp, ip
 800703e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007042:	b29b      	uxth	r3, r3
 8007044:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007048:	4572      	cmp	r2, lr
 800704a:	f849 3b04 	str.w	r3, [r9], #4
 800704e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007052:	d8e2      	bhi.n	800701a <__multiply+0xb2>
 8007054:	9b01      	ldr	r3, [sp, #4]
 8007056:	f845 c003 	str.w	ip, [r5, r3]
 800705a:	9b03      	ldr	r3, [sp, #12]
 800705c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007060:	3104      	adds	r1, #4
 8007062:	f1b9 0f00 	cmp.w	r9, #0
 8007066:	d021      	beq.n	80070ac <__multiply+0x144>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	f104 0c14 	add.w	ip, r4, #20
 800706e:	46ae      	mov	lr, r5
 8007070:	f04f 0a00 	mov.w	sl, #0
 8007074:	f8bc b000 	ldrh.w	fp, [ip]
 8007078:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800707c:	fb09 770b 	mla	r7, r9, fp, r7
 8007080:	4457      	add	r7, sl
 8007082:	b29b      	uxth	r3, r3
 8007084:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007088:	f84e 3b04 	str.w	r3, [lr], #4
 800708c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007090:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007094:	f8be 3000 	ldrh.w	r3, [lr]
 8007098:	fb09 330a 	mla	r3, r9, sl, r3
 800709c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80070a0:	4562      	cmp	r2, ip
 80070a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070a6:	d8e5      	bhi.n	8007074 <__multiply+0x10c>
 80070a8:	9f01      	ldr	r7, [sp, #4]
 80070aa:	51eb      	str	r3, [r5, r7]
 80070ac:	3504      	adds	r5, #4
 80070ae:	e799      	b.n	8006fe4 <__multiply+0x7c>
 80070b0:	3e01      	subs	r6, #1
 80070b2:	e79b      	b.n	8006fec <__multiply+0x84>
 80070b4:	08009609 	.word	0x08009609
 80070b8:	0800961a 	.word	0x0800961a

080070bc <__pow5mult>:
 80070bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c0:	4615      	mov	r5, r2
 80070c2:	f012 0203 	ands.w	r2, r2, #3
 80070c6:	4607      	mov	r7, r0
 80070c8:	460e      	mov	r6, r1
 80070ca:	d007      	beq.n	80070dc <__pow5mult+0x20>
 80070cc:	4c25      	ldr	r4, [pc, #148]	@ (8007164 <__pow5mult+0xa8>)
 80070ce:	3a01      	subs	r2, #1
 80070d0:	2300      	movs	r3, #0
 80070d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070d6:	f7ff fe55 	bl	8006d84 <__multadd>
 80070da:	4606      	mov	r6, r0
 80070dc:	10ad      	asrs	r5, r5, #2
 80070de:	d03d      	beq.n	800715c <__pow5mult+0xa0>
 80070e0:	69fc      	ldr	r4, [r7, #28]
 80070e2:	b97c      	cbnz	r4, 8007104 <__pow5mult+0x48>
 80070e4:	2010      	movs	r0, #16
 80070e6:	f7ff fd35 	bl	8006b54 <malloc>
 80070ea:	4602      	mov	r2, r0
 80070ec:	61f8      	str	r0, [r7, #28]
 80070ee:	b928      	cbnz	r0, 80070fc <__pow5mult+0x40>
 80070f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007168 <__pow5mult+0xac>)
 80070f2:	481e      	ldr	r0, [pc, #120]	@ (800716c <__pow5mult+0xb0>)
 80070f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80070f8:	f001 fb6e 	bl	80087d8 <__assert_func>
 80070fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007100:	6004      	str	r4, [r0, #0]
 8007102:	60c4      	str	r4, [r0, #12]
 8007104:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800710c:	b94c      	cbnz	r4, 8007122 <__pow5mult+0x66>
 800710e:	f240 2171 	movw	r1, #625	@ 0x271
 8007112:	4638      	mov	r0, r7
 8007114:	f7ff ff12 	bl	8006f3c <__i2b>
 8007118:	2300      	movs	r3, #0
 800711a:	f8c8 0008 	str.w	r0, [r8, #8]
 800711e:	4604      	mov	r4, r0
 8007120:	6003      	str	r3, [r0, #0]
 8007122:	f04f 0900 	mov.w	r9, #0
 8007126:	07eb      	lsls	r3, r5, #31
 8007128:	d50a      	bpl.n	8007140 <__pow5mult+0x84>
 800712a:	4631      	mov	r1, r6
 800712c:	4622      	mov	r2, r4
 800712e:	4638      	mov	r0, r7
 8007130:	f7ff ff1a 	bl	8006f68 <__multiply>
 8007134:	4631      	mov	r1, r6
 8007136:	4680      	mov	r8, r0
 8007138:	4638      	mov	r0, r7
 800713a:	f7ff fe01 	bl	8006d40 <_Bfree>
 800713e:	4646      	mov	r6, r8
 8007140:	106d      	asrs	r5, r5, #1
 8007142:	d00b      	beq.n	800715c <__pow5mult+0xa0>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	b938      	cbnz	r0, 8007158 <__pow5mult+0x9c>
 8007148:	4622      	mov	r2, r4
 800714a:	4621      	mov	r1, r4
 800714c:	4638      	mov	r0, r7
 800714e:	f7ff ff0b 	bl	8006f68 <__multiply>
 8007152:	6020      	str	r0, [r4, #0]
 8007154:	f8c0 9000 	str.w	r9, [r0]
 8007158:	4604      	mov	r4, r0
 800715a:	e7e4      	b.n	8007126 <__pow5mult+0x6a>
 800715c:	4630      	mov	r0, r6
 800715e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007162:	bf00      	nop
 8007164:	08009674 	.word	0x08009674
 8007168:	0800959a 	.word	0x0800959a
 800716c:	0800961a 	.word	0x0800961a

08007170 <__lshift>:
 8007170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007174:	460c      	mov	r4, r1
 8007176:	6849      	ldr	r1, [r1, #4]
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800717e:	68a3      	ldr	r3, [r4, #8]
 8007180:	4607      	mov	r7, r0
 8007182:	4691      	mov	r9, r2
 8007184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007188:	f108 0601 	add.w	r6, r8, #1
 800718c:	42b3      	cmp	r3, r6
 800718e:	db0b      	blt.n	80071a8 <__lshift+0x38>
 8007190:	4638      	mov	r0, r7
 8007192:	f7ff fd95 	bl	8006cc0 <_Balloc>
 8007196:	4605      	mov	r5, r0
 8007198:	b948      	cbnz	r0, 80071ae <__lshift+0x3e>
 800719a:	4602      	mov	r2, r0
 800719c:	4b28      	ldr	r3, [pc, #160]	@ (8007240 <__lshift+0xd0>)
 800719e:	4829      	ldr	r0, [pc, #164]	@ (8007244 <__lshift+0xd4>)
 80071a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80071a4:	f001 fb18 	bl	80087d8 <__assert_func>
 80071a8:	3101      	adds	r1, #1
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	e7ee      	b.n	800718c <__lshift+0x1c>
 80071ae:	2300      	movs	r3, #0
 80071b0:	f100 0114 	add.w	r1, r0, #20
 80071b4:	f100 0210 	add.w	r2, r0, #16
 80071b8:	4618      	mov	r0, r3
 80071ba:	4553      	cmp	r3, sl
 80071bc:	db33      	blt.n	8007226 <__lshift+0xb6>
 80071be:	6920      	ldr	r0, [r4, #16]
 80071c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071c4:	f104 0314 	add.w	r3, r4, #20
 80071c8:	f019 091f 	ands.w	r9, r9, #31
 80071cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071d4:	d02b      	beq.n	800722e <__lshift+0xbe>
 80071d6:	f1c9 0e20 	rsb	lr, r9, #32
 80071da:	468a      	mov	sl, r1
 80071dc:	2200      	movs	r2, #0
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	fa00 f009 	lsl.w	r0, r0, r9
 80071e4:	4310      	orrs	r0, r2
 80071e6:	f84a 0b04 	str.w	r0, [sl], #4
 80071ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ee:	459c      	cmp	ip, r3
 80071f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80071f4:	d8f3      	bhi.n	80071de <__lshift+0x6e>
 80071f6:	ebac 0304 	sub.w	r3, ip, r4
 80071fa:	3b15      	subs	r3, #21
 80071fc:	f023 0303 	bic.w	r3, r3, #3
 8007200:	3304      	adds	r3, #4
 8007202:	f104 0015 	add.w	r0, r4, #21
 8007206:	4584      	cmp	ip, r0
 8007208:	bf38      	it	cc
 800720a:	2304      	movcc	r3, #4
 800720c:	50ca      	str	r2, [r1, r3]
 800720e:	b10a      	cbz	r2, 8007214 <__lshift+0xa4>
 8007210:	f108 0602 	add.w	r6, r8, #2
 8007214:	3e01      	subs	r6, #1
 8007216:	4638      	mov	r0, r7
 8007218:	612e      	str	r6, [r5, #16]
 800721a:	4621      	mov	r1, r4
 800721c:	f7ff fd90 	bl	8006d40 <_Bfree>
 8007220:	4628      	mov	r0, r5
 8007222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007226:	f842 0f04 	str.w	r0, [r2, #4]!
 800722a:	3301      	adds	r3, #1
 800722c:	e7c5      	b.n	80071ba <__lshift+0x4a>
 800722e:	3904      	subs	r1, #4
 8007230:	f853 2b04 	ldr.w	r2, [r3], #4
 8007234:	f841 2f04 	str.w	r2, [r1, #4]!
 8007238:	459c      	cmp	ip, r3
 800723a:	d8f9      	bhi.n	8007230 <__lshift+0xc0>
 800723c:	e7ea      	b.n	8007214 <__lshift+0xa4>
 800723e:	bf00      	nop
 8007240:	08009609 	.word	0x08009609
 8007244:	0800961a 	.word	0x0800961a

08007248 <__mcmp>:
 8007248:	690a      	ldr	r2, [r1, #16]
 800724a:	4603      	mov	r3, r0
 800724c:	6900      	ldr	r0, [r0, #16]
 800724e:	1a80      	subs	r0, r0, r2
 8007250:	b530      	push	{r4, r5, lr}
 8007252:	d10e      	bne.n	8007272 <__mcmp+0x2a>
 8007254:	3314      	adds	r3, #20
 8007256:	3114      	adds	r1, #20
 8007258:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800725c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007260:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007264:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007268:	4295      	cmp	r5, r2
 800726a:	d003      	beq.n	8007274 <__mcmp+0x2c>
 800726c:	d205      	bcs.n	800727a <__mcmp+0x32>
 800726e:	f04f 30ff 	mov.w	r0, #4294967295
 8007272:	bd30      	pop	{r4, r5, pc}
 8007274:	42a3      	cmp	r3, r4
 8007276:	d3f3      	bcc.n	8007260 <__mcmp+0x18>
 8007278:	e7fb      	b.n	8007272 <__mcmp+0x2a>
 800727a:	2001      	movs	r0, #1
 800727c:	e7f9      	b.n	8007272 <__mcmp+0x2a>
	...

08007280 <__mdiff>:
 8007280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	4689      	mov	r9, r1
 8007286:	4606      	mov	r6, r0
 8007288:	4611      	mov	r1, r2
 800728a:	4648      	mov	r0, r9
 800728c:	4614      	mov	r4, r2
 800728e:	f7ff ffdb 	bl	8007248 <__mcmp>
 8007292:	1e05      	subs	r5, r0, #0
 8007294:	d112      	bne.n	80072bc <__mdiff+0x3c>
 8007296:	4629      	mov	r1, r5
 8007298:	4630      	mov	r0, r6
 800729a:	f7ff fd11 	bl	8006cc0 <_Balloc>
 800729e:	4602      	mov	r2, r0
 80072a0:	b928      	cbnz	r0, 80072ae <__mdiff+0x2e>
 80072a2:	4b3f      	ldr	r3, [pc, #252]	@ (80073a0 <__mdiff+0x120>)
 80072a4:	f240 2137 	movw	r1, #567	@ 0x237
 80072a8:	483e      	ldr	r0, [pc, #248]	@ (80073a4 <__mdiff+0x124>)
 80072aa:	f001 fa95 	bl	80087d8 <__assert_func>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072b4:	4610      	mov	r0, r2
 80072b6:	b003      	add	sp, #12
 80072b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072bc:	bfbc      	itt	lt
 80072be:	464b      	movlt	r3, r9
 80072c0:	46a1      	movlt	r9, r4
 80072c2:	4630      	mov	r0, r6
 80072c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80072c8:	bfba      	itte	lt
 80072ca:	461c      	movlt	r4, r3
 80072cc:	2501      	movlt	r5, #1
 80072ce:	2500      	movge	r5, #0
 80072d0:	f7ff fcf6 	bl	8006cc0 <_Balloc>
 80072d4:	4602      	mov	r2, r0
 80072d6:	b918      	cbnz	r0, 80072e0 <__mdiff+0x60>
 80072d8:	4b31      	ldr	r3, [pc, #196]	@ (80073a0 <__mdiff+0x120>)
 80072da:	f240 2145 	movw	r1, #581	@ 0x245
 80072de:	e7e3      	b.n	80072a8 <__mdiff+0x28>
 80072e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80072e4:	6926      	ldr	r6, [r4, #16]
 80072e6:	60c5      	str	r5, [r0, #12]
 80072e8:	f109 0310 	add.w	r3, r9, #16
 80072ec:	f109 0514 	add.w	r5, r9, #20
 80072f0:	f104 0e14 	add.w	lr, r4, #20
 80072f4:	f100 0b14 	add.w	fp, r0, #20
 80072f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80072fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	46d9      	mov	r9, fp
 8007304:	f04f 0c00 	mov.w	ip, #0
 8007308:	9b01      	ldr	r3, [sp, #4]
 800730a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800730e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	fa1f f38a 	uxth.w	r3, sl
 8007318:	4619      	mov	r1, r3
 800731a:	b283      	uxth	r3, r0
 800731c:	1acb      	subs	r3, r1, r3
 800731e:	0c00      	lsrs	r0, r0, #16
 8007320:	4463      	add	r3, ip
 8007322:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007326:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800732a:	b29b      	uxth	r3, r3
 800732c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007330:	4576      	cmp	r6, lr
 8007332:	f849 3b04 	str.w	r3, [r9], #4
 8007336:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800733a:	d8e5      	bhi.n	8007308 <__mdiff+0x88>
 800733c:	1b33      	subs	r3, r6, r4
 800733e:	3b15      	subs	r3, #21
 8007340:	f023 0303 	bic.w	r3, r3, #3
 8007344:	3415      	adds	r4, #21
 8007346:	3304      	adds	r3, #4
 8007348:	42a6      	cmp	r6, r4
 800734a:	bf38      	it	cc
 800734c:	2304      	movcc	r3, #4
 800734e:	441d      	add	r5, r3
 8007350:	445b      	add	r3, fp
 8007352:	461e      	mov	r6, r3
 8007354:	462c      	mov	r4, r5
 8007356:	4544      	cmp	r4, r8
 8007358:	d30e      	bcc.n	8007378 <__mdiff+0xf8>
 800735a:	f108 0103 	add.w	r1, r8, #3
 800735e:	1b49      	subs	r1, r1, r5
 8007360:	f021 0103 	bic.w	r1, r1, #3
 8007364:	3d03      	subs	r5, #3
 8007366:	45a8      	cmp	r8, r5
 8007368:	bf38      	it	cc
 800736a:	2100      	movcc	r1, #0
 800736c:	440b      	add	r3, r1
 800736e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007372:	b191      	cbz	r1, 800739a <__mdiff+0x11a>
 8007374:	6117      	str	r7, [r2, #16]
 8007376:	e79d      	b.n	80072b4 <__mdiff+0x34>
 8007378:	f854 1b04 	ldr.w	r1, [r4], #4
 800737c:	46e6      	mov	lr, ip
 800737e:	0c08      	lsrs	r0, r1, #16
 8007380:	fa1c fc81 	uxtah	ip, ip, r1
 8007384:	4471      	add	r1, lr
 8007386:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800738a:	b289      	uxth	r1, r1
 800738c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007390:	f846 1b04 	str.w	r1, [r6], #4
 8007394:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007398:	e7dd      	b.n	8007356 <__mdiff+0xd6>
 800739a:	3f01      	subs	r7, #1
 800739c:	e7e7      	b.n	800736e <__mdiff+0xee>
 800739e:	bf00      	nop
 80073a0:	08009609 	.word	0x08009609
 80073a4:	0800961a 	.word	0x0800961a

080073a8 <__ulp>:
 80073a8:	b082      	sub	sp, #8
 80073aa:	ed8d 0b00 	vstr	d0, [sp]
 80073ae:	9a01      	ldr	r2, [sp, #4]
 80073b0:	4b0f      	ldr	r3, [pc, #60]	@ (80073f0 <__ulp+0x48>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	dc08      	bgt.n	80073ce <__ulp+0x26>
 80073bc:	425b      	negs	r3, r3
 80073be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80073c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80073c6:	da04      	bge.n	80073d2 <__ulp+0x2a>
 80073c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80073cc:	4113      	asrs	r3, r2
 80073ce:	2200      	movs	r2, #0
 80073d0:	e008      	b.n	80073e4 <__ulp+0x3c>
 80073d2:	f1a2 0314 	sub.w	r3, r2, #20
 80073d6:	2b1e      	cmp	r3, #30
 80073d8:	bfda      	itte	le
 80073da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80073de:	40da      	lsrle	r2, r3
 80073e0:	2201      	movgt	r2, #1
 80073e2:	2300      	movs	r3, #0
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	ec41 0b10 	vmov	d0, r0, r1
 80073ec:	b002      	add	sp, #8
 80073ee:	4770      	bx	lr
 80073f0:	7ff00000 	.word	0x7ff00000

080073f4 <__b2d>:
 80073f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f8:	6906      	ldr	r6, [r0, #16]
 80073fa:	f100 0814 	add.w	r8, r0, #20
 80073fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007402:	1f37      	subs	r7, r6, #4
 8007404:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007408:	4610      	mov	r0, r2
 800740a:	f7ff fd4b 	bl	8006ea4 <__hi0bits>
 800740e:	f1c0 0320 	rsb	r3, r0, #32
 8007412:	280a      	cmp	r0, #10
 8007414:	600b      	str	r3, [r1, #0]
 8007416:	491b      	ldr	r1, [pc, #108]	@ (8007484 <__b2d+0x90>)
 8007418:	dc15      	bgt.n	8007446 <__b2d+0x52>
 800741a:	f1c0 0c0b 	rsb	ip, r0, #11
 800741e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007422:	45b8      	cmp	r8, r7
 8007424:	ea43 0501 	orr.w	r5, r3, r1
 8007428:	bf34      	ite	cc
 800742a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800742e:	2300      	movcs	r3, #0
 8007430:	3015      	adds	r0, #21
 8007432:	fa02 f000 	lsl.w	r0, r2, r0
 8007436:	fa23 f30c 	lsr.w	r3, r3, ip
 800743a:	4303      	orrs	r3, r0
 800743c:	461c      	mov	r4, r3
 800743e:	ec45 4b10 	vmov	d0, r4, r5
 8007442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007446:	45b8      	cmp	r8, r7
 8007448:	bf3a      	itte	cc
 800744a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800744e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007452:	2300      	movcs	r3, #0
 8007454:	380b      	subs	r0, #11
 8007456:	d012      	beq.n	800747e <__b2d+0x8a>
 8007458:	f1c0 0120 	rsb	r1, r0, #32
 800745c:	fa23 f401 	lsr.w	r4, r3, r1
 8007460:	4082      	lsls	r2, r0
 8007462:	4322      	orrs	r2, r4
 8007464:	4547      	cmp	r7, r8
 8007466:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800746a:	bf8c      	ite	hi
 800746c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007470:	2200      	movls	r2, #0
 8007472:	4083      	lsls	r3, r0
 8007474:	40ca      	lsrs	r2, r1
 8007476:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800747a:	4313      	orrs	r3, r2
 800747c:	e7de      	b.n	800743c <__b2d+0x48>
 800747e:	ea42 0501 	orr.w	r5, r2, r1
 8007482:	e7db      	b.n	800743c <__b2d+0x48>
 8007484:	3ff00000 	.word	0x3ff00000

08007488 <__d2b>:
 8007488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800748c:	460f      	mov	r7, r1
 800748e:	2101      	movs	r1, #1
 8007490:	ec59 8b10 	vmov	r8, r9, d0
 8007494:	4616      	mov	r6, r2
 8007496:	f7ff fc13 	bl	8006cc0 <_Balloc>
 800749a:	4604      	mov	r4, r0
 800749c:	b930      	cbnz	r0, 80074ac <__d2b+0x24>
 800749e:	4602      	mov	r2, r0
 80074a0:	4b23      	ldr	r3, [pc, #140]	@ (8007530 <__d2b+0xa8>)
 80074a2:	4824      	ldr	r0, [pc, #144]	@ (8007534 <__d2b+0xac>)
 80074a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80074a8:	f001 f996 	bl	80087d8 <__assert_func>
 80074ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80074b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074b4:	b10d      	cbz	r5, 80074ba <__d2b+0x32>
 80074b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	f1b8 0300 	subs.w	r3, r8, #0
 80074c0:	d023      	beq.n	800750a <__d2b+0x82>
 80074c2:	4668      	mov	r0, sp
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	f7ff fd0c 	bl	8006ee2 <__lo0bits>
 80074ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80074ce:	b1d0      	cbz	r0, 8007506 <__d2b+0x7e>
 80074d0:	f1c0 0320 	rsb	r3, r0, #32
 80074d4:	fa02 f303 	lsl.w	r3, r2, r3
 80074d8:	430b      	orrs	r3, r1
 80074da:	40c2      	lsrs	r2, r0
 80074dc:	6163      	str	r3, [r4, #20]
 80074de:	9201      	str	r2, [sp, #4]
 80074e0:	9b01      	ldr	r3, [sp, #4]
 80074e2:	61a3      	str	r3, [r4, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	bf0c      	ite	eq
 80074e8:	2201      	moveq	r2, #1
 80074ea:	2202      	movne	r2, #2
 80074ec:	6122      	str	r2, [r4, #16]
 80074ee:	b1a5      	cbz	r5, 800751a <__d2b+0x92>
 80074f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80074f4:	4405      	add	r5, r0
 80074f6:	603d      	str	r5, [r7, #0]
 80074f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80074fc:	6030      	str	r0, [r6, #0]
 80074fe:	4620      	mov	r0, r4
 8007500:	b003      	add	sp, #12
 8007502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007506:	6161      	str	r1, [r4, #20]
 8007508:	e7ea      	b.n	80074e0 <__d2b+0x58>
 800750a:	a801      	add	r0, sp, #4
 800750c:	f7ff fce9 	bl	8006ee2 <__lo0bits>
 8007510:	9b01      	ldr	r3, [sp, #4]
 8007512:	6163      	str	r3, [r4, #20]
 8007514:	3020      	adds	r0, #32
 8007516:	2201      	movs	r2, #1
 8007518:	e7e8      	b.n	80074ec <__d2b+0x64>
 800751a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800751e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007522:	6038      	str	r0, [r7, #0]
 8007524:	6918      	ldr	r0, [r3, #16]
 8007526:	f7ff fcbd 	bl	8006ea4 <__hi0bits>
 800752a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800752e:	e7e5      	b.n	80074fc <__d2b+0x74>
 8007530:	08009609 	.word	0x08009609
 8007534:	0800961a 	.word	0x0800961a

08007538 <__ratio>:
 8007538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	b085      	sub	sp, #20
 800753e:	e9cd 1000 	strd	r1, r0, [sp]
 8007542:	a902      	add	r1, sp, #8
 8007544:	f7ff ff56 	bl	80073f4 <__b2d>
 8007548:	9800      	ldr	r0, [sp, #0]
 800754a:	a903      	add	r1, sp, #12
 800754c:	ec55 4b10 	vmov	r4, r5, d0
 8007550:	f7ff ff50 	bl	80073f4 <__b2d>
 8007554:	9b01      	ldr	r3, [sp, #4]
 8007556:	6919      	ldr	r1, [r3, #16]
 8007558:	9b00      	ldr	r3, [sp, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	1ac9      	subs	r1, r1, r3
 800755e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	ec5b ab10 	vmov	sl, fp, d0
 8007568:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800756c:	2b00      	cmp	r3, #0
 800756e:	bfce      	itee	gt
 8007570:	462a      	movgt	r2, r5
 8007572:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007576:	465a      	movle	r2, fp
 8007578:	462f      	mov	r7, r5
 800757a:	46d9      	mov	r9, fp
 800757c:	bfcc      	ite	gt
 800757e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007582:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007586:	464b      	mov	r3, r9
 8007588:	4652      	mov	r2, sl
 800758a:	4620      	mov	r0, r4
 800758c:	4639      	mov	r1, r7
 800758e:	f7f9 f95d 	bl	800084c <__aeabi_ddiv>
 8007592:	ec41 0b10 	vmov	d0, r0, r1
 8007596:	b005      	add	sp, #20
 8007598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800759c <__copybits>:
 800759c:	3901      	subs	r1, #1
 800759e:	b570      	push	{r4, r5, r6, lr}
 80075a0:	1149      	asrs	r1, r1, #5
 80075a2:	6914      	ldr	r4, [r2, #16]
 80075a4:	3101      	adds	r1, #1
 80075a6:	f102 0314 	add.w	r3, r2, #20
 80075aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80075ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075b2:	1f05      	subs	r5, r0, #4
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	d30c      	bcc.n	80075d2 <__copybits+0x36>
 80075b8:	1aa3      	subs	r3, r4, r2
 80075ba:	3b11      	subs	r3, #17
 80075bc:	f023 0303 	bic.w	r3, r3, #3
 80075c0:	3211      	adds	r2, #17
 80075c2:	42a2      	cmp	r2, r4
 80075c4:	bf88      	it	hi
 80075c6:	2300      	movhi	r3, #0
 80075c8:	4418      	add	r0, r3
 80075ca:	2300      	movs	r3, #0
 80075cc:	4288      	cmp	r0, r1
 80075ce:	d305      	bcc.n	80075dc <__copybits+0x40>
 80075d0:	bd70      	pop	{r4, r5, r6, pc}
 80075d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80075d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80075da:	e7eb      	b.n	80075b4 <__copybits+0x18>
 80075dc:	f840 3b04 	str.w	r3, [r0], #4
 80075e0:	e7f4      	b.n	80075cc <__copybits+0x30>

080075e2 <__any_on>:
 80075e2:	f100 0214 	add.w	r2, r0, #20
 80075e6:	6900      	ldr	r0, [r0, #16]
 80075e8:	114b      	asrs	r3, r1, #5
 80075ea:	4298      	cmp	r0, r3
 80075ec:	b510      	push	{r4, lr}
 80075ee:	db11      	blt.n	8007614 <__any_on+0x32>
 80075f0:	dd0a      	ble.n	8007608 <__any_on+0x26>
 80075f2:	f011 011f 	ands.w	r1, r1, #31
 80075f6:	d007      	beq.n	8007608 <__any_on+0x26>
 80075f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80075fc:	fa24 f001 	lsr.w	r0, r4, r1
 8007600:	fa00 f101 	lsl.w	r1, r0, r1
 8007604:	428c      	cmp	r4, r1
 8007606:	d10b      	bne.n	8007620 <__any_on+0x3e>
 8007608:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800760c:	4293      	cmp	r3, r2
 800760e:	d803      	bhi.n	8007618 <__any_on+0x36>
 8007610:	2000      	movs	r0, #0
 8007612:	bd10      	pop	{r4, pc}
 8007614:	4603      	mov	r3, r0
 8007616:	e7f7      	b.n	8007608 <__any_on+0x26>
 8007618:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800761c:	2900      	cmp	r1, #0
 800761e:	d0f5      	beq.n	800760c <__any_on+0x2a>
 8007620:	2001      	movs	r0, #1
 8007622:	e7f6      	b.n	8007612 <__any_on+0x30>

08007624 <sulp>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	4604      	mov	r4, r0
 8007628:	460d      	mov	r5, r1
 800762a:	ec45 4b10 	vmov	d0, r4, r5
 800762e:	4616      	mov	r6, r2
 8007630:	f7ff feba 	bl	80073a8 <__ulp>
 8007634:	ec51 0b10 	vmov	r0, r1, d0
 8007638:	b17e      	cbz	r6, 800765a <sulp+0x36>
 800763a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800763e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007642:	2b00      	cmp	r3, #0
 8007644:	dd09      	ble.n	800765a <sulp+0x36>
 8007646:	051b      	lsls	r3, r3, #20
 8007648:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800764c:	2400      	movs	r4, #0
 800764e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007652:	4622      	mov	r2, r4
 8007654:	462b      	mov	r3, r5
 8007656:	f7f8 ffcf 	bl	80005f8 <__aeabi_dmul>
 800765a:	ec41 0b10 	vmov	d0, r0, r1
 800765e:	bd70      	pop	{r4, r5, r6, pc}

08007660 <_strtod_l>:
 8007660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	b09f      	sub	sp, #124	@ 0x7c
 8007666:	460c      	mov	r4, r1
 8007668:	9217      	str	r2, [sp, #92]	@ 0x5c
 800766a:	2200      	movs	r2, #0
 800766c:	921a      	str	r2, [sp, #104]	@ 0x68
 800766e:	9005      	str	r0, [sp, #20]
 8007670:	f04f 0a00 	mov.w	sl, #0
 8007674:	f04f 0b00 	mov.w	fp, #0
 8007678:	460a      	mov	r2, r1
 800767a:	9219      	str	r2, [sp, #100]	@ 0x64
 800767c:	7811      	ldrb	r1, [r2, #0]
 800767e:	292b      	cmp	r1, #43	@ 0x2b
 8007680:	d04a      	beq.n	8007718 <_strtod_l+0xb8>
 8007682:	d838      	bhi.n	80076f6 <_strtod_l+0x96>
 8007684:	290d      	cmp	r1, #13
 8007686:	d832      	bhi.n	80076ee <_strtod_l+0x8e>
 8007688:	2908      	cmp	r1, #8
 800768a:	d832      	bhi.n	80076f2 <_strtod_l+0x92>
 800768c:	2900      	cmp	r1, #0
 800768e:	d03b      	beq.n	8007708 <_strtod_l+0xa8>
 8007690:	2200      	movs	r2, #0
 8007692:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007694:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007696:	782a      	ldrb	r2, [r5, #0]
 8007698:	2a30      	cmp	r2, #48	@ 0x30
 800769a:	f040 80b3 	bne.w	8007804 <_strtod_l+0x1a4>
 800769e:	786a      	ldrb	r2, [r5, #1]
 80076a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80076a4:	2a58      	cmp	r2, #88	@ 0x58
 80076a6:	d16e      	bne.n	8007786 <_strtod_l+0x126>
 80076a8:	9302      	str	r3, [sp, #8]
 80076aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076ac:	9301      	str	r3, [sp, #4]
 80076ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	4a8e      	ldr	r2, [pc, #568]	@ (80078ec <_strtod_l+0x28c>)
 80076b4:	9805      	ldr	r0, [sp, #20]
 80076b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80076b8:	a919      	add	r1, sp, #100	@ 0x64
 80076ba:	f001 f927 	bl	800890c <__gethex>
 80076be:	f010 060f 	ands.w	r6, r0, #15
 80076c2:	4604      	mov	r4, r0
 80076c4:	d005      	beq.n	80076d2 <_strtod_l+0x72>
 80076c6:	2e06      	cmp	r6, #6
 80076c8:	d128      	bne.n	800771c <_strtod_l+0xbc>
 80076ca:	3501      	adds	r5, #1
 80076cc:	2300      	movs	r3, #0
 80076ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80076d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f040 858e 	bne.w	80081f6 <_strtod_l+0xb96>
 80076da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076dc:	b1cb      	cbz	r3, 8007712 <_strtod_l+0xb2>
 80076de:	4652      	mov	r2, sl
 80076e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80076e4:	ec43 2b10 	vmov	d0, r2, r3
 80076e8:	b01f      	add	sp, #124	@ 0x7c
 80076ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ee:	2920      	cmp	r1, #32
 80076f0:	d1ce      	bne.n	8007690 <_strtod_l+0x30>
 80076f2:	3201      	adds	r2, #1
 80076f4:	e7c1      	b.n	800767a <_strtod_l+0x1a>
 80076f6:	292d      	cmp	r1, #45	@ 0x2d
 80076f8:	d1ca      	bne.n	8007690 <_strtod_l+0x30>
 80076fa:	2101      	movs	r1, #1
 80076fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80076fe:	1c51      	adds	r1, r2, #1
 8007700:	9119      	str	r1, [sp, #100]	@ 0x64
 8007702:	7852      	ldrb	r2, [r2, #1]
 8007704:	2a00      	cmp	r2, #0
 8007706:	d1c5      	bne.n	8007694 <_strtod_l+0x34>
 8007708:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800770a:	9419      	str	r4, [sp, #100]	@ 0x64
 800770c:	2b00      	cmp	r3, #0
 800770e:	f040 8570 	bne.w	80081f2 <_strtod_l+0xb92>
 8007712:	4652      	mov	r2, sl
 8007714:	465b      	mov	r3, fp
 8007716:	e7e5      	b.n	80076e4 <_strtod_l+0x84>
 8007718:	2100      	movs	r1, #0
 800771a:	e7ef      	b.n	80076fc <_strtod_l+0x9c>
 800771c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800771e:	b13a      	cbz	r2, 8007730 <_strtod_l+0xd0>
 8007720:	2135      	movs	r1, #53	@ 0x35
 8007722:	a81c      	add	r0, sp, #112	@ 0x70
 8007724:	f7ff ff3a 	bl	800759c <__copybits>
 8007728:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800772a:	9805      	ldr	r0, [sp, #20]
 800772c:	f7ff fb08 	bl	8006d40 <_Bfree>
 8007730:	3e01      	subs	r6, #1
 8007732:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007734:	2e04      	cmp	r6, #4
 8007736:	d806      	bhi.n	8007746 <_strtod_l+0xe6>
 8007738:	e8df f006 	tbb	[pc, r6]
 800773c:	201d0314 	.word	0x201d0314
 8007740:	14          	.byte	0x14
 8007741:	00          	.byte	0x00
 8007742:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007746:	05e1      	lsls	r1, r4, #23
 8007748:	bf48      	it	mi
 800774a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800774e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007752:	0d1b      	lsrs	r3, r3, #20
 8007754:	051b      	lsls	r3, r3, #20
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1bb      	bne.n	80076d2 <_strtod_l+0x72>
 800775a:	f7fe fb2f 	bl	8005dbc <__errno>
 800775e:	2322      	movs	r3, #34	@ 0x22
 8007760:	6003      	str	r3, [r0, #0]
 8007762:	e7b6      	b.n	80076d2 <_strtod_l+0x72>
 8007764:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007768:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800776c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007770:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007774:	e7e7      	b.n	8007746 <_strtod_l+0xe6>
 8007776:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80078f4 <_strtod_l+0x294>
 800777a:	e7e4      	b.n	8007746 <_strtod_l+0xe6>
 800777c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007780:	f04f 3aff 	mov.w	sl, #4294967295
 8007784:	e7df      	b.n	8007746 <_strtod_l+0xe6>
 8007786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	9219      	str	r2, [sp, #100]	@ 0x64
 800778c:	785b      	ldrb	r3, [r3, #1]
 800778e:	2b30      	cmp	r3, #48	@ 0x30
 8007790:	d0f9      	beq.n	8007786 <_strtod_l+0x126>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d09d      	beq.n	80076d2 <_strtod_l+0x72>
 8007796:	2301      	movs	r3, #1
 8007798:	9309      	str	r3, [sp, #36]	@ 0x24
 800779a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800779c:	930c      	str	r3, [sp, #48]	@ 0x30
 800779e:	2300      	movs	r3, #0
 80077a0:	9308      	str	r3, [sp, #32]
 80077a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077a4:	461f      	mov	r7, r3
 80077a6:	220a      	movs	r2, #10
 80077a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80077aa:	7805      	ldrb	r5, [r0, #0]
 80077ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80077b0:	b2d9      	uxtb	r1, r3
 80077b2:	2909      	cmp	r1, #9
 80077b4:	d928      	bls.n	8007808 <_strtod_l+0x1a8>
 80077b6:	494e      	ldr	r1, [pc, #312]	@ (80078f0 <_strtod_l+0x290>)
 80077b8:	2201      	movs	r2, #1
 80077ba:	f000 ffd5 	bl	8008768 <strncmp>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d032      	beq.n	8007828 <_strtod_l+0x1c8>
 80077c2:	2000      	movs	r0, #0
 80077c4:	462a      	mov	r2, r5
 80077c6:	4681      	mov	r9, r0
 80077c8:	463d      	mov	r5, r7
 80077ca:	4603      	mov	r3, r0
 80077cc:	2a65      	cmp	r2, #101	@ 0x65
 80077ce:	d001      	beq.n	80077d4 <_strtod_l+0x174>
 80077d0:	2a45      	cmp	r2, #69	@ 0x45
 80077d2:	d114      	bne.n	80077fe <_strtod_l+0x19e>
 80077d4:	b91d      	cbnz	r5, 80077de <_strtod_l+0x17e>
 80077d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077d8:	4302      	orrs	r2, r0
 80077da:	d095      	beq.n	8007708 <_strtod_l+0xa8>
 80077dc:	2500      	movs	r5, #0
 80077de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80077e0:	1c62      	adds	r2, r4, #1
 80077e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80077e4:	7862      	ldrb	r2, [r4, #1]
 80077e6:	2a2b      	cmp	r2, #43	@ 0x2b
 80077e8:	d077      	beq.n	80078da <_strtod_l+0x27a>
 80077ea:	2a2d      	cmp	r2, #45	@ 0x2d
 80077ec:	d07b      	beq.n	80078e6 <_strtod_l+0x286>
 80077ee:	f04f 0c00 	mov.w	ip, #0
 80077f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80077f6:	2909      	cmp	r1, #9
 80077f8:	f240 8082 	bls.w	8007900 <_strtod_l+0x2a0>
 80077fc:	9419      	str	r4, [sp, #100]	@ 0x64
 80077fe:	f04f 0800 	mov.w	r8, #0
 8007802:	e0a2      	b.n	800794a <_strtod_l+0x2ea>
 8007804:	2300      	movs	r3, #0
 8007806:	e7c7      	b.n	8007798 <_strtod_l+0x138>
 8007808:	2f08      	cmp	r7, #8
 800780a:	bfd5      	itete	le
 800780c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800780e:	9908      	ldrgt	r1, [sp, #32]
 8007810:	fb02 3301 	mlale	r3, r2, r1, r3
 8007814:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007818:	f100 0001 	add.w	r0, r0, #1
 800781c:	bfd4      	ite	le
 800781e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007820:	9308      	strgt	r3, [sp, #32]
 8007822:	3701      	adds	r7, #1
 8007824:	9019      	str	r0, [sp, #100]	@ 0x64
 8007826:	e7bf      	b.n	80077a8 <_strtod_l+0x148>
 8007828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	9219      	str	r2, [sp, #100]	@ 0x64
 800782e:	785a      	ldrb	r2, [r3, #1]
 8007830:	b37f      	cbz	r7, 8007892 <_strtod_l+0x232>
 8007832:	4681      	mov	r9, r0
 8007834:	463d      	mov	r5, r7
 8007836:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800783a:	2b09      	cmp	r3, #9
 800783c:	d912      	bls.n	8007864 <_strtod_l+0x204>
 800783e:	2301      	movs	r3, #1
 8007840:	e7c4      	b.n	80077cc <_strtod_l+0x16c>
 8007842:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	9219      	str	r2, [sp, #100]	@ 0x64
 8007848:	785a      	ldrb	r2, [r3, #1]
 800784a:	3001      	adds	r0, #1
 800784c:	2a30      	cmp	r2, #48	@ 0x30
 800784e:	d0f8      	beq.n	8007842 <_strtod_l+0x1e2>
 8007850:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007854:	2b08      	cmp	r3, #8
 8007856:	f200 84d3 	bhi.w	8008200 <_strtod_l+0xba0>
 800785a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800785c:	930c      	str	r3, [sp, #48]	@ 0x30
 800785e:	4681      	mov	r9, r0
 8007860:	2000      	movs	r0, #0
 8007862:	4605      	mov	r5, r0
 8007864:	3a30      	subs	r2, #48	@ 0x30
 8007866:	f100 0301 	add.w	r3, r0, #1
 800786a:	d02a      	beq.n	80078c2 <_strtod_l+0x262>
 800786c:	4499      	add	r9, r3
 800786e:	eb00 0c05 	add.w	ip, r0, r5
 8007872:	462b      	mov	r3, r5
 8007874:	210a      	movs	r1, #10
 8007876:	4563      	cmp	r3, ip
 8007878:	d10d      	bne.n	8007896 <_strtod_l+0x236>
 800787a:	1c69      	adds	r1, r5, #1
 800787c:	4401      	add	r1, r0
 800787e:	4428      	add	r0, r5
 8007880:	2808      	cmp	r0, #8
 8007882:	dc16      	bgt.n	80078b2 <_strtod_l+0x252>
 8007884:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007886:	230a      	movs	r3, #10
 8007888:	fb03 2300 	mla	r3, r3, r0, r2
 800788c:	930a      	str	r3, [sp, #40]	@ 0x28
 800788e:	2300      	movs	r3, #0
 8007890:	e018      	b.n	80078c4 <_strtod_l+0x264>
 8007892:	4638      	mov	r0, r7
 8007894:	e7da      	b.n	800784c <_strtod_l+0x1ec>
 8007896:	2b08      	cmp	r3, #8
 8007898:	f103 0301 	add.w	r3, r3, #1
 800789c:	dc03      	bgt.n	80078a6 <_strtod_l+0x246>
 800789e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80078a0:	434e      	muls	r6, r1
 80078a2:	960a      	str	r6, [sp, #40]	@ 0x28
 80078a4:	e7e7      	b.n	8007876 <_strtod_l+0x216>
 80078a6:	2b10      	cmp	r3, #16
 80078a8:	bfde      	ittt	le
 80078aa:	9e08      	ldrle	r6, [sp, #32]
 80078ac:	434e      	mulle	r6, r1
 80078ae:	9608      	strle	r6, [sp, #32]
 80078b0:	e7e1      	b.n	8007876 <_strtod_l+0x216>
 80078b2:	280f      	cmp	r0, #15
 80078b4:	dceb      	bgt.n	800788e <_strtod_l+0x22e>
 80078b6:	9808      	ldr	r0, [sp, #32]
 80078b8:	230a      	movs	r3, #10
 80078ba:	fb03 2300 	mla	r3, r3, r0, r2
 80078be:	9308      	str	r3, [sp, #32]
 80078c0:	e7e5      	b.n	800788e <_strtod_l+0x22e>
 80078c2:	4629      	mov	r1, r5
 80078c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078c6:	1c50      	adds	r0, r2, #1
 80078c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80078ca:	7852      	ldrb	r2, [r2, #1]
 80078cc:	4618      	mov	r0, r3
 80078ce:	460d      	mov	r5, r1
 80078d0:	e7b1      	b.n	8007836 <_strtod_l+0x1d6>
 80078d2:	f04f 0900 	mov.w	r9, #0
 80078d6:	2301      	movs	r3, #1
 80078d8:	e77d      	b.n	80077d6 <_strtod_l+0x176>
 80078da:	f04f 0c00 	mov.w	ip, #0
 80078de:	1ca2      	adds	r2, r4, #2
 80078e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80078e2:	78a2      	ldrb	r2, [r4, #2]
 80078e4:	e785      	b.n	80077f2 <_strtod_l+0x192>
 80078e6:	f04f 0c01 	mov.w	ip, #1
 80078ea:	e7f8      	b.n	80078de <_strtod_l+0x27e>
 80078ec:	08009788 	.word	0x08009788
 80078f0:	08009770 	.word	0x08009770
 80078f4:	7ff00000 	.word	0x7ff00000
 80078f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078fa:	1c51      	adds	r1, r2, #1
 80078fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80078fe:	7852      	ldrb	r2, [r2, #1]
 8007900:	2a30      	cmp	r2, #48	@ 0x30
 8007902:	d0f9      	beq.n	80078f8 <_strtod_l+0x298>
 8007904:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007908:	2908      	cmp	r1, #8
 800790a:	f63f af78 	bhi.w	80077fe <_strtod_l+0x19e>
 800790e:	3a30      	subs	r2, #48	@ 0x30
 8007910:	920e      	str	r2, [sp, #56]	@ 0x38
 8007912:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007914:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007916:	f04f 080a 	mov.w	r8, #10
 800791a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800791c:	1c56      	adds	r6, r2, #1
 800791e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007920:	7852      	ldrb	r2, [r2, #1]
 8007922:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007926:	f1be 0f09 	cmp.w	lr, #9
 800792a:	d939      	bls.n	80079a0 <_strtod_l+0x340>
 800792c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800792e:	1a76      	subs	r6, r6, r1
 8007930:	2e08      	cmp	r6, #8
 8007932:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007936:	dc03      	bgt.n	8007940 <_strtod_l+0x2e0>
 8007938:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800793a:	4588      	cmp	r8, r1
 800793c:	bfa8      	it	ge
 800793e:	4688      	movge	r8, r1
 8007940:	f1bc 0f00 	cmp.w	ip, #0
 8007944:	d001      	beq.n	800794a <_strtod_l+0x2ea>
 8007946:	f1c8 0800 	rsb	r8, r8, #0
 800794a:	2d00      	cmp	r5, #0
 800794c:	d14e      	bne.n	80079ec <_strtod_l+0x38c>
 800794e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007950:	4308      	orrs	r0, r1
 8007952:	f47f aebe 	bne.w	80076d2 <_strtod_l+0x72>
 8007956:	2b00      	cmp	r3, #0
 8007958:	f47f aed6 	bne.w	8007708 <_strtod_l+0xa8>
 800795c:	2a69      	cmp	r2, #105	@ 0x69
 800795e:	d028      	beq.n	80079b2 <_strtod_l+0x352>
 8007960:	dc25      	bgt.n	80079ae <_strtod_l+0x34e>
 8007962:	2a49      	cmp	r2, #73	@ 0x49
 8007964:	d025      	beq.n	80079b2 <_strtod_l+0x352>
 8007966:	2a4e      	cmp	r2, #78	@ 0x4e
 8007968:	f47f aece 	bne.w	8007708 <_strtod_l+0xa8>
 800796c:	499b      	ldr	r1, [pc, #620]	@ (8007bdc <_strtod_l+0x57c>)
 800796e:	a819      	add	r0, sp, #100	@ 0x64
 8007970:	f001 f9ee 	bl	8008d50 <__match>
 8007974:	2800      	cmp	r0, #0
 8007976:	f43f aec7 	beq.w	8007708 <_strtod_l+0xa8>
 800797a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b28      	cmp	r3, #40	@ 0x28
 8007980:	d12e      	bne.n	80079e0 <_strtod_l+0x380>
 8007982:	4997      	ldr	r1, [pc, #604]	@ (8007be0 <_strtod_l+0x580>)
 8007984:	aa1c      	add	r2, sp, #112	@ 0x70
 8007986:	a819      	add	r0, sp, #100	@ 0x64
 8007988:	f001 f9f6 	bl	8008d78 <__hexnan>
 800798c:	2805      	cmp	r0, #5
 800798e:	d127      	bne.n	80079e0 <_strtod_l+0x380>
 8007990:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007992:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007996:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800799a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800799e:	e698      	b.n	80076d2 <_strtod_l+0x72>
 80079a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80079a2:	fb08 2101 	mla	r1, r8, r1, r2
 80079a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80079aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80079ac:	e7b5      	b.n	800791a <_strtod_l+0x2ba>
 80079ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80079b0:	e7da      	b.n	8007968 <_strtod_l+0x308>
 80079b2:	498c      	ldr	r1, [pc, #560]	@ (8007be4 <_strtod_l+0x584>)
 80079b4:	a819      	add	r0, sp, #100	@ 0x64
 80079b6:	f001 f9cb 	bl	8008d50 <__match>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	f43f aea4 	beq.w	8007708 <_strtod_l+0xa8>
 80079c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079c2:	4989      	ldr	r1, [pc, #548]	@ (8007be8 <_strtod_l+0x588>)
 80079c4:	3b01      	subs	r3, #1
 80079c6:	a819      	add	r0, sp, #100	@ 0x64
 80079c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80079ca:	f001 f9c1 	bl	8008d50 <__match>
 80079ce:	b910      	cbnz	r0, 80079d6 <_strtod_l+0x376>
 80079d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079d2:	3301      	adds	r3, #1
 80079d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80079d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007bf8 <_strtod_l+0x598>
 80079da:	f04f 0a00 	mov.w	sl, #0
 80079de:	e678      	b.n	80076d2 <_strtod_l+0x72>
 80079e0:	4882      	ldr	r0, [pc, #520]	@ (8007bec <_strtod_l+0x58c>)
 80079e2:	f000 fef1 	bl	80087c8 <nan>
 80079e6:	ec5b ab10 	vmov	sl, fp, d0
 80079ea:	e672      	b.n	80076d2 <_strtod_l+0x72>
 80079ec:	eba8 0309 	sub.w	r3, r8, r9
 80079f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80079f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80079f4:	2f00      	cmp	r7, #0
 80079f6:	bf08      	it	eq
 80079f8:	462f      	moveq	r7, r5
 80079fa:	2d10      	cmp	r5, #16
 80079fc:	462c      	mov	r4, r5
 80079fe:	bfa8      	it	ge
 8007a00:	2410      	movge	r4, #16
 8007a02:	f7f8 fd7f 	bl	8000504 <__aeabi_ui2d>
 8007a06:	2d09      	cmp	r5, #9
 8007a08:	4682      	mov	sl, r0
 8007a0a:	468b      	mov	fp, r1
 8007a0c:	dc13      	bgt.n	8007a36 <_strtod_l+0x3d6>
 8007a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f43f ae5e 	beq.w	80076d2 <_strtod_l+0x72>
 8007a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a18:	dd78      	ble.n	8007b0c <_strtod_l+0x4ac>
 8007a1a:	2b16      	cmp	r3, #22
 8007a1c:	dc5f      	bgt.n	8007ade <_strtod_l+0x47e>
 8007a1e:	4974      	ldr	r1, [pc, #464]	@ (8007bf0 <_strtod_l+0x590>)
 8007a20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a28:	4652      	mov	r2, sl
 8007a2a:	465b      	mov	r3, fp
 8007a2c:	f7f8 fde4 	bl	80005f8 <__aeabi_dmul>
 8007a30:	4682      	mov	sl, r0
 8007a32:	468b      	mov	fp, r1
 8007a34:	e64d      	b.n	80076d2 <_strtod_l+0x72>
 8007a36:	4b6e      	ldr	r3, [pc, #440]	@ (8007bf0 <_strtod_l+0x590>)
 8007a38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007a40:	f7f8 fdda 	bl	80005f8 <__aeabi_dmul>
 8007a44:	4682      	mov	sl, r0
 8007a46:	9808      	ldr	r0, [sp, #32]
 8007a48:	468b      	mov	fp, r1
 8007a4a:	f7f8 fd5b 	bl	8000504 <__aeabi_ui2d>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4650      	mov	r0, sl
 8007a54:	4659      	mov	r1, fp
 8007a56:	f7f8 fc19 	bl	800028c <__adddf3>
 8007a5a:	2d0f      	cmp	r5, #15
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	468b      	mov	fp, r1
 8007a60:	ddd5      	ble.n	8007a0e <_strtod_l+0x3ae>
 8007a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a64:	1b2c      	subs	r4, r5, r4
 8007a66:	441c      	add	r4, r3
 8007a68:	2c00      	cmp	r4, #0
 8007a6a:	f340 8096 	ble.w	8007b9a <_strtod_l+0x53a>
 8007a6e:	f014 030f 	ands.w	r3, r4, #15
 8007a72:	d00a      	beq.n	8007a8a <_strtod_l+0x42a>
 8007a74:	495e      	ldr	r1, [pc, #376]	@ (8007bf0 <_strtod_l+0x590>)
 8007a76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a7a:	4652      	mov	r2, sl
 8007a7c:	465b      	mov	r3, fp
 8007a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a82:	f7f8 fdb9 	bl	80005f8 <__aeabi_dmul>
 8007a86:	4682      	mov	sl, r0
 8007a88:	468b      	mov	fp, r1
 8007a8a:	f034 040f 	bics.w	r4, r4, #15
 8007a8e:	d073      	beq.n	8007b78 <_strtod_l+0x518>
 8007a90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007a94:	dd48      	ble.n	8007b28 <_strtod_l+0x4c8>
 8007a96:	2400      	movs	r4, #0
 8007a98:	46a0      	mov	r8, r4
 8007a9a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a9c:	46a1      	mov	r9, r4
 8007a9e:	9a05      	ldr	r2, [sp, #20]
 8007aa0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007bf8 <_strtod_l+0x598>
 8007aa4:	2322      	movs	r3, #34	@ 0x22
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	f04f 0a00 	mov.w	sl, #0
 8007aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f43f ae0f 	beq.w	80076d2 <_strtod_l+0x72>
 8007ab4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ab6:	9805      	ldr	r0, [sp, #20]
 8007ab8:	f7ff f942 	bl	8006d40 <_Bfree>
 8007abc:	9805      	ldr	r0, [sp, #20]
 8007abe:	4649      	mov	r1, r9
 8007ac0:	f7ff f93e 	bl	8006d40 <_Bfree>
 8007ac4:	9805      	ldr	r0, [sp, #20]
 8007ac6:	4641      	mov	r1, r8
 8007ac8:	f7ff f93a 	bl	8006d40 <_Bfree>
 8007acc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ace:	9805      	ldr	r0, [sp, #20]
 8007ad0:	f7ff f936 	bl	8006d40 <_Bfree>
 8007ad4:	9805      	ldr	r0, [sp, #20]
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	f7ff f932 	bl	8006d40 <_Bfree>
 8007adc:	e5f9      	b.n	80076d2 <_strtod_l+0x72>
 8007ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ae0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	dbbc      	blt.n	8007a62 <_strtod_l+0x402>
 8007ae8:	4c41      	ldr	r4, [pc, #260]	@ (8007bf0 <_strtod_l+0x590>)
 8007aea:	f1c5 050f 	rsb	r5, r5, #15
 8007aee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007af2:	4652      	mov	r2, sl
 8007af4:	465b      	mov	r3, fp
 8007af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007afa:	f7f8 fd7d 	bl	80005f8 <__aeabi_dmul>
 8007afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b00:	1b5d      	subs	r5, r3, r5
 8007b02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007b06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b0a:	e78f      	b.n	8007a2c <_strtod_l+0x3cc>
 8007b0c:	3316      	adds	r3, #22
 8007b0e:	dba8      	blt.n	8007a62 <_strtod_l+0x402>
 8007b10:	4b37      	ldr	r3, [pc, #220]	@ (8007bf0 <_strtod_l+0x590>)
 8007b12:	eba9 0808 	sub.w	r8, r9, r8
 8007b16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007b1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007b1e:	4650      	mov	r0, sl
 8007b20:	4659      	mov	r1, fp
 8007b22:	f7f8 fe93 	bl	800084c <__aeabi_ddiv>
 8007b26:	e783      	b.n	8007a30 <_strtod_l+0x3d0>
 8007b28:	4b32      	ldr	r3, [pc, #200]	@ (8007bf4 <_strtod_l+0x594>)
 8007b2a:	9308      	str	r3, [sp, #32]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	1124      	asrs	r4, r4, #4
 8007b30:	4650      	mov	r0, sl
 8007b32:	4659      	mov	r1, fp
 8007b34:	461e      	mov	r6, r3
 8007b36:	2c01      	cmp	r4, #1
 8007b38:	dc21      	bgt.n	8007b7e <_strtod_l+0x51e>
 8007b3a:	b10b      	cbz	r3, 8007b40 <_strtod_l+0x4e0>
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	468b      	mov	fp, r1
 8007b40:	492c      	ldr	r1, [pc, #176]	@ (8007bf4 <_strtod_l+0x594>)
 8007b42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007b46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b52:	f7f8 fd51 	bl	80005f8 <__aeabi_dmul>
 8007b56:	4b28      	ldr	r3, [pc, #160]	@ (8007bf8 <_strtod_l+0x598>)
 8007b58:	460a      	mov	r2, r1
 8007b5a:	400b      	ands	r3, r1
 8007b5c:	4927      	ldr	r1, [pc, #156]	@ (8007bfc <_strtod_l+0x59c>)
 8007b5e:	428b      	cmp	r3, r1
 8007b60:	4682      	mov	sl, r0
 8007b62:	d898      	bhi.n	8007a96 <_strtod_l+0x436>
 8007b64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	bf86      	itte	hi
 8007b6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007c00 <_strtod_l+0x5a0>
 8007b70:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9308      	str	r3, [sp, #32]
 8007b7c:	e07a      	b.n	8007c74 <_strtod_l+0x614>
 8007b7e:	07e2      	lsls	r2, r4, #31
 8007b80:	d505      	bpl.n	8007b8e <_strtod_l+0x52e>
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f7f8 fd36 	bl	80005f8 <__aeabi_dmul>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	9a08      	ldr	r2, [sp, #32]
 8007b90:	3208      	adds	r2, #8
 8007b92:	3601      	adds	r6, #1
 8007b94:	1064      	asrs	r4, r4, #1
 8007b96:	9208      	str	r2, [sp, #32]
 8007b98:	e7cd      	b.n	8007b36 <_strtod_l+0x4d6>
 8007b9a:	d0ed      	beq.n	8007b78 <_strtod_l+0x518>
 8007b9c:	4264      	negs	r4, r4
 8007b9e:	f014 020f 	ands.w	r2, r4, #15
 8007ba2:	d00a      	beq.n	8007bba <_strtod_l+0x55a>
 8007ba4:	4b12      	ldr	r3, [pc, #72]	@ (8007bf0 <_strtod_l+0x590>)
 8007ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007baa:	4650      	mov	r0, sl
 8007bac:	4659      	mov	r1, fp
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f7f8 fe4b 	bl	800084c <__aeabi_ddiv>
 8007bb6:	4682      	mov	sl, r0
 8007bb8:	468b      	mov	fp, r1
 8007bba:	1124      	asrs	r4, r4, #4
 8007bbc:	d0dc      	beq.n	8007b78 <_strtod_l+0x518>
 8007bbe:	2c1f      	cmp	r4, #31
 8007bc0:	dd20      	ble.n	8007c04 <_strtod_l+0x5a4>
 8007bc2:	2400      	movs	r4, #0
 8007bc4:	46a0      	mov	r8, r4
 8007bc6:	940a      	str	r4, [sp, #40]	@ 0x28
 8007bc8:	46a1      	mov	r9, r4
 8007bca:	9a05      	ldr	r2, [sp, #20]
 8007bcc:	2322      	movs	r3, #34	@ 0x22
 8007bce:	f04f 0a00 	mov.w	sl, #0
 8007bd2:	f04f 0b00 	mov.w	fp, #0
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	e768      	b.n	8007aac <_strtod_l+0x44c>
 8007bda:	bf00      	nop
 8007bdc:	08009561 	.word	0x08009561
 8007be0:	08009774 	.word	0x08009774
 8007be4:	08009559 	.word	0x08009559
 8007be8:	08009590 	.word	0x08009590
 8007bec:	0800991d 	.word	0x0800991d
 8007bf0:	080096a8 	.word	0x080096a8
 8007bf4:	08009680 	.word	0x08009680
 8007bf8:	7ff00000 	.word	0x7ff00000
 8007bfc:	7ca00000 	.word	0x7ca00000
 8007c00:	7fefffff 	.word	0x7fefffff
 8007c04:	f014 0310 	ands.w	r3, r4, #16
 8007c08:	bf18      	it	ne
 8007c0a:	236a      	movne	r3, #106	@ 0x6a
 8007c0c:	4ea9      	ldr	r6, [pc, #676]	@ (8007eb4 <_strtod_l+0x854>)
 8007c0e:	9308      	str	r3, [sp, #32]
 8007c10:	4650      	mov	r0, sl
 8007c12:	4659      	mov	r1, fp
 8007c14:	2300      	movs	r3, #0
 8007c16:	07e2      	lsls	r2, r4, #31
 8007c18:	d504      	bpl.n	8007c24 <_strtod_l+0x5c4>
 8007c1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c1e:	f7f8 fceb 	bl	80005f8 <__aeabi_dmul>
 8007c22:	2301      	movs	r3, #1
 8007c24:	1064      	asrs	r4, r4, #1
 8007c26:	f106 0608 	add.w	r6, r6, #8
 8007c2a:	d1f4      	bne.n	8007c16 <_strtod_l+0x5b6>
 8007c2c:	b10b      	cbz	r3, 8007c32 <_strtod_l+0x5d2>
 8007c2e:	4682      	mov	sl, r0
 8007c30:	468b      	mov	fp, r1
 8007c32:	9b08      	ldr	r3, [sp, #32]
 8007c34:	b1b3      	cbz	r3, 8007c64 <_strtod_l+0x604>
 8007c36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	4659      	mov	r1, fp
 8007c42:	dd0f      	ble.n	8007c64 <_strtod_l+0x604>
 8007c44:	2b1f      	cmp	r3, #31
 8007c46:	dd55      	ble.n	8007cf4 <_strtod_l+0x694>
 8007c48:	2b34      	cmp	r3, #52	@ 0x34
 8007c4a:	bfde      	ittt	le
 8007c4c:	f04f 33ff 	movle.w	r3, #4294967295
 8007c50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007c54:	4093      	lslle	r3, r2
 8007c56:	f04f 0a00 	mov.w	sl, #0
 8007c5a:	bfcc      	ite	gt
 8007c5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007c60:	ea03 0b01 	andle.w	fp, r3, r1
 8007c64:	2200      	movs	r2, #0
 8007c66:	2300      	movs	r3, #0
 8007c68:	4650      	mov	r0, sl
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	f7f8 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d1a6      	bne.n	8007bc2 <_strtod_l+0x562>
 8007c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007c7a:	9805      	ldr	r0, [sp, #20]
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	463a      	mov	r2, r7
 8007c80:	f7ff f8c6 	bl	8006e10 <__s2b>
 8007c84:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f43f af05 	beq.w	8007a96 <_strtod_l+0x436>
 8007c8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	eba9 0308 	sub.w	r3, r9, r8
 8007c94:	bfa8      	it	ge
 8007c96:	2300      	movge	r3, #0
 8007c98:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c9a:	2400      	movs	r4, #0
 8007c9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007ca0:	9316      	str	r3, [sp, #88]	@ 0x58
 8007ca2:	46a0      	mov	r8, r4
 8007ca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ca6:	9805      	ldr	r0, [sp, #20]
 8007ca8:	6859      	ldr	r1, [r3, #4]
 8007caa:	f7ff f809 	bl	8006cc0 <_Balloc>
 8007cae:	4681      	mov	r9, r0
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	f43f aef4 	beq.w	8007a9e <_strtod_l+0x43e>
 8007cb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	3202      	adds	r2, #2
 8007cbc:	f103 010c 	add.w	r1, r3, #12
 8007cc0:	0092      	lsls	r2, r2, #2
 8007cc2:	300c      	adds	r0, #12
 8007cc4:	f000 fd72 	bl	80087ac <memcpy>
 8007cc8:	ec4b ab10 	vmov	d0, sl, fp
 8007ccc:	9805      	ldr	r0, [sp, #20]
 8007cce:	aa1c      	add	r2, sp, #112	@ 0x70
 8007cd0:	a91b      	add	r1, sp, #108	@ 0x6c
 8007cd2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007cd6:	f7ff fbd7 	bl	8007488 <__d2b>
 8007cda:	901a      	str	r0, [sp, #104]	@ 0x68
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f43f aede 	beq.w	8007a9e <_strtod_l+0x43e>
 8007ce2:	9805      	ldr	r0, [sp, #20]
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	f7ff f929 	bl	8006f3c <__i2b>
 8007cea:	4680      	mov	r8, r0
 8007cec:	b948      	cbnz	r0, 8007d02 <_strtod_l+0x6a2>
 8007cee:	f04f 0800 	mov.w	r8, #0
 8007cf2:	e6d4      	b.n	8007a9e <_strtod_l+0x43e>
 8007cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfc:	ea03 0a0a 	and.w	sl, r3, sl
 8007d00:	e7b0      	b.n	8007c64 <_strtod_l+0x604>
 8007d02:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007d04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007d06:	2d00      	cmp	r5, #0
 8007d08:	bfab      	itete	ge
 8007d0a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007d0c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007d0e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007d10:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007d12:	bfac      	ite	ge
 8007d14:	18ef      	addge	r7, r5, r3
 8007d16:	1b5e      	sublt	r6, r3, r5
 8007d18:	9b08      	ldr	r3, [sp, #32]
 8007d1a:	1aed      	subs	r5, r5, r3
 8007d1c:	4415      	add	r5, r2
 8007d1e:	4b66      	ldr	r3, [pc, #408]	@ (8007eb8 <_strtod_l+0x858>)
 8007d20:	3d01      	subs	r5, #1
 8007d22:	429d      	cmp	r5, r3
 8007d24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007d28:	da50      	bge.n	8007dcc <_strtod_l+0x76c>
 8007d2a:	1b5b      	subs	r3, r3, r5
 8007d2c:	2b1f      	cmp	r3, #31
 8007d2e:	eba2 0203 	sub.w	r2, r2, r3
 8007d32:	f04f 0101 	mov.w	r1, #1
 8007d36:	dc3d      	bgt.n	8007db4 <_strtod_l+0x754>
 8007d38:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d42:	18bd      	adds	r5, r7, r2
 8007d44:	9b08      	ldr	r3, [sp, #32]
 8007d46:	42af      	cmp	r7, r5
 8007d48:	4416      	add	r6, r2
 8007d4a:	441e      	add	r6, r3
 8007d4c:	463b      	mov	r3, r7
 8007d4e:	bfa8      	it	ge
 8007d50:	462b      	movge	r3, r5
 8007d52:	42b3      	cmp	r3, r6
 8007d54:	bfa8      	it	ge
 8007d56:	4633      	movge	r3, r6
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bfc2      	ittt	gt
 8007d5c:	1aed      	subgt	r5, r5, r3
 8007d5e:	1af6      	subgt	r6, r6, r3
 8007d60:	1aff      	subgt	r7, r7, r3
 8007d62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dd16      	ble.n	8007d96 <_strtod_l+0x736>
 8007d68:	4641      	mov	r1, r8
 8007d6a:	9805      	ldr	r0, [sp, #20]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f7ff f9a5 	bl	80070bc <__pow5mult>
 8007d72:	4680      	mov	r8, r0
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d0ba      	beq.n	8007cee <_strtod_l+0x68e>
 8007d78:	4601      	mov	r1, r0
 8007d7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d7c:	9805      	ldr	r0, [sp, #20]
 8007d7e:	f7ff f8f3 	bl	8006f68 <__multiply>
 8007d82:	900e      	str	r0, [sp, #56]	@ 0x38
 8007d84:	2800      	cmp	r0, #0
 8007d86:	f43f ae8a 	beq.w	8007a9e <_strtod_l+0x43e>
 8007d8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d8c:	9805      	ldr	r0, [sp, #20]
 8007d8e:	f7fe ffd7 	bl	8006d40 <_Bfree>
 8007d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	dc1d      	bgt.n	8007dd6 <_strtod_l+0x776>
 8007d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	dd23      	ble.n	8007de8 <_strtod_l+0x788>
 8007da0:	4649      	mov	r1, r9
 8007da2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007da4:	9805      	ldr	r0, [sp, #20]
 8007da6:	f7ff f989 	bl	80070bc <__pow5mult>
 8007daa:	4681      	mov	r9, r0
 8007dac:	b9e0      	cbnz	r0, 8007de8 <_strtod_l+0x788>
 8007dae:	f04f 0900 	mov.w	r9, #0
 8007db2:	e674      	b.n	8007a9e <_strtod_l+0x43e>
 8007db4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007db8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007dbc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007dc0:	35e2      	adds	r5, #226	@ 0xe2
 8007dc2:	fa01 f305 	lsl.w	r3, r1, r5
 8007dc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007dc8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007dca:	e7ba      	b.n	8007d42 <_strtod_l+0x6e2>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9310      	str	r3, [sp, #64]	@ 0x40
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007dd4:	e7b5      	b.n	8007d42 <_strtod_l+0x6e2>
 8007dd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007dd8:	9805      	ldr	r0, [sp, #20]
 8007dda:	462a      	mov	r2, r5
 8007ddc:	f7ff f9c8 	bl	8007170 <__lshift>
 8007de0:	901a      	str	r0, [sp, #104]	@ 0x68
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d1d9      	bne.n	8007d9a <_strtod_l+0x73a>
 8007de6:	e65a      	b.n	8007a9e <_strtod_l+0x43e>
 8007de8:	2e00      	cmp	r6, #0
 8007dea:	dd07      	ble.n	8007dfc <_strtod_l+0x79c>
 8007dec:	4649      	mov	r1, r9
 8007dee:	9805      	ldr	r0, [sp, #20]
 8007df0:	4632      	mov	r2, r6
 8007df2:	f7ff f9bd 	bl	8007170 <__lshift>
 8007df6:	4681      	mov	r9, r0
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d0d8      	beq.n	8007dae <_strtod_l+0x74e>
 8007dfc:	2f00      	cmp	r7, #0
 8007dfe:	dd08      	ble.n	8007e12 <_strtod_l+0x7b2>
 8007e00:	4641      	mov	r1, r8
 8007e02:	9805      	ldr	r0, [sp, #20]
 8007e04:	463a      	mov	r2, r7
 8007e06:	f7ff f9b3 	bl	8007170 <__lshift>
 8007e0a:	4680      	mov	r8, r0
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f43f ae46 	beq.w	8007a9e <_strtod_l+0x43e>
 8007e12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e14:	9805      	ldr	r0, [sp, #20]
 8007e16:	464a      	mov	r2, r9
 8007e18:	f7ff fa32 	bl	8007280 <__mdiff>
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f43f ae3d 	beq.w	8007a9e <_strtod_l+0x43e>
 8007e24:	68c3      	ldr	r3, [r0, #12]
 8007e26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60c3      	str	r3, [r0, #12]
 8007e2c:	4641      	mov	r1, r8
 8007e2e:	f7ff fa0b 	bl	8007248 <__mcmp>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	da46      	bge.n	8007ec4 <_strtod_l+0x864>
 8007e36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e38:	ea53 030a 	orrs.w	r3, r3, sl
 8007e3c:	d16c      	bne.n	8007f18 <_strtod_l+0x8b8>
 8007e3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d168      	bne.n	8007f18 <_strtod_l+0x8b8>
 8007e46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e4a:	0d1b      	lsrs	r3, r3, #20
 8007e4c:	051b      	lsls	r3, r3, #20
 8007e4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e52:	d961      	bls.n	8007f18 <_strtod_l+0x8b8>
 8007e54:	6963      	ldr	r3, [r4, #20]
 8007e56:	b913      	cbnz	r3, 8007e5e <_strtod_l+0x7fe>
 8007e58:	6923      	ldr	r3, [r4, #16]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	dd5c      	ble.n	8007f18 <_strtod_l+0x8b8>
 8007e5e:	4621      	mov	r1, r4
 8007e60:	2201      	movs	r2, #1
 8007e62:	9805      	ldr	r0, [sp, #20]
 8007e64:	f7ff f984 	bl	8007170 <__lshift>
 8007e68:	4641      	mov	r1, r8
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	f7ff f9ec 	bl	8007248 <__mcmp>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	dd51      	ble.n	8007f18 <_strtod_l+0x8b8>
 8007e74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e78:	9a08      	ldr	r2, [sp, #32]
 8007e7a:	0d1b      	lsrs	r3, r3, #20
 8007e7c:	051b      	lsls	r3, r3, #20
 8007e7e:	2a00      	cmp	r2, #0
 8007e80:	d06b      	beq.n	8007f5a <_strtod_l+0x8fa>
 8007e82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e86:	d868      	bhi.n	8007f5a <_strtod_l+0x8fa>
 8007e88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007e8c:	f67f ae9d 	bls.w	8007bca <_strtod_l+0x56a>
 8007e90:	4b0a      	ldr	r3, [pc, #40]	@ (8007ebc <_strtod_l+0x85c>)
 8007e92:	4650      	mov	r0, sl
 8007e94:	4659      	mov	r1, fp
 8007e96:	2200      	movs	r2, #0
 8007e98:	f7f8 fbae 	bl	80005f8 <__aeabi_dmul>
 8007e9c:	4b08      	ldr	r3, [pc, #32]	@ (8007ec0 <_strtod_l+0x860>)
 8007e9e:	400b      	ands	r3, r1
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	468b      	mov	fp, r1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f47f ae05 	bne.w	8007ab4 <_strtod_l+0x454>
 8007eaa:	9a05      	ldr	r2, [sp, #20]
 8007eac:	2322      	movs	r3, #34	@ 0x22
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	e600      	b.n	8007ab4 <_strtod_l+0x454>
 8007eb2:	bf00      	nop
 8007eb4:	080097a0 	.word	0x080097a0
 8007eb8:	fffffc02 	.word	0xfffffc02
 8007ebc:	39500000 	.word	0x39500000
 8007ec0:	7ff00000 	.word	0x7ff00000
 8007ec4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007ec8:	d165      	bne.n	8007f96 <_strtod_l+0x936>
 8007eca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007ecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ed0:	b35a      	cbz	r2, 8007f2a <_strtod_l+0x8ca>
 8007ed2:	4a9f      	ldr	r2, [pc, #636]	@ (8008150 <_strtod_l+0xaf0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d12b      	bne.n	8007f30 <_strtod_l+0x8d0>
 8007ed8:	9b08      	ldr	r3, [sp, #32]
 8007eda:	4651      	mov	r1, sl
 8007edc:	b303      	cbz	r3, 8007f20 <_strtod_l+0x8c0>
 8007ede:	4b9d      	ldr	r3, [pc, #628]	@ (8008154 <_strtod_l+0xaf4>)
 8007ee0:	465a      	mov	r2, fp
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eec:	d81b      	bhi.n	8007f26 <_strtod_l+0x8c6>
 8007eee:	0d1b      	lsrs	r3, r3, #20
 8007ef0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	d119      	bne.n	8007f30 <_strtod_l+0x8d0>
 8007efc:	4b96      	ldr	r3, [pc, #600]	@ (8008158 <_strtod_l+0xaf8>)
 8007efe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d102      	bne.n	8007f0a <_strtod_l+0x8aa>
 8007f04:	3101      	adds	r1, #1
 8007f06:	f43f adca 	beq.w	8007a9e <_strtod_l+0x43e>
 8007f0a:	4b92      	ldr	r3, [pc, #584]	@ (8008154 <_strtod_l+0xaf4>)
 8007f0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f0e:	401a      	ands	r2, r3
 8007f10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007f14:	f04f 0a00 	mov.w	sl, #0
 8007f18:	9b08      	ldr	r3, [sp, #32]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1b8      	bne.n	8007e90 <_strtod_l+0x830>
 8007f1e:	e5c9      	b.n	8007ab4 <_strtod_l+0x454>
 8007f20:	f04f 33ff 	mov.w	r3, #4294967295
 8007f24:	e7e8      	b.n	8007ef8 <_strtod_l+0x898>
 8007f26:	4613      	mov	r3, r2
 8007f28:	e7e6      	b.n	8007ef8 <_strtod_l+0x898>
 8007f2a:	ea53 030a 	orrs.w	r3, r3, sl
 8007f2e:	d0a1      	beq.n	8007e74 <_strtod_l+0x814>
 8007f30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f32:	b1db      	cbz	r3, 8007f6c <_strtod_l+0x90c>
 8007f34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f36:	4213      	tst	r3, r2
 8007f38:	d0ee      	beq.n	8007f18 <_strtod_l+0x8b8>
 8007f3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f3c:	9a08      	ldr	r2, [sp, #32]
 8007f3e:	4650      	mov	r0, sl
 8007f40:	4659      	mov	r1, fp
 8007f42:	b1bb      	cbz	r3, 8007f74 <_strtod_l+0x914>
 8007f44:	f7ff fb6e 	bl	8007624 <sulp>
 8007f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f4c:	ec53 2b10 	vmov	r2, r3, d0
 8007f50:	f7f8 f99c 	bl	800028c <__adddf3>
 8007f54:	4682      	mov	sl, r0
 8007f56:	468b      	mov	fp, r1
 8007f58:	e7de      	b.n	8007f18 <_strtod_l+0x8b8>
 8007f5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007f5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f66:	f04f 3aff 	mov.w	sl, #4294967295
 8007f6a:	e7d5      	b.n	8007f18 <_strtod_l+0x8b8>
 8007f6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f6e:	ea13 0f0a 	tst.w	r3, sl
 8007f72:	e7e1      	b.n	8007f38 <_strtod_l+0x8d8>
 8007f74:	f7ff fb56 	bl	8007624 <sulp>
 8007f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f7c:	ec53 2b10 	vmov	r2, r3, d0
 8007f80:	f7f8 f982 	bl	8000288 <__aeabi_dsub>
 8007f84:	2200      	movs	r2, #0
 8007f86:	2300      	movs	r3, #0
 8007f88:	4682      	mov	sl, r0
 8007f8a:	468b      	mov	fp, r1
 8007f8c:	f7f8 fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d0c1      	beq.n	8007f18 <_strtod_l+0x8b8>
 8007f94:	e619      	b.n	8007bca <_strtod_l+0x56a>
 8007f96:	4641      	mov	r1, r8
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f7ff facd 	bl	8007538 <__ratio>
 8007f9e:	ec57 6b10 	vmov	r6, r7, d0
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 fda0 	bl	8000af0 <__aeabi_dcmple>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d06f      	beq.n	8008094 <_strtod_l+0xa34>
 8007fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d17a      	bne.n	80080b0 <_strtod_l+0xa50>
 8007fba:	f1ba 0f00 	cmp.w	sl, #0
 8007fbe:	d158      	bne.n	8008072 <_strtod_l+0xa12>
 8007fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d15a      	bne.n	8008080 <_strtod_l+0xa20>
 8007fca:	4b64      	ldr	r3, [pc, #400]	@ (800815c <_strtod_l+0xafc>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4630      	mov	r0, r6
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	f7f8 fd83 	bl	8000adc <__aeabi_dcmplt>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d159      	bne.n	800808e <_strtod_l+0xa2e>
 8007fda:	4630      	mov	r0, r6
 8007fdc:	4639      	mov	r1, r7
 8007fde:	4b60      	ldr	r3, [pc, #384]	@ (8008160 <_strtod_l+0xb00>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f7f8 fb09 	bl	80005f8 <__aeabi_dmul>
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	460f      	mov	r7, r1
 8007fea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007fee:	9606      	str	r6, [sp, #24]
 8007ff0:	9307      	str	r3, [sp, #28]
 8007ff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ff6:	4d57      	ldr	r5, [pc, #348]	@ (8008154 <_strtod_l+0xaf4>)
 8007ff8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ffe:	401d      	ands	r5, r3
 8008000:	4b58      	ldr	r3, [pc, #352]	@ (8008164 <_strtod_l+0xb04>)
 8008002:	429d      	cmp	r5, r3
 8008004:	f040 80b2 	bne.w	800816c <_strtod_l+0xb0c>
 8008008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800800a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800800e:	ec4b ab10 	vmov	d0, sl, fp
 8008012:	f7ff f9c9 	bl	80073a8 <__ulp>
 8008016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800801a:	ec51 0b10 	vmov	r0, r1, d0
 800801e:	f7f8 faeb 	bl	80005f8 <__aeabi_dmul>
 8008022:	4652      	mov	r2, sl
 8008024:	465b      	mov	r3, fp
 8008026:	f7f8 f931 	bl	800028c <__adddf3>
 800802a:	460b      	mov	r3, r1
 800802c:	4949      	ldr	r1, [pc, #292]	@ (8008154 <_strtod_l+0xaf4>)
 800802e:	4a4e      	ldr	r2, [pc, #312]	@ (8008168 <_strtod_l+0xb08>)
 8008030:	4019      	ands	r1, r3
 8008032:	4291      	cmp	r1, r2
 8008034:	4682      	mov	sl, r0
 8008036:	d942      	bls.n	80080be <_strtod_l+0xa5e>
 8008038:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800803a:	4b47      	ldr	r3, [pc, #284]	@ (8008158 <_strtod_l+0xaf8>)
 800803c:	429a      	cmp	r2, r3
 800803e:	d103      	bne.n	8008048 <_strtod_l+0x9e8>
 8008040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008042:	3301      	adds	r3, #1
 8008044:	f43f ad2b 	beq.w	8007a9e <_strtod_l+0x43e>
 8008048:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008158 <_strtod_l+0xaf8>
 800804c:	f04f 3aff 	mov.w	sl, #4294967295
 8008050:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008052:	9805      	ldr	r0, [sp, #20]
 8008054:	f7fe fe74 	bl	8006d40 <_Bfree>
 8008058:	9805      	ldr	r0, [sp, #20]
 800805a:	4649      	mov	r1, r9
 800805c:	f7fe fe70 	bl	8006d40 <_Bfree>
 8008060:	9805      	ldr	r0, [sp, #20]
 8008062:	4641      	mov	r1, r8
 8008064:	f7fe fe6c 	bl	8006d40 <_Bfree>
 8008068:	9805      	ldr	r0, [sp, #20]
 800806a:	4621      	mov	r1, r4
 800806c:	f7fe fe68 	bl	8006d40 <_Bfree>
 8008070:	e618      	b.n	8007ca4 <_strtod_l+0x644>
 8008072:	f1ba 0f01 	cmp.w	sl, #1
 8008076:	d103      	bne.n	8008080 <_strtod_l+0xa20>
 8008078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800807a:	2b00      	cmp	r3, #0
 800807c:	f43f ada5 	beq.w	8007bca <_strtod_l+0x56a>
 8008080:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008130 <_strtod_l+0xad0>
 8008084:	4f35      	ldr	r7, [pc, #212]	@ (800815c <_strtod_l+0xafc>)
 8008086:	ed8d 7b06 	vstr	d7, [sp, #24]
 800808a:	2600      	movs	r6, #0
 800808c:	e7b1      	b.n	8007ff2 <_strtod_l+0x992>
 800808e:	4f34      	ldr	r7, [pc, #208]	@ (8008160 <_strtod_l+0xb00>)
 8008090:	2600      	movs	r6, #0
 8008092:	e7aa      	b.n	8007fea <_strtod_l+0x98a>
 8008094:	4b32      	ldr	r3, [pc, #200]	@ (8008160 <_strtod_l+0xb00>)
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	2200      	movs	r2, #0
 800809c:	f7f8 faac 	bl	80005f8 <__aeabi_dmul>
 80080a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080a2:	4606      	mov	r6, r0
 80080a4:	460f      	mov	r7, r1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d09f      	beq.n	8007fea <_strtod_l+0x98a>
 80080aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80080ae:	e7a0      	b.n	8007ff2 <_strtod_l+0x992>
 80080b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008138 <_strtod_l+0xad8>
 80080b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080b8:	ec57 6b17 	vmov	r6, r7, d7
 80080bc:	e799      	b.n	8007ff2 <_strtod_l+0x992>
 80080be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80080c2:	9b08      	ldr	r3, [sp, #32]
 80080c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1c1      	bne.n	8008050 <_strtod_l+0x9f0>
 80080cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080d0:	0d1b      	lsrs	r3, r3, #20
 80080d2:	051b      	lsls	r3, r3, #20
 80080d4:	429d      	cmp	r5, r3
 80080d6:	d1bb      	bne.n	8008050 <_strtod_l+0x9f0>
 80080d8:	4630      	mov	r0, r6
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 fdec 	bl	8000cb8 <__aeabi_d2lz>
 80080e0:	f7f8 fa5c 	bl	800059c <__aeabi_l2d>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4630      	mov	r0, r6
 80080ea:	4639      	mov	r1, r7
 80080ec:	f7f8 f8cc 	bl	8000288 <__aeabi_dsub>
 80080f0:	460b      	mov	r3, r1
 80080f2:	4602      	mov	r2, r0
 80080f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80080f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80080fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080fe:	ea46 060a 	orr.w	r6, r6, sl
 8008102:	431e      	orrs	r6, r3
 8008104:	d06f      	beq.n	80081e6 <_strtod_l+0xb86>
 8008106:	a30e      	add	r3, pc, #56	@ (adr r3, 8008140 <_strtod_l+0xae0>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 fce6 	bl	8000adc <__aeabi_dcmplt>
 8008110:	2800      	cmp	r0, #0
 8008112:	f47f accf 	bne.w	8007ab4 <_strtod_l+0x454>
 8008116:	a30c      	add	r3, pc, #48	@ (adr r3, 8008148 <_strtod_l+0xae8>)
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008120:	f7f8 fcfa 	bl	8000b18 <__aeabi_dcmpgt>
 8008124:	2800      	cmp	r0, #0
 8008126:	d093      	beq.n	8008050 <_strtod_l+0x9f0>
 8008128:	e4c4      	b.n	8007ab4 <_strtod_l+0x454>
 800812a:	bf00      	nop
 800812c:	f3af 8000 	nop.w
 8008130:	00000000 	.word	0x00000000
 8008134:	bff00000 	.word	0xbff00000
 8008138:	00000000 	.word	0x00000000
 800813c:	3ff00000 	.word	0x3ff00000
 8008140:	94a03595 	.word	0x94a03595
 8008144:	3fdfffff 	.word	0x3fdfffff
 8008148:	35afe535 	.word	0x35afe535
 800814c:	3fe00000 	.word	0x3fe00000
 8008150:	000fffff 	.word	0x000fffff
 8008154:	7ff00000 	.word	0x7ff00000
 8008158:	7fefffff 	.word	0x7fefffff
 800815c:	3ff00000 	.word	0x3ff00000
 8008160:	3fe00000 	.word	0x3fe00000
 8008164:	7fe00000 	.word	0x7fe00000
 8008168:	7c9fffff 	.word	0x7c9fffff
 800816c:	9b08      	ldr	r3, [sp, #32]
 800816e:	b323      	cbz	r3, 80081ba <_strtod_l+0xb5a>
 8008170:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008174:	d821      	bhi.n	80081ba <_strtod_l+0xb5a>
 8008176:	a328      	add	r3, pc, #160	@ (adr r3, 8008218 <_strtod_l+0xbb8>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	4630      	mov	r0, r6
 800817e:	4639      	mov	r1, r7
 8008180:	f7f8 fcb6 	bl	8000af0 <__aeabi_dcmple>
 8008184:	b1a0      	cbz	r0, 80081b0 <_strtod_l+0xb50>
 8008186:	4639      	mov	r1, r7
 8008188:	4630      	mov	r0, r6
 800818a:	f7f8 fd0d 	bl	8000ba8 <__aeabi_d2uiz>
 800818e:	2801      	cmp	r0, #1
 8008190:	bf38      	it	cc
 8008192:	2001      	movcc	r0, #1
 8008194:	f7f8 f9b6 	bl	8000504 <__aeabi_ui2d>
 8008198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800819a:	4606      	mov	r6, r0
 800819c:	460f      	mov	r7, r1
 800819e:	b9fb      	cbnz	r3, 80081e0 <_strtod_l+0xb80>
 80081a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80081a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80081a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80081ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80081b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80081b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80081b6:	1b5b      	subs	r3, r3, r5
 80081b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80081ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80081be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80081c2:	f7ff f8f1 	bl	80073a8 <__ulp>
 80081c6:	4650      	mov	r0, sl
 80081c8:	ec53 2b10 	vmov	r2, r3, d0
 80081cc:	4659      	mov	r1, fp
 80081ce:	f7f8 fa13 	bl	80005f8 <__aeabi_dmul>
 80081d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80081d6:	f7f8 f859 	bl	800028c <__adddf3>
 80081da:	4682      	mov	sl, r0
 80081dc:	468b      	mov	fp, r1
 80081de:	e770      	b.n	80080c2 <_strtod_l+0xa62>
 80081e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80081e4:	e7e0      	b.n	80081a8 <_strtod_l+0xb48>
 80081e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008220 <_strtod_l+0xbc0>)
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f7f8 fc76 	bl	8000adc <__aeabi_dcmplt>
 80081f0:	e798      	b.n	8008124 <_strtod_l+0xac4>
 80081f2:	2300      	movs	r3, #0
 80081f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80081f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	f7ff ba6d 	b.w	80076da <_strtod_l+0x7a>
 8008200:	2a65      	cmp	r2, #101	@ 0x65
 8008202:	f43f ab66 	beq.w	80078d2 <_strtod_l+0x272>
 8008206:	2a45      	cmp	r2, #69	@ 0x45
 8008208:	f43f ab63 	beq.w	80078d2 <_strtod_l+0x272>
 800820c:	2301      	movs	r3, #1
 800820e:	f7ff bb9e 	b.w	800794e <_strtod_l+0x2ee>
 8008212:	bf00      	nop
 8008214:	f3af 8000 	nop.w
 8008218:	ffc00000 	.word	0xffc00000
 800821c:	41dfffff 	.word	0x41dfffff
 8008220:	94a03595 	.word	0x94a03595
 8008224:	3fcfffff 	.word	0x3fcfffff

08008228 <_strtod_r>:
 8008228:	4b01      	ldr	r3, [pc, #4]	@ (8008230 <_strtod_r+0x8>)
 800822a:	f7ff ba19 	b.w	8007660 <_strtod_l>
 800822e:	bf00      	nop
 8008230:	20000068 	.word	0x20000068

08008234 <_strtol_l.constprop.0>:
 8008234:	2b24      	cmp	r3, #36	@ 0x24
 8008236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823a:	4686      	mov	lr, r0
 800823c:	4690      	mov	r8, r2
 800823e:	d801      	bhi.n	8008244 <_strtol_l.constprop.0+0x10>
 8008240:	2b01      	cmp	r3, #1
 8008242:	d106      	bne.n	8008252 <_strtol_l.constprop.0+0x1e>
 8008244:	f7fd fdba 	bl	8005dbc <__errno>
 8008248:	2316      	movs	r3, #22
 800824a:	6003      	str	r3, [r0, #0]
 800824c:	2000      	movs	r0, #0
 800824e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008252:	4834      	ldr	r0, [pc, #208]	@ (8008324 <_strtol_l.constprop.0+0xf0>)
 8008254:	460d      	mov	r5, r1
 8008256:	462a      	mov	r2, r5
 8008258:	f815 4b01 	ldrb.w	r4, [r5], #1
 800825c:	5d06      	ldrb	r6, [r0, r4]
 800825e:	f016 0608 	ands.w	r6, r6, #8
 8008262:	d1f8      	bne.n	8008256 <_strtol_l.constprop.0+0x22>
 8008264:	2c2d      	cmp	r4, #45	@ 0x2d
 8008266:	d12d      	bne.n	80082c4 <_strtol_l.constprop.0+0x90>
 8008268:	782c      	ldrb	r4, [r5, #0]
 800826a:	2601      	movs	r6, #1
 800826c:	1c95      	adds	r5, r2, #2
 800826e:	f033 0210 	bics.w	r2, r3, #16
 8008272:	d109      	bne.n	8008288 <_strtol_l.constprop.0+0x54>
 8008274:	2c30      	cmp	r4, #48	@ 0x30
 8008276:	d12a      	bne.n	80082ce <_strtol_l.constprop.0+0x9a>
 8008278:	782a      	ldrb	r2, [r5, #0]
 800827a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800827e:	2a58      	cmp	r2, #88	@ 0x58
 8008280:	d125      	bne.n	80082ce <_strtol_l.constprop.0+0x9a>
 8008282:	786c      	ldrb	r4, [r5, #1]
 8008284:	2310      	movs	r3, #16
 8008286:	3502      	adds	r5, #2
 8008288:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800828c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008290:	2200      	movs	r2, #0
 8008292:	fbbc f9f3 	udiv	r9, ip, r3
 8008296:	4610      	mov	r0, r2
 8008298:	fb03 ca19 	mls	sl, r3, r9, ip
 800829c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80082a0:	2f09      	cmp	r7, #9
 80082a2:	d81b      	bhi.n	80082dc <_strtol_l.constprop.0+0xa8>
 80082a4:	463c      	mov	r4, r7
 80082a6:	42a3      	cmp	r3, r4
 80082a8:	dd27      	ble.n	80082fa <_strtol_l.constprop.0+0xc6>
 80082aa:	1c57      	adds	r7, r2, #1
 80082ac:	d007      	beq.n	80082be <_strtol_l.constprop.0+0x8a>
 80082ae:	4581      	cmp	r9, r0
 80082b0:	d320      	bcc.n	80082f4 <_strtol_l.constprop.0+0xc0>
 80082b2:	d101      	bne.n	80082b8 <_strtol_l.constprop.0+0x84>
 80082b4:	45a2      	cmp	sl, r4
 80082b6:	db1d      	blt.n	80082f4 <_strtol_l.constprop.0+0xc0>
 80082b8:	fb00 4003 	mla	r0, r0, r3, r4
 80082bc:	2201      	movs	r2, #1
 80082be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082c2:	e7eb      	b.n	800829c <_strtol_l.constprop.0+0x68>
 80082c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80082c6:	bf04      	itt	eq
 80082c8:	782c      	ldrbeq	r4, [r5, #0]
 80082ca:	1c95      	addeq	r5, r2, #2
 80082cc:	e7cf      	b.n	800826e <_strtol_l.constprop.0+0x3a>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1da      	bne.n	8008288 <_strtol_l.constprop.0+0x54>
 80082d2:	2c30      	cmp	r4, #48	@ 0x30
 80082d4:	bf0c      	ite	eq
 80082d6:	2308      	moveq	r3, #8
 80082d8:	230a      	movne	r3, #10
 80082da:	e7d5      	b.n	8008288 <_strtol_l.constprop.0+0x54>
 80082dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80082e0:	2f19      	cmp	r7, #25
 80082e2:	d801      	bhi.n	80082e8 <_strtol_l.constprop.0+0xb4>
 80082e4:	3c37      	subs	r4, #55	@ 0x37
 80082e6:	e7de      	b.n	80082a6 <_strtol_l.constprop.0+0x72>
 80082e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80082ec:	2f19      	cmp	r7, #25
 80082ee:	d804      	bhi.n	80082fa <_strtol_l.constprop.0+0xc6>
 80082f0:	3c57      	subs	r4, #87	@ 0x57
 80082f2:	e7d8      	b.n	80082a6 <_strtol_l.constprop.0+0x72>
 80082f4:	f04f 32ff 	mov.w	r2, #4294967295
 80082f8:	e7e1      	b.n	80082be <_strtol_l.constprop.0+0x8a>
 80082fa:	1c53      	adds	r3, r2, #1
 80082fc:	d108      	bne.n	8008310 <_strtol_l.constprop.0+0xdc>
 80082fe:	2322      	movs	r3, #34	@ 0x22
 8008300:	f8ce 3000 	str.w	r3, [lr]
 8008304:	4660      	mov	r0, ip
 8008306:	f1b8 0f00 	cmp.w	r8, #0
 800830a:	d0a0      	beq.n	800824e <_strtol_l.constprop.0+0x1a>
 800830c:	1e69      	subs	r1, r5, #1
 800830e:	e006      	b.n	800831e <_strtol_l.constprop.0+0xea>
 8008310:	b106      	cbz	r6, 8008314 <_strtol_l.constprop.0+0xe0>
 8008312:	4240      	negs	r0, r0
 8008314:	f1b8 0f00 	cmp.w	r8, #0
 8008318:	d099      	beq.n	800824e <_strtol_l.constprop.0+0x1a>
 800831a:	2a00      	cmp	r2, #0
 800831c:	d1f6      	bne.n	800830c <_strtol_l.constprop.0+0xd8>
 800831e:	f8c8 1000 	str.w	r1, [r8]
 8008322:	e794      	b.n	800824e <_strtol_l.constprop.0+0x1a>
 8008324:	080097c9 	.word	0x080097c9

08008328 <_strtol_r>:
 8008328:	f7ff bf84 	b.w	8008234 <_strtol_l.constprop.0>

0800832c <__ssputs_r>:
 800832c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008330:	688e      	ldr	r6, [r1, #8]
 8008332:	461f      	mov	r7, r3
 8008334:	42be      	cmp	r6, r7
 8008336:	680b      	ldr	r3, [r1, #0]
 8008338:	4682      	mov	sl, r0
 800833a:	460c      	mov	r4, r1
 800833c:	4690      	mov	r8, r2
 800833e:	d82d      	bhi.n	800839c <__ssputs_r+0x70>
 8008340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008344:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008348:	d026      	beq.n	8008398 <__ssputs_r+0x6c>
 800834a:	6965      	ldr	r5, [r4, #20]
 800834c:	6909      	ldr	r1, [r1, #16]
 800834e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008352:	eba3 0901 	sub.w	r9, r3, r1
 8008356:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800835a:	1c7b      	adds	r3, r7, #1
 800835c:	444b      	add	r3, r9
 800835e:	106d      	asrs	r5, r5, #1
 8008360:	429d      	cmp	r5, r3
 8008362:	bf38      	it	cc
 8008364:	461d      	movcc	r5, r3
 8008366:	0553      	lsls	r3, r2, #21
 8008368:	d527      	bpl.n	80083ba <__ssputs_r+0x8e>
 800836a:	4629      	mov	r1, r5
 800836c:	f7fe fc1c 	bl	8006ba8 <_malloc_r>
 8008370:	4606      	mov	r6, r0
 8008372:	b360      	cbz	r0, 80083ce <__ssputs_r+0xa2>
 8008374:	6921      	ldr	r1, [r4, #16]
 8008376:	464a      	mov	r2, r9
 8008378:	f000 fa18 	bl	80087ac <memcpy>
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008386:	81a3      	strh	r3, [r4, #12]
 8008388:	6126      	str	r6, [r4, #16]
 800838a:	6165      	str	r5, [r4, #20]
 800838c:	444e      	add	r6, r9
 800838e:	eba5 0509 	sub.w	r5, r5, r9
 8008392:	6026      	str	r6, [r4, #0]
 8008394:	60a5      	str	r5, [r4, #8]
 8008396:	463e      	mov	r6, r7
 8008398:	42be      	cmp	r6, r7
 800839a:	d900      	bls.n	800839e <__ssputs_r+0x72>
 800839c:	463e      	mov	r6, r7
 800839e:	6820      	ldr	r0, [r4, #0]
 80083a0:	4632      	mov	r2, r6
 80083a2:	4641      	mov	r1, r8
 80083a4:	f000 f9c6 	bl	8008734 <memmove>
 80083a8:	68a3      	ldr	r3, [r4, #8]
 80083aa:	1b9b      	subs	r3, r3, r6
 80083ac:	60a3      	str	r3, [r4, #8]
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	4433      	add	r3, r6
 80083b2:	6023      	str	r3, [r4, #0]
 80083b4:	2000      	movs	r0, #0
 80083b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ba:	462a      	mov	r2, r5
 80083bc:	f000 fd89 	bl	8008ed2 <_realloc_r>
 80083c0:	4606      	mov	r6, r0
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d1e0      	bne.n	8008388 <__ssputs_r+0x5c>
 80083c6:	6921      	ldr	r1, [r4, #16]
 80083c8:	4650      	mov	r0, sl
 80083ca:	f7fe fb79 	bl	8006ac0 <_free_r>
 80083ce:	230c      	movs	r3, #12
 80083d0:	f8ca 3000 	str.w	r3, [sl]
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	e7e9      	b.n	80083b6 <__ssputs_r+0x8a>
	...

080083e4 <_svfiprintf_r>:
 80083e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e8:	4698      	mov	r8, r3
 80083ea:	898b      	ldrh	r3, [r1, #12]
 80083ec:	061b      	lsls	r3, r3, #24
 80083ee:	b09d      	sub	sp, #116	@ 0x74
 80083f0:	4607      	mov	r7, r0
 80083f2:	460d      	mov	r5, r1
 80083f4:	4614      	mov	r4, r2
 80083f6:	d510      	bpl.n	800841a <_svfiprintf_r+0x36>
 80083f8:	690b      	ldr	r3, [r1, #16]
 80083fa:	b973      	cbnz	r3, 800841a <_svfiprintf_r+0x36>
 80083fc:	2140      	movs	r1, #64	@ 0x40
 80083fe:	f7fe fbd3 	bl	8006ba8 <_malloc_r>
 8008402:	6028      	str	r0, [r5, #0]
 8008404:	6128      	str	r0, [r5, #16]
 8008406:	b930      	cbnz	r0, 8008416 <_svfiprintf_r+0x32>
 8008408:	230c      	movs	r3, #12
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	b01d      	add	sp, #116	@ 0x74
 8008412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008416:	2340      	movs	r3, #64	@ 0x40
 8008418:	616b      	str	r3, [r5, #20]
 800841a:	2300      	movs	r3, #0
 800841c:	9309      	str	r3, [sp, #36]	@ 0x24
 800841e:	2320      	movs	r3, #32
 8008420:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008424:	f8cd 800c 	str.w	r8, [sp, #12]
 8008428:	2330      	movs	r3, #48	@ 0x30
 800842a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085c8 <_svfiprintf_r+0x1e4>
 800842e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008432:	f04f 0901 	mov.w	r9, #1
 8008436:	4623      	mov	r3, r4
 8008438:	469a      	mov	sl, r3
 800843a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800843e:	b10a      	cbz	r2, 8008444 <_svfiprintf_r+0x60>
 8008440:	2a25      	cmp	r2, #37	@ 0x25
 8008442:	d1f9      	bne.n	8008438 <_svfiprintf_r+0x54>
 8008444:	ebba 0b04 	subs.w	fp, sl, r4
 8008448:	d00b      	beq.n	8008462 <_svfiprintf_r+0x7e>
 800844a:	465b      	mov	r3, fp
 800844c:	4622      	mov	r2, r4
 800844e:	4629      	mov	r1, r5
 8008450:	4638      	mov	r0, r7
 8008452:	f7ff ff6b 	bl	800832c <__ssputs_r>
 8008456:	3001      	adds	r0, #1
 8008458:	f000 80a7 	beq.w	80085aa <_svfiprintf_r+0x1c6>
 800845c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800845e:	445a      	add	r2, fp
 8008460:	9209      	str	r2, [sp, #36]	@ 0x24
 8008462:	f89a 3000 	ldrb.w	r3, [sl]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 809f 	beq.w	80085aa <_svfiprintf_r+0x1c6>
 800846c:	2300      	movs	r3, #0
 800846e:	f04f 32ff 	mov.w	r2, #4294967295
 8008472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008476:	f10a 0a01 	add.w	sl, sl, #1
 800847a:	9304      	str	r3, [sp, #16]
 800847c:	9307      	str	r3, [sp, #28]
 800847e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008482:	931a      	str	r3, [sp, #104]	@ 0x68
 8008484:	4654      	mov	r4, sl
 8008486:	2205      	movs	r2, #5
 8008488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848c:	484e      	ldr	r0, [pc, #312]	@ (80085c8 <_svfiprintf_r+0x1e4>)
 800848e:	f7f7 fe9f 	bl	80001d0 <memchr>
 8008492:	9a04      	ldr	r2, [sp, #16]
 8008494:	b9d8      	cbnz	r0, 80084ce <_svfiprintf_r+0xea>
 8008496:	06d0      	lsls	r0, r2, #27
 8008498:	bf44      	itt	mi
 800849a:	2320      	movmi	r3, #32
 800849c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084a0:	0711      	lsls	r1, r2, #28
 80084a2:	bf44      	itt	mi
 80084a4:	232b      	movmi	r3, #43	@ 0x2b
 80084a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084aa:	f89a 3000 	ldrb.w	r3, [sl]
 80084ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80084b0:	d015      	beq.n	80084de <_svfiprintf_r+0xfa>
 80084b2:	9a07      	ldr	r2, [sp, #28]
 80084b4:	4654      	mov	r4, sl
 80084b6:	2000      	movs	r0, #0
 80084b8:	f04f 0c0a 	mov.w	ip, #10
 80084bc:	4621      	mov	r1, r4
 80084be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084c2:	3b30      	subs	r3, #48	@ 0x30
 80084c4:	2b09      	cmp	r3, #9
 80084c6:	d94b      	bls.n	8008560 <_svfiprintf_r+0x17c>
 80084c8:	b1b0      	cbz	r0, 80084f8 <_svfiprintf_r+0x114>
 80084ca:	9207      	str	r2, [sp, #28]
 80084cc:	e014      	b.n	80084f8 <_svfiprintf_r+0x114>
 80084ce:	eba0 0308 	sub.w	r3, r0, r8
 80084d2:	fa09 f303 	lsl.w	r3, r9, r3
 80084d6:	4313      	orrs	r3, r2
 80084d8:	9304      	str	r3, [sp, #16]
 80084da:	46a2      	mov	sl, r4
 80084dc:	e7d2      	b.n	8008484 <_svfiprintf_r+0xa0>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	1d19      	adds	r1, r3, #4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	9103      	str	r1, [sp, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bfbb      	ittet	lt
 80084ea:	425b      	neglt	r3, r3
 80084ec:	f042 0202 	orrlt.w	r2, r2, #2
 80084f0:	9307      	strge	r3, [sp, #28]
 80084f2:	9307      	strlt	r3, [sp, #28]
 80084f4:	bfb8      	it	lt
 80084f6:	9204      	strlt	r2, [sp, #16]
 80084f8:	7823      	ldrb	r3, [r4, #0]
 80084fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80084fc:	d10a      	bne.n	8008514 <_svfiprintf_r+0x130>
 80084fe:	7863      	ldrb	r3, [r4, #1]
 8008500:	2b2a      	cmp	r3, #42	@ 0x2a
 8008502:	d132      	bne.n	800856a <_svfiprintf_r+0x186>
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	1d1a      	adds	r2, r3, #4
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	9203      	str	r2, [sp, #12]
 800850c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008510:	3402      	adds	r4, #2
 8008512:	9305      	str	r3, [sp, #20]
 8008514:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80085d8 <_svfiprintf_r+0x1f4>
 8008518:	7821      	ldrb	r1, [r4, #0]
 800851a:	2203      	movs	r2, #3
 800851c:	4650      	mov	r0, sl
 800851e:	f7f7 fe57 	bl	80001d0 <memchr>
 8008522:	b138      	cbz	r0, 8008534 <_svfiprintf_r+0x150>
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	eba0 000a 	sub.w	r0, r0, sl
 800852a:	2240      	movs	r2, #64	@ 0x40
 800852c:	4082      	lsls	r2, r0
 800852e:	4313      	orrs	r3, r2
 8008530:	3401      	adds	r4, #1
 8008532:	9304      	str	r3, [sp, #16]
 8008534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008538:	4824      	ldr	r0, [pc, #144]	@ (80085cc <_svfiprintf_r+0x1e8>)
 800853a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800853e:	2206      	movs	r2, #6
 8008540:	f7f7 fe46 	bl	80001d0 <memchr>
 8008544:	2800      	cmp	r0, #0
 8008546:	d036      	beq.n	80085b6 <_svfiprintf_r+0x1d2>
 8008548:	4b21      	ldr	r3, [pc, #132]	@ (80085d0 <_svfiprintf_r+0x1ec>)
 800854a:	bb1b      	cbnz	r3, 8008594 <_svfiprintf_r+0x1b0>
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	3307      	adds	r3, #7
 8008550:	f023 0307 	bic.w	r3, r3, #7
 8008554:	3308      	adds	r3, #8
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800855a:	4433      	add	r3, r6
 800855c:	9309      	str	r3, [sp, #36]	@ 0x24
 800855e:	e76a      	b.n	8008436 <_svfiprintf_r+0x52>
 8008560:	fb0c 3202 	mla	r2, ip, r2, r3
 8008564:	460c      	mov	r4, r1
 8008566:	2001      	movs	r0, #1
 8008568:	e7a8      	b.n	80084bc <_svfiprintf_r+0xd8>
 800856a:	2300      	movs	r3, #0
 800856c:	3401      	adds	r4, #1
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	4619      	mov	r1, r3
 8008572:	f04f 0c0a 	mov.w	ip, #10
 8008576:	4620      	mov	r0, r4
 8008578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800857c:	3a30      	subs	r2, #48	@ 0x30
 800857e:	2a09      	cmp	r2, #9
 8008580:	d903      	bls.n	800858a <_svfiprintf_r+0x1a6>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0c6      	beq.n	8008514 <_svfiprintf_r+0x130>
 8008586:	9105      	str	r1, [sp, #20]
 8008588:	e7c4      	b.n	8008514 <_svfiprintf_r+0x130>
 800858a:	fb0c 2101 	mla	r1, ip, r1, r2
 800858e:	4604      	mov	r4, r0
 8008590:	2301      	movs	r3, #1
 8008592:	e7f0      	b.n	8008576 <_svfiprintf_r+0x192>
 8008594:	ab03      	add	r3, sp, #12
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	462a      	mov	r2, r5
 800859a:	4b0e      	ldr	r3, [pc, #56]	@ (80085d4 <_svfiprintf_r+0x1f0>)
 800859c:	a904      	add	r1, sp, #16
 800859e:	4638      	mov	r0, r7
 80085a0:	f7fc fc94 	bl	8004ecc <_printf_float>
 80085a4:	1c42      	adds	r2, r0, #1
 80085a6:	4606      	mov	r6, r0
 80085a8:	d1d6      	bne.n	8008558 <_svfiprintf_r+0x174>
 80085aa:	89ab      	ldrh	r3, [r5, #12]
 80085ac:	065b      	lsls	r3, r3, #25
 80085ae:	f53f af2d 	bmi.w	800840c <_svfiprintf_r+0x28>
 80085b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085b4:	e72c      	b.n	8008410 <_svfiprintf_r+0x2c>
 80085b6:	ab03      	add	r3, sp, #12
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	462a      	mov	r2, r5
 80085bc:	4b05      	ldr	r3, [pc, #20]	@ (80085d4 <_svfiprintf_r+0x1f0>)
 80085be:	a904      	add	r1, sp, #16
 80085c0:	4638      	mov	r0, r7
 80085c2:	f7fc ff1b 	bl	80053fc <_printf_i>
 80085c6:	e7ed      	b.n	80085a4 <_svfiprintf_r+0x1c0>
 80085c8:	080098c9 	.word	0x080098c9
 80085cc:	080098d3 	.word	0x080098d3
 80085d0:	08004ecd 	.word	0x08004ecd
 80085d4:	0800832d 	.word	0x0800832d
 80085d8:	080098cf 	.word	0x080098cf

080085dc <__sflush_r>:
 80085dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e4:	0716      	lsls	r6, r2, #28
 80085e6:	4605      	mov	r5, r0
 80085e8:	460c      	mov	r4, r1
 80085ea:	d454      	bmi.n	8008696 <__sflush_r+0xba>
 80085ec:	684b      	ldr	r3, [r1, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dc02      	bgt.n	80085f8 <__sflush_r+0x1c>
 80085f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	dd48      	ble.n	800868a <__sflush_r+0xae>
 80085f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085fa:	2e00      	cmp	r6, #0
 80085fc:	d045      	beq.n	800868a <__sflush_r+0xae>
 80085fe:	2300      	movs	r3, #0
 8008600:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008604:	682f      	ldr	r7, [r5, #0]
 8008606:	6a21      	ldr	r1, [r4, #32]
 8008608:	602b      	str	r3, [r5, #0]
 800860a:	d030      	beq.n	800866e <__sflush_r+0x92>
 800860c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	0759      	lsls	r1, r3, #29
 8008612:	d505      	bpl.n	8008620 <__sflush_r+0x44>
 8008614:	6863      	ldr	r3, [r4, #4]
 8008616:	1ad2      	subs	r2, r2, r3
 8008618:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800861a:	b10b      	cbz	r3, 8008620 <__sflush_r+0x44>
 800861c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800861e:	1ad2      	subs	r2, r2, r3
 8008620:	2300      	movs	r3, #0
 8008622:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008624:	6a21      	ldr	r1, [r4, #32]
 8008626:	4628      	mov	r0, r5
 8008628:	47b0      	blx	r6
 800862a:	1c43      	adds	r3, r0, #1
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	d106      	bne.n	800863e <__sflush_r+0x62>
 8008630:	6829      	ldr	r1, [r5, #0]
 8008632:	291d      	cmp	r1, #29
 8008634:	d82b      	bhi.n	800868e <__sflush_r+0xb2>
 8008636:	4a2a      	ldr	r2, [pc, #168]	@ (80086e0 <__sflush_r+0x104>)
 8008638:	410a      	asrs	r2, r1
 800863a:	07d6      	lsls	r6, r2, #31
 800863c:	d427      	bmi.n	800868e <__sflush_r+0xb2>
 800863e:	2200      	movs	r2, #0
 8008640:	6062      	str	r2, [r4, #4]
 8008642:	04d9      	lsls	r1, r3, #19
 8008644:	6922      	ldr	r2, [r4, #16]
 8008646:	6022      	str	r2, [r4, #0]
 8008648:	d504      	bpl.n	8008654 <__sflush_r+0x78>
 800864a:	1c42      	adds	r2, r0, #1
 800864c:	d101      	bne.n	8008652 <__sflush_r+0x76>
 800864e:	682b      	ldr	r3, [r5, #0]
 8008650:	b903      	cbnz	r3, 8008654 <__sflush_r+0x78>
 8008652:	6560      	str	r0, [r4, #84]	@ 0x54
 8008654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008656:	602f      	str	r7, [r5, #0]
 8008658:	b1b9      	cbz	r1, 800868a <__sflush_r+0xae>
 800865a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800865e:	4299      	cmp	r1, r3
 8008660:	d002      	beq.n	8008668 <__sflush_r+0x8c>
 8008662:	4628      	mov	r0, r5
 8008664:	f7fe fa2c 	bl	8006ac0 <_free_r>
 8008668:	2300      	movs	r3, #0
 800866a:	6363      	str	r3, [r4, #52]	@ 0x34
 800866c:	e00d      	b.n	800868a <__sflush_r+0xae>
 800866e:	2301      	movs	r3, #1
 8008670:	4628      	mov	r0, r5
 8008672:	47b0      	blx	r6
 8008674:	4602      	mov	r2, r0
 8008676:	1c50      	adds	r0, r2, #1
 8008678:	d1c9      	bne.n	800860e <__sflush_r+0x32>
 800867a:	682b      	ldr	r3, [r5, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0c6      	beq.n	800860e <__sflush_r+0x32>
 8008680:	2b1d      	cmp	r3, #29
 8008682:	d001      	beq.n	8008688 <__sflush_r+0xac>
 8008684:	2b16      	cmp	r3, #22
 8008686:	d11e      	bne.n	80086c6 <__sflush_r+0xea>
 8008688:	602f      	str	r7, [r5, #0]
 800868a:	2000      	movs	r0, #0
 800868c:	e022      	b.n	80086d4 <__sflush_r+0xf8>
 800868e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008692:	b21b      	sxth	r3, r3
 8008694:	e01b      	b.n	80086ce <__sflush_r+0xf2>
 8008696:	690f      	ldr	r7, [r1, #16]
 8008698:	2f00      	cmp	r7, #0
 800869a:	d0f6      	beq.n	800868a <__sflush_r+0xae>
 800869c:	0793      	lsls	r3, r2, #30
 800869e:	680e      	ldr	r6, [r1, #0]
 80086a0:	bf08      	it	eq
 80086a2:	694b      	ldreq	r3, [r1, #20]
 80086a4:	600f      	str	r7, [r1, #0]
 80086a6:	bf18      	it	ne
 80086a8:	2300      	movne	r3, #0
 80086aa:	eba6 0807 	sub.w	r8, r6, r7
 80086ae:	608b      	str	r3, [r1, #8]
 80086b0:	f1b8 0f00 	cmp.w	r8, #0
 80086b4:	dde9      	ble.n	800868a <__sflush_r+0xae>
 80086b6:	6a21      	ldr	r1, [r4, #32]
 80086b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086ba:	4643      	mov	r3, r8
 80086bc:	463a      	mov	r2, r7
 80086be:	4628      	mov	r0, r5
 80086c0:	47b0      	blx	r6
 80086c2:	2800      	cmp	r0, #0
 80086c4:	dc08      	bgt.n	80086d8 <__sflush_r+0xfc>
 80086c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d8:	4407      	add	r7, r0
 80086da:	eba8 0800 	sub.w	r8, r8, r0
 80086de:	e7e7      	b.n	80086b0 <__sflush_r+0xd4>
 80086e0:	dfbffffe 	.word	0xdfbffffe

080086e4 <_fflush_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	690b      	ldr	r3, [r1, #16]
 80086e8:	4605      	mov	r5, r0
 80086ea:	460c      	mov	r4, r1
 80086ec:	b913      	cbnz	r3, 80086f4 <_fflush_r+0x10>
 80086ee:	2500      	movs	r5, #0
 80086f0:	4628      	mov	r0, r5
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	b118      	cbz	r0, 80086fe <_fflush_r+0x1a>
 80086f6:	6a03      	ldr	r3, [r0, #32]
 80086f8:	b90b      	cbnz	r3, 80086fe <_fflush_r+0x1a>
 80086fa:	f7fd fa3f 	bl	8005b7c <__sinit>
 80086fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0f3      	beq.n	80086ee <_fflush_r+0xa>
 8008706:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008708:	07d0      	lsls	r0, r2, #31
 800870a:	d404      	bmi.n	8008716 <_fflush_r+0x32>
 800870c:	0599      	lsls	r1, r3, #22
 800870e:	d402      	bmi.n	8008716 <_fflush_r+0x32>
 8008710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008712:	f7fd fb7e 	bl	8005e12 <__retarget_lock_acquire_recursive>
 8008716:	4628      	mov	r0, r5
 8008718:	4621      	mov	r1, r4
 800871a:	f7ff ff5f 	bl	80085dc <__sflush_r>
 800871e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008720:	07da      	lsls	r2, r3, #31
 8008722:	4605      	mov	r5, r0
 8008724:	d4e4      	bmi.n	80086f0 <_fflush_r+0xc>
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	059b      	lsls	r3, r3, #22
 800872a:	d4e1      	bmi.n	80086f0 <_fflush_r+0xc>
 800872c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800872e:	f7fd fb71 	bl	8005e14 <__retarget_lock_release_recursive>
 8008732:	e7dd      	b.n	80086f0 <_fflush_r+0xc>

08008734 <memmove>:
 8008734:	4288      	cmp	r0, r1
 8008736:	b510      	push	{r4, lr}
 8008738:	eb01 0402 	add.w	r4, r1, r2
 800873c:	d902      	bls.n	8008744 <memmove+0x10>
 800873e:	4284      	cmp	r4, r0
 8008740:	4623      	mov	r3, r4
 8008742:	d807      	bhi.n	8008754 <memmove+0x20>
 8008744:	1e43      	subs	r3, r0, #1
 8008746:	42a1      	cmp	r1, r4
 8008748:	d008      	beq.n	800875c <memmove+0x28>
 800874a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800874e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008752:	e7f8      	b.n	8008746 <memmove+0x12>
 8008754:	4402      	add	r2, r0
 8008756:	4601      	mov	r1, r0
 8008758:	428a      	cmp	r2, r1
 800875a:	d100      	bne.n	800875e <memmove+0x2a>
 800875c:	bd10      	pop	{r4, pc}
 800875e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008766:	e7f7      	b.n	8008758 <memmove+0x24>

08008768 <strncmp>:
 8008768:	b510      	push	{r4, lr}
 800876a:	b16a      	cbz	r2, 8008788 <strncmp+0x20>
 800876c:	3901      	subs	r1, #1
 800876e:	1884      	adds	r4, r0, r2
 8008770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008774:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008778:	429a      	cmp	r2, r3
 800877a:	d103      	bne.n	8008784 <strncmp+0x1c>
 800877c:	42a0      	cmp	r0, r4
 800877e:	d001      	beq.n	8008784 <strncmp+0x1c>
 8008780:	2a00      	cmp	r2, #0
 8008782:	d1f5      	bne.n	8008770 <strncmp+0x8>
 8008784:	1ad0      	subs	r0, r2, r3
 8008786:	bd10      	pop	{r4, pc}
 8008788:	4610      	mov	r0, r2
 800878a:	e7fc      	b.n	8008786 <strncmp+0x1e>

0800878c <_sbrk_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d06      	ldr	r5, [pc, #24]	@ (80087a8 <_sbrk_r+0x1c>)
 8008790:	2300      	movs	r3, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	602b      	str	r3, [r5, #0]
 8008798:	f7f9 fa2a 	bl	8001bf0 <_sbrk>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_sbrk_r+0x1a>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_sbrk_r+0x1a>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	20000410 	.word	0x20000410

080087ac <memcpy>:
 80087ac:	440a      	add	r2, r1
 80087ae:	4291      	cmp	r1, r2
 80087b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80087b4:	d100      	bne.n	80087b8 <memcpy+0xc>
 80087b6:	4770      	bx	lr
 80087b8:	b510      	push	{r4, lr}
 80087ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087c2:	4291      	cmp	r1, r2
 80087c4:	d1f9      	bne.n	80087ba <memcpy+0xe>
 80087c6:	bd10      	pop	{r4, pc}

080087c8 <nan>:
 80087c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80087d0 <nan+0x8>
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	00000000 	.word	0x00000000
 80087d4:	7ff80000 	.word	0x7ff80000

080087d8 <__assert_func>:
 80087d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087da:	4614      	mov	r4, r2
 80087dc:	461a      	mov	r2, r3
 80087de:	4b09      	ldr	r3, [pc, #36]	@ (8008804 <__assert_func+0x2c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4605      	mov	r5, r0
 80087e4:	68d8      	ldr	r0, [r3, #12]
 80087e6:	b954      	cbnz	r4, 80087fe <__assert_func+0x26>
 80087e8:	4b07      	ldr	r3, [pc, #28]	@ (8008808 <__assert_func+0x30>)
 80087ea:	461c      	mov	r4, r3
 80087ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087f0:	9100      	str	r1, [sp, #0]
 80087f2:	462b      	mov	r3, r5
 80087f4:	4905      	ldr	r1, [pc, #20]	@ (800880c <__assert_func+0x34>)
 80087f6:	f000 fba7 	bl	8008f48 <fiprintf>
 80087fa:	f000 fbb7 	bl	8008f6c <abort>
 80087fe:	4b04      	ldr	r3, [pc, #16]	@ (8008810 <__assert_func+0x38>)
 8008800:	e7f4      	b.n	80087ec <__assert_func+0x14>
 8008802:	bf00      	nop
 8008804:	20000018 	.word	0x20000018
 8008808:	0800991d 	.word	0x0800991d
 800880c:	080098ef 	.word	0x080098ef
 8008810:	080098e2 	.word	0x080098e2

08008814 <_calloc_r>:
 8008814:	b570      	push	{r4, r5, r6, lr}
 8008816:	fba1 5402 	umull	r5, r4, r1, r2
 800881a:	b93c      	cbnz	r4, 800882c <_calloc_r+0x18>
 800881c:	4629      	mov	r1, r5
 800881e:	f7fe f9c3 	bl	8006ba8 <_malloc_r>
 8008822:	4606      	mov	r6, r0
 8008824:	b928      	cbnz	r0, 8008832 <_calloc_r+0x1e>
 8008826:	2600      	movs	r6, #0
 8008828:	4630      	mov	r0, r6
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	220c      	movs	r2, #12
 800882e:	6002      	str	r2, [r0, #0]
 8008830:	e7f9      	b.n	8008826 <_calloc_r+0x12>
 8008832:	462a      	mov	r2, r5
 8008834:	4621      	mov	r1, r4
 8008836:	f7fd fa6e 	bl	8005d16 <memset>
 800883a:	e7f5      	b.n	8008828 <_calloc_r+0x14>

0800883c <rshift>:
 800883c:	6903      	ldr	r3, [r0, #16]
 800883e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008846:	ea4f 1261 	mov.w	r2, r1, asr #5
 800884a:	f100 0414 	add.w	r4, r0, #20
 800884e:	dd45      	ble.n	80088dc <rshift+0xa0>
 8008850:	f011 011f 	ands.w	r1, r1, #31
 8008854:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008858:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800885c:	d10c      	bne.n	8008878 <rshift+0x3c>
 800885e:	f100 0710 	add.w	r7, r0, #16
 8008862:	4629      	mov	r1, r5
 8008864:	42b1      	cmp	r1, r6
 8008866:	d334      	bcc.n	80088d2 <rshift+0x96>
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	1eea      	subs	r2, r5, #3
 800886e:	4296      	cmp	r6, r2
 8008870:	bf38      	it	cc
 8008872:	2300      	movcc	r3, #0
 8008874:	4423      	add	r3, r4
 8008876:	e015      	b.n	80088a4 <rshift+0x68>
 8008878:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800887c:	f1c1 0820 	rsb	r8, r1, #32
 8008880:	40cf      	lsrs	r7, r1
 8008882:	f105 0e04 	add.w	lr, r5, #4
 8008886:	46a1      	mov	r9, r4
 8008888:	4576      	cmp	r6, lr
 800888a:	46f4      	mov	ip, lr
 800888c:	d815      	bhi.n	80088ba <rshift+0x7e>
 800888e:	1a9a      	subs	r2, r3, r2
 8008890:	0092      	lsls	r2, r2, #2
 8008892:	3a04      	subs	r2, #4
 8008894:	3501      	adds	r5, #1
 8008896:	42ae      	cmp	r6, r5
 8008898:	bf38      	it	cc
 800889a:	2200      	movcc	r2, #0
 800889c:	18a3      	adds	r3, r4, r2
 800889e:	50a7      	str	r7, [r4, r2]
 80088a0:	b107      	cbz	r7, 80088a4 <rshift+0x68>
 80088a2:	3304      	adds	r3, #4
 80088a4:	1b1a      	subs	r2, r3, r4
 80088a6:	42a3      	cmp	r3, r4
 80088a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088ac:	bf08      	it	eq
 80088ae:	2300      	moveq	r3, #0
 80088b0:	6102      	str	r2, [r0, #16]
 80088b2:	bf08      	it	eq
 80088b4:	6143      	streq	r3, [r0, #20]
 80088b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088ba:	f8dc c000 	ldr.w	ip, [ip]
 80088be:	fa0c fc08 	lsl.w	ip, ip, r8
 80088c2:	ea4c 0707 	orr.w	r7, ip, r7
 80088c6:	f849 7b04 	str.w	r7, [r9], #4
 80088ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088ce:	40cf      	lsrs	r7, r1
 80088d0:	e7da      	b.n	8008888 <rshift+0x4c>
 80088d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80088d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80088da:	e7c3      	b.n	8008864 <rshift+0x28>
 80088dc:	4623      	mov	r3, r4
 80088de:	e7e1      	b.n	80088a4 <rshift+0x68>

080088e0 <__hexdig_fun>:
 80088e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80088e4:	2b09      	cmp	r3, #9
 80088e6:	d802      	bhi.n	80088ee <__hexdig_fun+0xe>
 80088e8:	3820      	subs	r0, #32
 80088ea:	b2c0      	uxtb	r0, r0
 80088ec:	4770      	bx	lr
 80088ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	d801      	bhi.n	80088fa <__hexdig_fun+0x1a>
 80088f6:	3847      	subs	r0, #71	@ 0x47
 80088f8:	e7f7      	b.n	80088ea <__hexdig_fun+0xa>
 80088fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80088fe:	2b05      	cmp	r3, #5
 8008900:	d801      	bhi.n	8008906 <__hexdig_fun+0x26>
 8008902:	3827      	subs	r0, #39	@ 0x27
 8008904:	e7f1      	b.n	80088ea <__hexdig_fun+0xa>
 8008906:	2000      	movs	r0, #0
 8008908:	4770      	bx	lr
	...

0800890c <__gethex>:
 800890c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008910:	b085      	sub	sp, #20
 8008912:	468a      	mov	sl, r1
 8008914:	9302      	str	r3, [sp, #8]
 8008916:	680b      	ldr	r3, [r1, #0]
 8008918:	9001      	str	r0, [sp, #4]
 800891a:	4690      	mov	r8, r2
 800891c:	1c9c      	adds	r4, r3, #2
 800891e:	46a1      	mov	r9, r4
 8008920:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008924:	2830      	cmp	r0, #48	@ 0x30
 8008926:	d0fa      	beq.n	800891e <__gethex+0x12>
 8008928:	eba9 0303 	sub.w	r3, r9, r3
 800892c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008930:	f7ff ffd6 	bl	80088e0 <__hexdig_fun>
 8008934:	4605      	mov	r5, r0
 8008936:	2800      	cmp	r0, #0
 8008938:	d168      	bne.n	8008a0c <__gethex+0x100>
 800893a:	49a0      	ldr	r1, [pc, #640]	@ (8008bbc <__gethex+0x2b0>)
 800893c:	2201      	movs	r2, #1
 800893e:	4648      	mov	r0, r9
 8008940:	f7ff ff12 	bl	8008768 <strncmp>
 8008944:	4607      	mov	r7, r0
 8008946:	2800      	cmp	r0, #0
 8008948:	d167      	bne.n	8008a1a <__gethex+0x10e>
 800894a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800894e:	4626      	mov	r6, r4
 8008950:	f7ff ffc6 	bl	80088e0 <__hexdig_fun>
 8008954:	2800      	cmp	r0, #0
 8008956:	d062      	beq.n	8008a1e <__gethex+0x112>
 8008958:	4623      	mov	r3, r4
 800895a:	7818      	ldrb	r0, [r3, #0]
 800895c:	2830      	cmp	r0, #48	@ 0x30
 800895e:	4699      	mov	r9, r3
 8008960:	f103 0301 	add.w	r3, r3, #1
 8008964:	d0f9      	beq.n	800895a <__gethex+0x4e>
 8008966:	f7ff ffbb 	bl	80088e0 <__hexdig_fun>
 800896a:	fab0 f580 	clz	r5, r0
 800896e:	096d      	lsrs	r5, r5, #5
 8008970:	f04f 0b01 	mov.w	fp, #1
 8008974:	464a      	mov	r2, r9
 8008976:	4616      	mov	r6, r2
 8008978:	3201      	adds	r2, #1
 800897a:	7830      	ldrb	r0, [r6, #0]
 800897c:	f7ff ffb0 	bl	80088e0 <__hexdig_fun>
 8008980:	2800      	cmp	r0, #0
 8008982:	d1f8      	bne.n	8008976 <__gethex+0x6a>
 8008984:	498d      	ldr	r1, [pc, #564]	@ (8008bbc <__gethex+0x2b0>)
 8008986:	2201      	movs	r2, #1
 8008988:	4630      	mov	r0, r6
 800898a:	f7ff feed 	bl	8008768 <strncmp>
 800898e:	2800      	cmp	r0, #0
 8008990:	d13f      	bne.n	8008a12 <__gethex+0x106>
 8008992:	b944      	cbnz	r4, 80089a6 <__gethex+0x9a>
 8008994:	1c74      	adds	r4, r6, #1
 8008996:	4622      	mov	r2, r4
 8008998:	4616      	mov	r6, r2
 800899a:	3201      	adds	r2, #1
 800899c:	7830      	ldrb	r0, [r6, #0]
 800899e:	f7ff ff9f 	bl	80088e0 <__hexdig_fun>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d1f8      	bne.n	8008998 <__gethex+0x8c>
 80089a6:	1ba4      	subs	r4, r4, r6
 80089a8:	00a7      	lsls	r7, r4, #2
 80089aa:	7833      	ldrb	r3, [r6, #0]
 80089ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80089b0:	2b50      	cmp	r3, #80	@ 0x50
 80089b2:	d13e      	bne.n	8008a32 <__gethex+0x126>
 80089b4:	7873      	ldrb	r3, [r6, #1]
 80089b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80089b8:	d033      	beq.n	8008a22 <__gethex+0x116>
 80089ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80089bc:	d034      	beq.n	8008a28 <__gethex+0x11c>
 80089be:	1c71      	adds	r1, r6, #1
 80089c0:	2400      	movs	r4, #0
 80089c2:	7808      	ldrb	r0, [r1, #0]
 80089c4:	f7ff ff8c 	bl	80088e0 <__hexdig_fun>
 80089c8:	1e43      	subs	r3, r0, #1
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b18      	cmp	r3, #24
 80089ce:	d830      	bhi.n	8008a32 <__gethex+0x126>
 80089d0:	f1a0 0210 	sub.w	r2, r0, #16
 80089d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089d8:	f7ff ff82 	bl	80088e0 <__hexdig_fun>
 80089dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80089e0:	fa5f fc8c 	uxtb.w	ip, ip
 80089e4:	f1bc 0f18 	cmp.w	ip, #24
 80089e8:	f04f 030a 	mov.w	r3, #10
 80089ec:	d91e      	bls.n	8008a2c <__gethex+0x120>
 80089ee:	b104      	cbz	r4, 80089f2 <__gethex+0xe6>
 80089f0:	4252      	negs	r2, r2
 80089f2:	4417      	add	r7, r2
 80089f4:	f8ca 1000 	str.w	r1, [sl]
 80089f8:	b1ed      	cbz	r5, 8008a36 <__gethex+0x12a>
 80089fa:	f1bb 0f00 	cmp.w	fp, #0
 80089fe:	bf0c      	ite	eq
 8008a00:	2506      	moveq	r5, #6
 8008a02:	2500      	movne	r5, #0
 8008a04:	4628      	mov	r0, r5
 8008a06:	b005      	add	sp, #20
 8008a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0c:	2500      	movs	r5, #0
 8008a0e:	462c      	mov	r4, r5
 8008a10:	e7b0      	b.n	8008974 <__gethex+0x68>
 8008a12:	2c00      	cmp	r4, #0
 8008a14:	d1c7      	bne.n	80089a6 <__gethex+0x9a>
 8008a16:	4627      	mov	r7, r4
 8008a18:	e7c7      	b.n	80089aa <__gethex+0x9e>
 8008a1a:	464e      	mov	r6, r9
 8008a1c:	462f      	mov	r7, r5
 8008a1e:	2501      	movs	r5, #1
 8008a20:	e7c3      	b.n	80089aa <__gethex+0x9e>
 8008a22:	2400      	movs	r4, #0
 8008a24:	1cb1      	adds	r1, r6, #2
 8008a26:	e7cc      	b.n	80089c2 <__gethex+0xb6>
 8008a28:	2401      	movs	r4, #1
 8008a2a:	e7fb      	b.n	8008a24 <__gethex+0x118>
 8008a2c:	fb03 0002 	mla	r0, r3, r2, r0
 8008a30:	e7ce      	b.n	80089d0 <__gethex+0xc4>
 8008a32:	4631      	mov	r1, r6
 8008a34:	e7de      	b.n	80089f4 <__gethex+0xe8>
 8008a36:	eba6 0309 	sub.w	r3, r6, r9
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	2b07      	cmp	r3, #7
 8008a40:	dc0a      	bgt.n	8008a58 <__gethex+0x14c>
 8008a42:	9801      	ldr	r0, [sp, #4]
 8008a44:	f7fe f93c 	bl	8006cc0 <_Balloc>
 8008a48:	4604      	mov	r4, r0
 8008a4a:	b940      	cbnz	r0, 8008a5e <__gethex+0x152>
 8008a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bc0 <__gethex+0x2b4>)
 8008a4e:	4602      	mov	r2, r0
 8008a50:	21e4      	movs	r1, #228	@ 0xe4
 8008a52:	485c      	ldr	r0, [pc, #368]	@ (8008bc4 <__gethex+0x2b8>)
 8008a54:	f7ff fec0 	bl	80087d8 <__assert_func>
 8008a58:	3101      	adds	r1, #1
 8008a5a:	105b      	asrs	r3, r3, #1
 8008a5c:	e7ef      	b.n	8008a3e <__gethex+0x132>
 8008a5e:	f100 0a14 	add.w	sl, r0, #20
 8008a62:	2300      	movs	r3, #0
 8008a64:	4655      	mov	r5, sl
 8008a66:	469b      	mov	fp, r3
 8008a68:	45b1      	cmp	r9, r6
 8008a6a:	d337      	bcc.n	8008adc <__gethex+0x1d0>
 8008a6c:	f845 bb04 	str.w	fp, [r5], #4
 8008a70:	eba5 050a 	sub.w	r5, r5, sl
 8008a74:	10ad      	asrs	r5, r5, #2
 8008a76:	6125      	str	r5, [r4, #16]
 8008a78:	4658      	mov	r0, fp
 8008a7a:	f7fe fa13 	bl	8006ea4 <__hi0bits>
 8008a7e:	016d      	lsls	r5, r5, #5
 8008a80:	f8d8 6000 	ldr.w	r6, [r8]
 8008a84:	1a2d      	subs	r5, r5, r0
 8008a86:	42b5      	cmp	r5, r6
 8008a88:	dd54      	ble.n	8008b34 <__gethex+0x228>
 8008a8a:	1bad      	subs	r5, r5, r6
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f7fe fda7 	bl	80075e2 <__any_on>
 8008a94:	4681      	mov	r9, r0
 8008a96:	b178      	cbz	r0, 8008ab8 <__gethex+0x1ac>
 8008a98:	1e6b      	subs	r3, r5, #1
 8008a9a:	1159      	asrs	r1, r3, #5
 8008a9c:	f003 021f 	and.w	r2, r3, #31
 8008aa0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008aa4:	f04f 0901 	mov.w	r9, #1
 8008aa8:	fa09 f202 	lsl.w	r2, r9, r2
 8008aac:	420a      	tst	r2, r1
 8008aae:	d003      	beq.n	8008ab8 <__gethex+0x1ac>
 8008ab0:	454b      	cmp	r3, r9
 8008ab2:	dc36      	bgt.n	8008b22 <__gethex+0x216>
 8008ab4:	f04f 0902 	mov.w	r9, #2
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7ff febe 	bl	800883c <rshift>
 8008ac0:	442f      	add	r7, r5
 8008ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ac6:	42bb      	cmp	r3, r7
 8008ac8:	da42      	bge.n	8008b50 <__gethex+0x244>
 8008aca:	9801      	ldr	r0, [sp, #4]
 8008acc:	4621      	mov	r1, r4
 8008ace:	f7fe f937 	bl	8006d40 <_Bfree>
 8008ad2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	25a3      	movs	r5, #163	@ 0xa3
 8008ada:	e793      	b.n	8008a04 <__gethex+0xf8>
 8008adc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008ae0:	2a2e      	cmp	r2, #46	@ 0x2e
 8008ae2:	d012      	beq.n	8008b0a <__gethex+0x1fe>
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d104      	bne.n	8008af2 <__gethex+0x1e6>
 8008ae8:	f845 bb04 	str.w	fp, [r5], #4
 8008aec:	f04f 0b00 	mov.w	fp, #0
 8008af0:	465b      	mov	r3, fp
 8008af2:	7830      	ldrb	r0, [r6, #0]
 8008af4:	9303      	str	r3, [sp, #12]
 8008af6:	f7ff fef3 	bl	80088e0 <__hexdig_fun>
 8008afa:	9b03      	ldr	r3, [sp, #12]
 8008afc:	f000 000f 	and.w	r0, r0, #15
 8008b00:	4098      	lsls	r0, r3
 8008b02:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b06:	3304      	adds	r3, #4
 8008b08:	e7ae      	b.n	8008a68 <__gethex+0x15c>
 8008b0a:	45b1      	cmp	r9, r6
 8008b0c:	d8ea      	bhi.n	8008ae4 <__gethex+0x1d8>
 8008b0e:	492b      	ldr	r1, [pc, #172]	@ (8008bbc <__gethex+0x2b0>)
 8008b10:	9303      	str	r3, [sp, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7ff fe27 	bl	8008768 <strncmp>
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d1e1      	bne.n	8008ae4 <__gethex+0x1d8>
 8008b20:	e7a2      	b.n	8008a68 <__gethex+0x15c>
 8008b22:	1ea9      	subs	r1, r5, #2
 8008b24:	4620      	mov	r0, r4
 8008b26:	f7fe fd5c 	bl	80075e2 <__any_on>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d0c2      	beq.n	8008ab4 <__gethex+0x1a8>
 8008b2e:	f04f 0903 	mov.w	r9, #3
 8008b32:	e7c1      	b.n	8008ab8 <__gethex+0x1ac>
 8008b34:	da09      	bge.n	8008b4a <__gethex+0x23e>
 8008b36:	1b75      	subs	r5, r6, r5
 8008b38:	4621      	mov	r1, r4
 8008b3a:	9801      	ldr	r0, [sp, #4]
 8008b3c:	462a      	mov	r2, r5
 8008b3e:	f7fe fb17 	bl	8007170 <__lshift>
 8008b42:	1b7f      	subs	r7, r7, r5
 8008b44:	4604      	mov	r4, r0
 8008b46:	f100 0a14 	add.w	sl, r0, #20
 8008b4a:	f04f 0900 	mov.w	r9, #0
 8008b4e:	e7b8      	b.n	8008ac2 <__gethex+0x1b6>
 8008b50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b54:	42bd      	cmp	r5, r7
 8008b56:	dd6f      	ble.n	8008c38 <__gethex+0x32c>
 8008b58:	1bed      	subs	r5, r5, r7
 8008b5a:	42ae      	cmp	r6, r5
 8008b5c:	dc34      	bgt.n	8008bc8 <__gethex+0x2bc>
 8008b5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d022      	beq.n	8008bac <__gethex+0x2a0>
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d024      	beq.n	8008bb4 <__gethex+0x2a8>
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d115      	bne.n	8008b9a <__gethex+0x28e>
 8008b6e:	42ae      	cmp	r6, r5
 8008b70:	d113      	bne.n	8008b9a <__gethex+0x28e>
 8008b72:	2e01      	cmp	r6, #1
 8008b74:	d10b      	bne.n	8008b8e <__gethex+0x282>
 8008b76:	9a02      	ldr	r2, [sp, #8]
 8008b78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	2301      	movs	r3, #1
 8008b80:	6123      	str	r3, [r4, #16]
 8008b82:	f8ca 3000 	str.w	r3, [sl]
 8008b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b88:	2562      	movs	r5, #98	@ 0x62
 8008b8a:	601c      	str	r4, [r3, #0]
 8008b8c:	e73a      	b.n	8008a04 <__gethex+0xf8>
 8008b8e:	1e71      	subs	r1, r6, #1
 8008b90:	4620      	mov	r0, r4
 8008b92:	f7fe fd26 	bl	80075e2 <__any_on>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d1ed      	bne.n	8008b76 <__gethex+0x26a>
 8008b9a:	9801      	ldr	r0, [sp, #4]
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	f7fe f8cf 	bl	8006d40 <_Bfree>
 8008ba2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	2550      	movs	r5, #80	@ 0x50
 8008baa:	e72b      	b.n	8008a04 <__gethex+0xf8>
 8008bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f3      	bne.n	8008b9a <__gethex+0x28e>
 8008bb2:	e7e0      	b.n	8008b76 <__gethex+0x26a>
 8008bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1dd      	bne.n	8008b76 <__gethex+0x26a>
 8008bba:	e7ee      	b.n	8008b9a <__gethex+0x28e>
 8008bbc:	08009770 	.word	0x08009770
 8008bc0:	08009609 	.word	0x08009609
 8008bc4:	0800991e 	.word	0x0800991e
 8008bc8:	1e6f      	subs	r7, r5, #1
 8008bca:	f1b9 0f00 	cmp.w	r9, #0
 8008bce:	d130      	bne.n	8008c32 <__gethex+0x326>
 8008bd0:	b127      	cbz	r7, 8008bdc <__gethex+0x2d0>
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f7fe fd04 	bl	80075e2 <__any_on>
 8008bda:	4681      	mov	r9, r0
 8008bdc:	117a      	asrs	r2, r7, #5
 8008bde:	2301      	movs	r3, #1
 8008be0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008be4:	f007 071f 	and.w	r7, r7, #31
 8008be8:	40bb      	lsls	r3, r7
 8008bea:	4213      	tst	r3, r2
 8008bec:	4629      	mov	r1, r5
 8008bee:	4620      	mov	r0, r4
 8008bf0:	bf18      	it	ne
 8008bf2:	f049 0902 	orrne.w	r9, r9, #2
 8008bf6:	f7ff fe21 	bl	800883c <rshift>
 8008bfa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008bfe:	1b76      	subs	r6, r6, r5
 8008c00:	2502      	movs	r5, #2
 8008c02:	f1b9 0f00 	cmp.w	r9, #0
 8008c06:	d047      	beq.n	8008c98 <__gethex+0x38c>
 8008c08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d015      	beq.n	8008c3c <__gethex+0x330>
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	d017      	beq.n	8008c44 <__gethex+0x338>
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d109      	bne.n	8008c2c <__gethex+0x320>
 8008c18:	f019 0f02 	tst.w	r9, #2
 8008c1c:	d006      	beq.n	8008c2c <__gethex+0x320>
 8008c1e:	f8da 3000 	ldr.w	r3, [sl]
 8008c22:	ea49 0903 	orr.w	r9, r9, r3
 8008c26:	f019 0f01 	tst.w	r9, #1
 8008c2a:	d10e      	bne.n	8008c4a <__gethex+0x33e>
 8008c2c:	f045 0510 	orr.w	r5, r5, #16
 8008c30:	e032      	b.n	8008c98 <__gethex+0x38c>
 8008c32:	f04f 0901 	mov.w	r9, #1
 8008c36:	e7d1      	b.n	8008bdc <__gethex+0x2d0>
 8008c38:	2501      	movs	r5, #1
 8008c3a:	e7e2      	b.n	8008c02 <__gethex+0x2f6>
 8008c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c3e:	f1c3 0301 	rsb	r3, r3, #1
 8008c42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0f0      	beq.n	8008c2c <__gethex+0x320>
 8008c4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c4e:	f104 0314 	add.w	r3, r4, #20
 8008c52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c5a:	f04f 0c00 	mov.w	ip, #0
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c68:	d01b      	beq.n	8008ca2 <__gethex+0x396>
 8008c6a:	3201      	adds	r2, #1
 8008c6c:	6002      	str	r2, [r0, #0]
 8008c6e:	2d02      	cmp	r5, #2
 8008c70:	f104 0314 	add.w	r3, r4, #20
 8008c74:	d13c      	bne.n	8008cf0 <__gethex+0x3e4>
 8008c76:	f8d8 2000 	ldr.w	r2, [r8]
 8008c7a:	3a01      	subs	r2, #1
 8008c7c:	42b2      	cmp	r2, r6
 8008c7e:	d109      	bne.n	8008c94 <__gethex+0x388>
 8008c80:	1171      	asrs	r1, r6, #5
 8008c82:	2201      	movs	r2, #1
 8008c84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c88:	f006 061f 	and.w	r6, r6, #31
 8008c8c:	fa02 f606 	lsl.w	r6, r2, r6
 8008c90:	421e      	tst	r6, r3
 8008c92:	d13a      	bne.n	8008d0a <__gethex+0x3fe>
 8008c94:	f045 0520 	orr.w	r5, r5, #32
 8008c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c9a:	601c      	str	r4, [r3, #0]
 8008c9c:	9b02      	ldr	r3, [sp, #8]
 8008c9e:	601f      	str	r7, [r3, #0]
 8008ca0:	e6b0      	b.n	8008a04 <__gethex+0xf8>
 8008ca2:	4299      	cmp	r1, r3
 8008ca4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ca8:	d8d9      	bhi.n	8008c5e <__gethex+0x352>
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	459b      	cmp	fp, r3
 8008cae:	db17      	blt.n	8008ce0 <__gethex+0x3d4>
 8008cb0:	6861      	ldr	r1, [r4, #4]
 8008cb2:	9801      	ldr	r0, [sp, #4]
 8008cb4:	3101      	adds	r1, #1
 8008cb6:	f7fe f803 	bl	8006cc0 <_Balloc>
 8008cba:	4681      	mov	r9, r0
 8008cbc:	b918      	cbnz	r0, 8008cc6 <__gethex+0x3ba>
 8008cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8008d28 <__gethex+0x41c>)
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	2184      	movs	r1, #132	@ 0x84
 8008cc4:	e6c5      	b.n	8008a52 <__gethex+0x146>
 8008cc6:	6922      	ldr	r2, [r4, #16]
 8008cc8:	3202      	adds	r2, #2
 8008cca:	f104 010c 	add.w	r1, r4, #12
 8008cce:	0092      	lsls	r2, r2, #2
 8008cd0:	300c      	adds	r0, #12
 8008cd2:	f7ff fd6b 	bl	80087ac <memcpy>
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	9801      	ldr	r0, [sp, #4]
 8008cda:	f7fe f831 	bl	8006d40 <_Bfree>
 8008cde:	464c      	mov	r4, r9
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ce8:	6122      	str	r2, [r4, #16]
 8008cea:	2201      	movs	r2, #1
 8008cec:	615a      	str	r2, [r3, #20]
 8008cee:	e7be      	b.n	8008c6e <__gethex+0x362>
 8008cf0:	6922      	ldr	r2, [r4, #16]
 8008cf2:	455a      	cmp	r2, fp
 8008cf4:	dd0b      	ble.n	8008d0e <__gethex+0x402>
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f7ff fd9f 	bl	800883c <rshift>
 8008cfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d02:	3701      	adds	r7, #1
 8008d04:	42bb      	cmp	r3, r7
 8008d06:	f6ff aee0 	blt.w	8008aca <__gethex+0x1be>
 8008d0a:	2501      	movs	r5, #1
 8008d0c:	e7c2      	b.n	8008c94 <__gethex+0x388>
 8008d0e:	f016 061f 	ands.w	r6, r6, #31
 8008d12:	d0fa      	beq.n	8008d0a <__gethex+0x3fe>
 8008d14:	4453      	add	r3, sl
 8008d16:	f1c6 0620 	rsb	r6, r6, #32
 8008d1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d1e:	f7fe f8c1 	bl	8006ea4 <__hi0bits>
 8008d22:	42b0      	cmp	r0, r6
 8008d24:	dbe7      	blt.n	8008cf6 <__gethex+0x3ea>
 8008d26:	e7f0      	b.n	8008d0a <__gethex+0x3fe>
 8008d28:	08009609 	.word	0x08009609

08008d2c <L_shift>:
 8008d2c:	f1c2 0208 	rsb	r2, r2, #8
 8008d30:	0092      	lsls	r2, r2, #2
 8008d32:	b570      	push	{r4, r5, r6, lr}
 8008d34:	f1c2 0620 	rsb	r6, r2, #32
 8008d38:	6843      	ldr	r3, [r0, #4]
 8008d3a:	6804      	ldr	r4, [r0, #0]
 8008d3c:	fa03 f506 	lsl.w	r5, r3, r6
 8008d40:	432c      	orrs	r4, r5
 8008d42:	40d3      	lsrs	r3, r2
 8008d44:	6004      	str	r4, [r0, #0]
 8008d46:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d4a:	4288      	cmp	r0, r1
 8008d4c:	d3f4      	bcc.n	8008d38 <L_shift+0xc>
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}

08008d50 <__match>:
 8008d50:	b530      	push	{r4, r5, lr}
 8008d52:	6803      	ldr	r3, [r0, #0]
 8008d54:	3301      	adds	r3, #1
 8008d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d5a:	b914      	cbnz	r4, 8008d62 <__match+0x12>
 8008d5c:	6003      	str	r3, [r0, #0]
 8008d5e:	2001      	movs	r0, #1
 8008d60:	bd30      	pop	{r4, r5, pc}
 8008d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008d6a:	2d19      	cmp	r5, #25
 8008d6c:	bf98      	it	ls
 8008d6e:	3220      	addls	r2, #32
 8008d70:	42a2      	cmp	r2, r4
 8008d72:	d0f0      	beq.n	8008d56 <__match+0x6>
 8008d74:	2000      	movs	r0, #0
 8008d76:	e7f3      	b.n	8008d60 <__match+0x10>

08008d78 <__hexnan>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	680b      	ldr	r3, [r1, #0]
 8008d7e:	6801      	ldr	r1, [r0, #0]
 8008d80:	115e      	asrs	r6, r3, #5
 8008d82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d86:	f013 031f 	ands.w	r3, r3, #31
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	bf18      	it	ne
 8008d8e:	3604      	addne	r6, #4
 8008d90:	2500      	movs	r5, #0
 8008d92:	1f37      	subs	r7, r6, #4
 8008d94:	4682      	mov	sl, r0
 8008d96:	4690      	mov	r8, r2
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d9e:	46b9      	mov	r9, r7
 8008da0:	463c      	mov	r4, r7
 8008da2:	9502      	str	r5, [sp, #8]
 8008da4:	46ab      	mov	fp, r5
 8008da6:	784a      	ldrb	r2, [r1, #1]
 8008da8:	1c4b      	adds	r3, r1, #1
 8008daa:	9303      	str	r3, [sp, #12]
 8008dac:	b342      	cbz	r2, 8008e00 <__hexnan+0x88>
 8008dae:	4610      	mov	r0, r2
 8008db0:	9105      	str	r1, [sp, #20]
 8008db2:	9204      	str	r2, [sp, #16]
 8008db4:	f7ff fd94 	bl	80088e0 <__hexdig_fun>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d151      	bne.n	8008e60 <__hexnan+0xe8>
 8008dbc:	9a04      	ldr	r2, [sp, #16]
 8008dbe:	9905      	ldr	r1, [sp, #20]
 8008dc0:	2a20      	cmp	r2, #32
 8008dc2:	d818      	bhi.n	8008df6 <__hexnan+0x7e>
 8008dc4:	9b02      	ldr	r3, [sp, #8]
 8008dc6:	459b      	cmp	fp, r3
 8008dc8:	dd13      	ble.n	8008df2 <__hexnan+0x7a>
 8008dca:	454c      	cmp	r4, r9
 8008dcc:	d206      	bcs.n	8008ddc <__hexnan+0x64>
 8008dce:	2d07      	cmp	r5, #7
 8008dd0:	dc04      	bgt.n	8008ddc <__hexnan+0x64>
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f7ff ffa8 	bl	8008d2c <L_shift>
 8008ddc:	4544      	cmp	r4, r8
 8008dde:	d952      	bls.n	8008e86 <__hexnan+0x10e>
 8008de0:	2300      	movs	r3, #0
 8008de2:	f1a4 0904 	sub.w	r9, r4, #4
 8008de6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dea:	f8cd b008 	str.w	fp, [sp, #8]
 8008dee:	464c      	mov	r4, r9
 8008df0:	461d      	mov	r5, r3
 8008df2:	9903      	ldr	r1, [sp, #12]
 8008df4:	e7d7      	b.n	8008da6 <__hexnan+0x2e>
 8008df6:	2a29      	cmp	r2, #41	@ 0x29
 8008df8:	d157      	bne.n	8008eaa <__hexnan+0x132>
 8008dfa:	3102      	adds	r1, #2
 8008dfc:	f8ca 1000 	str.w	r1, [sl]
 8008e00:	f1bb 0f00 	cmp.w	fp, #0
 8008e04:	d051      	beq.n	8008eaa <__hexnan+0x132>
 8008e06:	454c      	cmp	r4, r9
 8008e08:	d206      	bcs.n	8008e18 <__hexnan+0xa0>
 8008e0a:	2d07      	cmp	r5, #7
 8008e0c:	dc04      	bgt.n	8008e18 <__hexnan+0xa0>
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4649      	mov	r1, r9
 8008e12:	4620      	mov	r0, r4
 8008e14:	f7ff ff8a 	bl	8008d2c <L_shift>
 8008e18:	4544      	cmp	r4, r8
 8008e1a:	d936      	bls.n	8008e8a <__hexnan+0x112>
 8008e1c:	f1a8 0204 	sub.w	r2, r8, #4
 8008e20:	4623      	mov	r3, r4
 8008e22:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e26:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e2a:	429f      	cmp	r7, r3
 8008e2c:	d2f9      	bcs.n	8008e22 <__hexnan+0xaa>
 8008e2e:	1b3b      	subs	r3, r7, r4
 8008e30:	f023 0303 	bic.w	r3, r3, #3
 8008e34:	3304      	adds	r3, #4
 8008e36:	3401      	adds	r4, #1
 8008e38:	3e03      	subs	r6, #3
 8008e3a:	42b4      	cmp	r4, r6
 8008e3c:	bf88      	it	hi
 8008e3e:	2304      	movhi	r3, #4
 8008e40:	4443      	add	r3, r8
 8008e42:	2200      	movs	r2, #0
 8008e44:	f843 2b04 	str.w	r2, [r3], #4
 8008e48:	429f      	cmp	r7, r3
 8008e4a:	d2fb      	bcs.n	8008e44 <__hexnan+0xcc>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	b91b      	cbnz	r3, 8008e58 <__hexnan+0xe0>
 8008e50:	4547      	cmp	r7, r8
 8008e52:	d128      	bne.n	8008ea6 <__hexnan+0x12e>
 8008e54:	2301      	movs	r3, #1
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	2005      	movs	r0, #5
 8008e5a:	b007      	add	sp, #28
 8008e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e60:	3501      	adds	r5, #1
 8008e62:	2d08      	cmp	r5, #8
 8008e64:	f10b 0b01 	add.w	fp, fp, #1
 8008e68:	dd06      	ble.n	8008e78 <__hexnan+0x100>
 8008e6a:	4544      	cmp	r4, r8
 8008e6c:	d9c1      	bls.n	8008df2 <__hexnan+0x7a>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e74:	2501      	movs	r5, #1
 8008e76:	3c04      	subs	r4, #4
 8008e78:	6822      	ldr	r2, [r4, #0]
 8008e7a:	f000 000f 	and.w	r0, r0, #15
 8008e7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008e82:	6020      	str	r0, [r4, #0]
 8008e84:	e7b5      	b.n	8008df2 <__hexnan+0x7a>
 8008e86:	2508      	movs	r5, #8
 8008e88:	e7b3      	b.n	8008df2 <__hexnan+0x7a>
 8008e8a:	9b01      	ldr	r3, [sp, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0dd      	beq.n	8008e4c <__hexnan+0xd4>
 8008e90:	f1c3 0320 	rsb	r3, r3, #32
 8008e94:	f04f 32ff 	mov.w	r2, #4294967295
 8008e98:	40da      	lsrs	r2, r3
 8008e9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	f846 3c04 	str.w	r3, [r6, #-4]
 8008ea4:	e7d2      	b.n	8008e4c <__hexnan+0xd4>
 8008ea6:	3f04      	subs	r7, #4
 8008ea8:	e7d0      	b.n	8008e4c <__hexnan+0xd4>
 8008eaa:	2004      	movs	r0, #4
 8008eac:	e7d5      	b.n	8008e5a <__hexnan+0xe2>

08008eae <__ascii_mbtowc>:
 8008eae:	b082      	sub	sp, #8
 8008eb0:	b901      	cbnz	r1, 8008eb4 <__ascii_mbtowc+0x6>
 8008eb2:	a901      	add	r1, sp, #4
 8008eb4:	b142      	cbz	r2, 8008ec8 <__ascii_mbtowc+0x1a>
 8008eb6:	b14b      	cbz	r3, 8008ecc <__ascii_mbtowc+0x1e>
 8008eb8:	7813      	ldrb	r3, [r2, #0]
 8008eba:	600b      	str	r3, [r1, #0]
 8008ebc:	7812      	ldrb	r2, [r2, #0]
 8008ebe:	1e10      	subs	r0, r2, #0
 8008ec0:	bf18      	it	ne
 8008ec2:	2001      	movne	r0, #1
 8008ec4:	b002      	add	sp, #8
 8008ec6:	4770      	bx	lr
 8008ec8:	4610      	mov	r0, r2
 8008eca:	e7fb      	b.n	8008ec4 <__ascii_mbtowc+0x16>
 8008ecc:	f06f 0001 	mvn.w	r0, #1
 8008ed0:	e7f8      	b.n	8008ec4 <__ascii_mbtowc+0x16>

08008ed2 <_realloc_r>:
 8008ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed6:	4680      	mov	r8, r0
 8008ed8:	4615      	mov	r5, r2
 8008eda:	460c      	mov	r4, r1
 8008edc:	b921      	cbnz	r1, 8008ee8 <_realloc_r+0x16>
 8008ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	f7fd be60 	b.w	8006ba8 <_malloc_r>
 8008ee8:	b92a      	cbnz	r2, 8008ef6 <_realloc_r+0x24>
 8008eea:	f7fd fde9 	bl	8006ac0 <_free_r>
 8008eee:	2400      	movs	r4, #0
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef6:	f000 f840 	bl	8008f7a <_malloc_usable_size_r>
 8008efa:	4285      	cmp	r5, r0
 8008efc:	4606      	mov	r6, r0
 8008efe:	d802      	bhi.n	8008f06 <_realloc_r+0x34>
 8008f00:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f04:	d8f4      	bhi.n	8008ef0 <_realloc_r+0x1e>
 8008f06:	4629      	mov	r1, r5
 8008f08:	4640      	mov	r0, r8
 8008f0a:	f7fd fe4d 	bl	8006ba8 <_malloc_r>
 8008f0e:	4607      	mov	r7, r0
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d0ec      	beq.n	8008eee <_realloc_r+0x1c>
 8008f14:	42b5      	cmp	r5, r6
 8008f16:	462a      	mov	r2, r5
 8008f18:	4621      	mov	r1, r4
 8008f1a:	bf28      	it	cs
 8008f1c:	4632      	movcs	r2, r6
 8008f1e:	f7ff fc45 	bl	80087ac <memcpy>
 8008f22:	4621      	mov	r1, r4
 8008f24:	4640      	mov	r0, r8
 8008f26:	f7fd fdcb 	bl	8006ac0 <_free_r>
 8008f2a:	463c      	mov	r4, r7
 8008f2c:	e7e0      	b.n	8008ef0 <_realloc_r+0x1e>

08008f2e <__ascii_wctomb>:
 8008f2e:	4603      	mov	r3, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	b141      	cbz	r1, 8008f46 <__ascii_wctomb+0x18>
 8008f34:	2aff      	cmp	r2, #255	@ 0xff
 8008f36:	d904      	bls.n	8008f42 <__ascii_wctomb+0x14>
 8008f38:	228a      	movs	r2, #138	@ 0x8a
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	4770      	bx	lr
 8008f42:	700a      	strb	r2, [r1, #0]
 8008f44:	2001      	movs	r0, #1
 8008f46:	4770      	bx	lr

08008f48 <fiprintf>:
 8008f48:	b40e      	push	{r1, r2, r3}
 8008f4a:	b503      	push	{r0, r1, lr}
 8008f4c:	4601      	mov	r1, r0
 8008f4e:	ab03      	add	r3, sp, #12
 8008f50:	4805      	ldr	r0, [pc, #20]	@ (8008f68 <fiprintf+0x20>)
 8008f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f56:	6800      	ldr	r0, [r0, #0]
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	f000 f83f 	bl	8008fdc <_vfiprintf_r>
 8008f5e:	b002      	add	sp, #8
 8008f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f64:	b003      	add	sp, #12
 8008f66:	4770      	bx	lr
 8008f68:	20000018 	.word	0x20000018

08008f6c <abort>:
 8008f6c:	b508      	push	{r3, lr}
 8008f6e:	2006      	movs	r0, #6
 8008f70:	f000 fa08 	bl	8009384 <raise>
 8008f74:	2001      	movs	r0, #1
 8008f76:	f7f8 fdc2 	bl	8001afe <_exit>

08008f7a <_malloc_usable_size_r>:
 8008f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f7e:	1f18      	subs	r0, r3, #4
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	bfbc      	itt	lt
 8008f84:	580b      	ldrlt	r3, [r1, r0]
 8008f86:	18c0      	addlt	r0, r0, r3
 8008f88:	4770      	bx	lr

08008f8a <__sfputc_r>:
 8008f8a:	6893      	ldr	r3, [r2, #8]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	b410      	push	{r4}
 8008f92:	6093      	str	r3, [r2, #8]
 8008f94:	da08      	bge.n	8008fa8 <__sfputc_r+0x1e>
 8008f96:	6994      	ldr	r4, [r2, #24]
 8008f98:	42a3      	cmp	r3, r4
 8008f9a:	db01      	blt.n	8008fa0 <__sfputc_r+0x16>
 8008f9c:	290a      	cmp	r1, #10
 8008f9e:	d103      	bne.n	8008fa8 <__sfputc_r+0x1e>
 8008fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fa4:	f000 b932 	b.w	800920c <__swbuf_r>
 8008fa8:	6813      	ldr	r3, [r2, #0]
 8008faa:	1c58      	adds	r0, r3, #1
 8008fac:	6010      	str	r0, [r2, #0]
 8008fae:	7019      	strb	r1, [r3, #0]
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <__sfputs_r>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	4606      	mov	r6, r0
 8008fbc:	460f      	mov	r7, r1
 8008fbe:	4614      	mov	r4, r2
 8008fc0:	18d5      	adds	r5, r2, r3
 8008fc2:	42ac      	cmp	r4, r5
 8008fc4:	d101      	bne.n	8008fca <__sfputs_r+0x12>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e007      	b.n	8008fda <__sfputs_r+0x22>
 8008fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fce:	463a      	mov	r2, r7
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	f7ff ffda 	bl	8008f8a <__sfputc_r>
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	d1f3      	bne.n	8008fc2 <__sfputs_r+0xa>
 8008fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fdc <_vfiprintf_r>:
 8008fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe0:	460d      	mov	r5, r1
 8008fe2:	b09d      	sub	sp, #116	@ 0x74
 8008fe4:	4614      	mov	r4, r2
 8008fe6:	4698      	mov	r8, r3
 8008fe8:	4606      	mov	r6, r0
 8008fea:	b118      	cbz	r0, 8008ff4 <_vfiprintf_r+0x18>
 8008fec:	6a03      	ldr	r3, [r0, #32]
 8008fee:	b90b      	cbnz	r3, 8008ff4 <_vfiprintf_r+0x18>
 8008ff0:	f7fc fdc4 	bl	8005b7c <__sinit>
 8008ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ff6:	07d9      	lsls	r1, r3, #31
 8008ff8:	d405      	bmi.n	8009006 <_vfiprintf_r+0x2a>
 8008ffa:	89ab      	ldrh	r3, [r5, #12]
 8008ffc:	059a      	lsls	r2, r3, #22
 8008ffe:	d402      	bmi.n	8009006 <_vfiprintf_r+0x2a>
 8009000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009002:	f7fc ff06 	bl	8005e12 <__retarget_lock_acquire_recursive>
 8009006:	89ab      	ldrh	r3, [r5, #12]
 8009008:	071b      	lsls	r3, r3, #28
 800900a:	d501      	bpl.n	8009010 <_vfiprintf_r+0x34>
 800900c:	692b      	ldr	r3, [r5, #16]
 800900e:	b99b      	cbnz	r3, 8009038 <_vfiprintf_r+0x5c>
 8009010:	4629      	mov	r1, r5
 8009012:	4630      	mov	r0, r6
 8009014:	f000 f938 	bl	8009288 <__swsetup_r>
 8009018:	b170      	cbz	r0, 8009038 <_vfiprintf_r+0x5c>
 800901a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800901c:	07dc      	lsls	r4, r3, #31
 800901e:	d504      	bpl.n	800902a <_vfiprintf_r+0x4e>
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
 8009024:	b01d      	add	sp, #116	@ 0x74
 8009026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	0598      	lsls	r0, r3, #22
 800902e:	d4f7      	bmi.n	8009020 <_vfiprintf_r+0x44>
 8009030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009032:	f7fc feef 	bl	8005e14 <__retarget_lock_release_recursive>
 8009036:	e7f3      	b.n	8009020 <_vfiprintf_r+0x44>
 8009038:	2300      	movs	r3, #0
 800903a:	9309      	str	r3, [sp, #36]	@ 0x24
 800903c:	2320      	movs	r3, #32
 800903e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009042:	f8cd 800c 	str.w	r8, [sp, #12]
 8009046:	2330      	movs	r3, #48	@ 0x30
 8009048:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80091f8 <_vfiprintf_r+0x21c>
 800904c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009050:	f04f 0901 	mov.w	r9, #1
 8009054:	4623      	mov	r3, r4
 8009056:	469a      	mov	sl, r3
 8009058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800905c:	b10a      	cbz	r2, 8009062 <_vfiprintf_r+0x86>
 800905e:	2a25      	cmp	r2, #37	@ 0x25
 8009060:	d1f9      	bne.n	8009056 <_vfiprintf_r+0x7a>
 8009062:	ebba 0b04 	subs.w	fp, sl, r4
 8009066:	d00b      	beq.n	8009080 <_vfiprintf_r+0xa4>
 8009068:	465b      	mov	r3, fp
 800906a:	4622      	mov	r2, r4
 800906c:	4629      	mov	r1, r5
 800906e:	4630      	mov	r0, r6
 8009070:	f7ff ffa2 	bl	8008fb8 <__sfputs_r>
 8009074:	3001      	adds	r0, #1
 8009076:	f000 80a7 	beq.w	80091c8 <_vfiprintf_r+0x1ec>
 800907a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800907c:	445a      	add	r2, fp
 800907e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009080:	f89a 3000 	ldrb.w	r3, [sl]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 809f 	beq.w	80091c8 <_vfiprintf_r+0x1ec>
 800908a:	2300      	movs	r3, #0
 800908c:	f04f 32ff 	mov.w	r2, #4294967295
 8009090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009094:	f10a 0a01 	add.w	sl, sl, #1
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	9307      	str	r3, [sp, #28]
 800909c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80090a2:	4654      	mov	r4, sl
 80090a4:	2205      	movs	r2, #5
 80090a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090aa:	4853      	ldr	r0, [pc, #332]	@ (80091f8 <_vfiprintf_r+0x21c>)
 80090ac:	f7f7 f890 	bl	80001d0 <memchr>
 80090b0:	9a04      	ldr	r2, [sp, #16]
 80090b2:	b9d8      	cbnz	r0, 80090ec <_vfiprintf_r+0x110>
 80090b4:	06d1      	lsls	r1, r2, #27
 80090b6:	bf44      	itt	mi
 80090b8:	2320      	movmi	r3, #32
 80090ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090be:	0713      	lsls	r3, r2, #28
 80090c0:	bf44      	itt	mi
 80090c2:	232b      	movmi	r3, #43	@ 0x2b
 80090c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090c8:	f89a 3000 	ldrb.w	r3, [sl]
 80090cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ce:	d015      	beq.n	80090fc <_vfiprintf_r+0x120>
 80090d0:	9a07      	ldr	r2, [sp, #28]
 80090d2:	4654      	mov	r4, sl
 80090d4:	2000      	movs	r0, #0
 80090d6:	f04f 0c0a 	mov.w	ip, #10
 80090da:	4621      	mov	r1, r4
 80090dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090e0:	3b30      	subs	r3, #48	@ 0x30
 80090e2:	2b09      	cmp	r3, #9
 80090e4:	d94b      	bls.n	800917e <_vfiprintf_r+0x1a2>
 80090e6:	b1b0      	cbz	r0, 8009116 <_vfiprintf_r+0x13a>
 80090e8:	9207      	str	r2, [sp, #28]
 80090ea:	e014      	b.n	8009116 <_vfiprintf_r+0x13a>
 80090ec:	eba0 0308 	sub.w	r3, r0, r8
 80090f0:	fa09 f303 	lsl.w	r3, r9, r3
 80090f4:	4313      	orrs	r3, r2
 80090f6:	9304      	str	r3, [sp, #16]
 80090f8:	46a2      	mov	sl, r4
 80090fa:	e7d2      	b.n	80090a2 <_vfiprintf_r+0xc6>
 80090fc:	9b03      	ldr	r3, [sp, #12]
 80090fe:	1d19      	adds	r1, r3, #4
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	9103      	str	r1, [sp, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	bfbb      	ittet	lt
 8009108:	425b      	neglt	r3, r3
 800910a:	f042 0202 	orrlt.w	r2, r2, #2
 800910e:	9307      	strge	r3, [sp, #28]
 8009110:	9307      	strlt	r3, [sp, #28]
 8009112:	bfb8      	it	lt
 8009114:	9204      	strlt	r2, [sp, #16]
 8009116:	7823      	ldrb	r3, [r4, #0]
 8009118:	2b2e      	cmp	r3, #46	@ 0x2e
 800911a:	d10a      	bne.n	8009132 <_vfiprintf_r+0x156>
 800911c:	7863      	ldrb	r3, [r4, #1]
 800911e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009120:	d132      	bne.n	8009188 <_vfiprintf_r+0x1ac>
 8009122:	9b03      	ldr	r3, [sp, #12]
 8009124:	1d1a      	adds	r2, r3, #4
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	9203      	str	r2, [sp, #12]
 800912a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800912e:	3402      	adds	r4, #2
 8009130:	9305      	str	r3, [sp, #20]
 8009132:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009208 <_vfiprintf_r+0x22c>
 8009136:	7821      	ldrb	r1, [r4, #0]
 8009138:	2203      	movs	r2, #3
 800913a:	4650      	mov	r0, sl
 800913c:	f7f7 f848 	bl	80001d0 <memchr>
 8009140:	b138      	cbz	r0, 8009152 <_vfiprintf_r+0x176>
 8009142:	9b04      	ldr	r3, [sp, #16]
 8009144:	eba0 000a 	sub.w	r0, r0, sl
 8009148:	2240      	movs	r2, #64	@ 0x40
 800914a:	4082      	lsls	r2, r0
 800914c:	4313      	orrs	r3, r2
 800914e:	3401      	adds	r4, #1
 8009150:	9304      	str	r3, [sp, #16]
 8009152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009156:	4829      	ldr	r0, [pc, #164]	@ (80091fc <_vfiprintf_r+0x220>)
 8009158:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800915c:	2206      	movs	r2, #6
 800915e:	f7f7 f837 	bl	80001d0 <memchr>
 8009162:	2800      	cmp	r0, #0
 8009164:	d03f      	beq.n	80091e6 <_vfiprintf_r+0x20a>
 8009166:	4b26      	ldr	r3, [pc, #152]	@ (8009200 <_vfiprintf_r+0x224>)
 8009168:	bb1b      	cbnz	r3, 80091b2 <_vfiprintf_r+0x1d6>
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	3307      	adds	r3, #7
 800916e:	f023 0307 	bic.w	r3, r3, #7
 8009172:	3308      	adds	r3, #8
 8009174:	9303      	str	r3, [sp, #12]
 8009176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009178:	443b      	add	r3, r7
 800917a:	9309      	str	r3, [sp, #36]	@ 0x24
 800917c:	e76a      	b.n	8009054 <_vfiprintf_r+0x78>
 800917e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009182:	460c      	mov	r4, r1
 8009184:	2001      	movs	r0, #1
 8009186:	e7a8      	b.n	80090da <_vfiprintf_r+0xfe>
 8009188:	2300      	movs	r3, #0
 800918a:	3401      	adds	r4, #1
 800918c:	9305      	str	r3, [sp, #20]
 800918e:	4619      	mov	r1, r3
 8009190:	f04f 0c0a 	mov.w	ip, #10
 8009194:	4620      	mov	r0, r4
 8009196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800919a:	3a30      	subs	r2, #48	@ 0x30
 800919c:	2a09      	cmp	r2, #9
 800919e:	d903      	bls.n	80091a8 <_vfiprintf_r+0x1cc>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d0c6      	beq.n	8009132 <_vfiprintf_r+0x156>
 80091a4:	9105      	str	r1, [sp, #20]
 80091a6:	e7c4      	b.n	8009132 <_vfiprintf_r+0x156>
 80091a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80091ac:	4604      	mov	r4, r0
 80091ae:	2301      	movs	r3, #1
 80091b0:	e7f0      	b.n	8009194 <_vfiprintf_r+0x1b8>
 80091b2:	ab03      	add	r3, sp, #12
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	462a      	mov	r2, r5
 80091b8:	4b12      	ldr	r3, [pc, #72]	@ (8009204 <_vfiprintf_r+0x228>)
 80091ba:	a904      	add	r1, sp, #16
 80091bc:	4630      	mov	r0, r6
 80091be:	f7fb fe85 	bl	8004ecc <_printf_float>
 80091c2:	4607      	mov	r7, r0
 80091c4:	1c78      	adds	r0, r7, #1
 80091c6:	d1d6      	bne.n	8009176 <_vfiprintf_r+0x19a>
 80091c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ca:	07d9      	lsls	r1, r3, #31
 80091cc:	d405      	bmi.n	80091da <_vfiprintf_r+0x1fe>
 80091ce:	89ab      	ldrh	r3, [r5, #12]
 80091d0:	059a      	lsls	r2, r3, #22
 80091d2:	d402      	bmi.n	80091da <_vfiprintf_r+0x1fe>
 80091d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091d6:	f7fc fe1d 	bl	8005e14 <__retarget_lock_release_recursive>
 80091da:	89ab      	ldrh	r3, [r5, #12]
 80091dc:	065b      	lsls	r3, r3, #25
 80091de:	f53f af1f 	bmi.w	8009020 <_vfiprintf_r+0x44>
 80091e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091e4:	e71e      	b.n	8009024 <_vfiprintf_r+0x48>
 80091e6:	ab03      	add	r3, sp, #12
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	462a      	mov	r2, r5
 80091ec:	4b05      	ldr	r3, [pc, #20]	@ (8009204 <_vfiprintf_r+0x228>)
 80091ee:	a904      	add	r1, sp, #16
 80091f0:	4630      	mov	r0, r6
 80091f2:	f7fc f903 	bl	80053fc <_printf_i>
 80091f6:	e7e4      	b.n	80091c2 <_vfiprintf_r+0x1e6>
 80091f8:	080098c9 	.word	0x080098c9
 80091fc:	080098d3 	.word	0x080098d3
 8009200:	08004ecd 	.word	0x08004ecd
 8009204:	08008fb9 	.word	0x08008fb9
 8009208:	080098cf 	.word	0x080098cf

0800920c <__swbuf_r>:
 800920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920e:	460e      	mov	r6, r1
 8009210:	4614      	mov	r4, r2
 8009212:	4605      	mov	r5, r0
 8009214:	b118      	cbz	r0, 800921e <__swbuf_r+0x12>
 8009216:	6a03      	ldr	r3, [r0, #32]
 8009218:	b90b      	cbnz	r3, 800921e <__swbuf_r+0x12>
 800921a:	f7fc fcaf 	bl	8005b7c <__sinit>
 800921e:	69a3      	ldr	r3, [r4, #24]
 8009220:	60a3      	str	r3, [r4, #8]
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	071a      	lsls	r2, r3, #28
 8009226:	d501      	bpl.n	800922c <__swbuf_r+0x20>
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	b943      	cbnz	r3, 800923e <__swbuf_r+0x32>
 800922c:	4621      	mov	r1, r4
 800922e:	4628      	mov	r0, r5
 8009230:	f000 f82a 	bl	8009288 <__swsetup_r>
 8009234:	b118      	cbz	r0, 800923e <__swbuf_r+0x32>
 8009236:	f04f 37ff 	mov.w	r7, #4294967295
 800923a:	4638      	mov	r0, r7
 800923c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	6922      	ldr	r2, [r4, #16]
 8009242:	1a98      	subs	r0, r3, r2
 8009244:	6963      	ldr	r3, [r4, #20]
 8009246:	b2f6      	uxtb	r6, r6
 8009248:	4283      	cmp	r3, r0
 800924a:	4637      	mov	r7, r6
 800924c:	dc05      	bgt.n	800925a <__swbuf_r+0x4e>
 800924e:	4621      	mov	r1, r4
 8009250:	4628      	mov	r0, r5
 8009252:	f7ff fa47 	bl	80086e4 <_fflush_r>
 8009256:	2800      	cmp	r0, #0
 8009258:	d1ed      	bne.n	8009236 <__swbuf_r+0x2a>
 800925a:	68a3      	ldr	r3, [r4, #8]
 800925c:	3b01      	subs	r3, #1
 800925e:	60a3      	str	r3, [r4, #8]
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	1c5a      	adds	r2, r3, #1
 8009264:	6022      	str	r2, [r4, #0]
 8009266:	701e      	strb	r6, [r3, #0]
 8009268:	6962      	ldr	r2, [r4, #20]
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	429a      	cmp	r2, r3
 800926e:	d004      	beq.n	800927a <__swbuf_r+0x6e>
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	07db      	lsls	r3, r3, #31
 8009274:	d5e1      	bpl.n	800923a <__swbuf_r+0x2e>
 8009276:	2e0a      	cmp	r6, #10
 8009278:	d1df      	bne.n	800923a <__swbuf_r+0x2e>
 800927a:	4621      	mov	r1, r4
 800927c:	4628      	mov	r0, r5
 800927e:	f7ff fa31 	bl	80086e4 <_fflush_r>
 8009282:	2800      	cmp	r0, #0
 8009284:	d0d9      	beq.n	800923a <__swbuf_r+0x2e>
 8009286:	e7d6      	b.n	8009236 <__swbuf_r+0x2a>

08009288 <__swsetup_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4b29      	ldr	r3, [pc, #164]	@ (8009330 <__swsetup_r+0xa8>)
 800928c:	4605      	mov	r5, r0
 800928e:	6818      	ldr	r0, [r3, #0]
 8009290:	460c      	mov	r4, r1
 8009292:	b118      	cbz	r0, 800929c <__swsetup_r+0x14>
 8009294:	6a03      	ldr	r3, [r0, #32]
 8009296:	b90b      	cbnz	r3, 800929c <__swsetup_r+0x14>
 8009298:	f7fc fc70 	bl	8005b7c <__sinit>
 800929c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a0:	0719      	lsls	r1, r3, #28
 80092a2:	d422      	bmi.n	80092ea <__swsetup_r+0x62>
 80092a4:	06da      	lsls	r2, r3, #27
 80092a6:	d407      	bmi.n	80092b8 <__swsetup_r+0x30>
 80092a8:	2209      	movs	r2, #9
 80092aa:	602a      	str	r2, [r5, #0]
 80092ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092b0:	81a3      	strh	r3, [r4, #12]
 80092b2:	f04f 30ff 	mov.w	r0, #4294967295
 80092b6:	e033      	b.n	8009320 <__swsetup_r+0x98>
 80092b8:	0758      	lsls	r0, r3, #29
 80092ba:	d512      	bpl.n	80092e2 <__swsetup_r+0x5a>
 80092bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092be:	b141      	cbz	r1, 80092d2 <__swsetup_r+0x4a>
 80092c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092c4:	4299      	cmp	r1, r3
 80092c6:	d002      	beq.n	80092ce <__swsetup_r+0x46>
 80092c8:	4628      	mov	r0, r5
 80092ca:	f7fd fbf9 	bl	8006ac0 <_free_r>
 80092ce:	2300      	movs	r3, #0
 80092d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	2300      	movs	r3, #0
 80092dc:	6063      	str	r3, [r4, #4]
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f043 0308 	orr.w	r3, r3, #8
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	6923      	ldr	r3, [r4, #16]
 80092ec:	b94b      	cbnz	r3, 8009302 <__swsetup_r+0x7a>
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092f8:	d003      	beq.n	8009302 <__swsetup_r+0x7a>
 80092fa:	4621      	mov	r1, r4
 80092fc:	4628      	mov	r0, r5
 80092fe:	f000 f883 	bl	8009408 <__smakebuf_r>
 8009302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009306:	f013 0201 	ands.w	r2, r3, #1
 800930a:	d00a      	beq.n	8009322 <__swsetup_r+0x9a>
 800930c:	2200      	movs	r2, #0
 800930e:	60a2      	str	r2, [r4, #8]
 8009310:	6962      	ldr	r2, [r4, #20]
 8009312:	4252      	negs	r2, r2
 8009314:	61a2      	str	r2, [r4, #24]
 8009316:	6922      	ldr	r2, [r4, #16]
 8009318:	b942      	cbnz	r2, 800932c <__swsetup_r+0xa4>
 800931a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800931e:	d1c5      	bne.n	80092ac <__swsetup_r+0x24>
 8009320:	bd38      	pop	{r3, r4, r5, pc}
 8009322:	0799      	lsls	r1, r3, #30
 8009324:	bf58      	it	pl
 8009326:	6962      	ldrpl	r2, [r4, #20]
 8009328:	60a2      	str	r2, [r4, #8]
 800932a:	e7f4      	b.n	8009316 <__swsetup_r+0x8e>
 800932c:	2000      	movs	r0, #0
 800932e:	e7f7      	b.n	8009320 <__swsetup_r+0x98>
 8009330:	20000018 	.word	0x20000018

08009334 <_raise_r>:
 8009334:	291f      	cmp	r1, #31
 8009336:	b538      	push	{r3, r4, r5, lr}
 8009338:	4605      	mov	r5, r0
 800933a:	460c      	mov	r4, r1
 800933c:	d904      	bls.n	8009348 <_raise_r+0x14>
 800933e:	2316      	movs	r3, #22
 8009340:	6003      	str	r3, [r0, #0]
 8009342:	f04f 30ff 	mov.w	r0, #4294967295
 8009346:	bd38      	pop	{r3, r4, r5, pc}
 8009348:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800934a:	b112      	cbz	r2, 8009352 <_raise_r+0x1e>
 800934c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009350:	b94b      	cbnz	r3, 8009366 <_raise_r+0x32>
 8009352:	4628      	mov	r0, r5
 8009354:	f000 f830 	bl	80093b8 <_getpid_r>
 8009358:	4622      	mov	r2, r4
 800935a:	4601      	mov	r1, r0
 800935c:	4628      	mov	r0, r5
 800935e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009362:	f000 b817 	b.w	8009394 <_kill_r>
 8009366:	2b01      	cmp	r3, #1
 8009368:	d00a      	beq.n	8009380 <_raise_r+0x4c>
 800936a:	1c59      	adds	r1, r3, #1
 800936c:	d103      	bne.n	8009376 <_raise_r+0x42>
 800936e:	2316      	movs	r3, #22
 8009370:	6003      	str	r3, [r0, #0]
 8009372:	2001      	movs	r0, #1
 8009374:	e7e7      	b.n	8009346 <_raise_r+0x12>
 8009376:	2100      	movs	r1, #0
 8009378:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800937c:	4620      	mov	r0, r4
 800937e:	4798      	blx	r3
 8009380:	2000      	movs	r0, #0
 8009382:	e7e0      	b.n	8009346 <_raise_r+0x12>

08009384 <raise>:
 8009384:	4b02      	ldr	r3, [pc, #8]	@ (8009390 <raise+0xc>)
 8009386:	4601      	mov	r1, r0
 8009388:	6818      	ldr	r0, [r3, #0]
 800938a:	f7ff bfd3 	b.w	8009334 <_raise_r>
 800938e:	bf00      	nop
 8009390:	20000018 	.word	0x20000018

08009394 <_kill_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	@ (80093b4 <_kill_r+0x20>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	f7f8 fb9c 	bl	8001ade <_kill>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d102      	bne.n	80093b0 <_kill_r+0x1c>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	b103      	cbz	r3, 80093b0 <_kill_r+0x1c>
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	bd38      	pop	{r3, r4, r5, pc}
 80093b2:	bf00      	nop
 80093b4:	20000410 	.word	0x20000410

080093b8 <_getpid_r>:
 80093b8:	f7f8 bb89 	b.w	8001ace <_getpid>

080093bc <__swhatbuf_r>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	460c      	mov	r4, r1
 80093c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c4:	2900      	cmp	r1, #0
 80093c6:	b096      	sub	sp, #88	@ 0x58
 80093c8:	4615      	mov	r5, r2
 80093ca:	461e      	mov	r6, r3
 80093cc:	da0d      	bge.n	80093ea <__swhatbuf_r+0x2e>
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093d4:	f04f 0100 	mov.w	r1, #0
 80093d8:	bf14      	ite	ne
 80093da:	2340      	movne	r3, #64	@ 0x40
 80093dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093e0:	2000      	movs	r0, #0
 80093e2:	6031      	str	r1, [r6, #0]
 80093e4:	602b      	str	r3, [r5, #0]
 80093e6:	b016      	add	sp, #88	@ 0x58
 80093e8:	bd70      	pop	{r4, r5, r6, pc}
 80093ea:	466a      	mov	r2, sp
 80093ec:	f000 f848 	bl	8009480 <_fstat_r>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	dbec      	blt.n	80093ce <__swhatbuf_r+0x12>
 80093f4:	9901      	ldr	r1, [sp, #4]
 80093f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093fe:	4259      	negs	r1, r3
 8009400:	4159      	adcs	r1, r3
 8009402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009406:	e7eb      	b.n	80093e0 <__swhatbuf_r+0x24>

08009408 <__smakebuf_r>:
 8009408:	898b      	ldrh	r3, [r1, #12]
 800940a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800940c:	079d      	lsls	r5, r3, #30
 800940e:	4606      	mov	r6, r0
 8009410:	460c      	mov	r4, r1
 8009412:	d507      	bpl.n	8009424 <__smakebuf_r+0x1c>
 8009414:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	6123      	str	r3, [r4, #16]
 800941c:	2301      	movs	r3, #1
 800941e:	6163      	str	r3, [r4, #20]
 8009420:	b003      	add	sp, #12
 8009422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009424:	ab01      	add	r3, sp, #4
 8009426:	466a      	mov	r2, sp
 8009428:	f7ff ffc8 	bl	80093bc <__swhatbuf_r>
 800942c:	9f00      	ldr	r7, [sp, #0]
 800942e:	4605      	mov	r5, r0
 8009430:	4639      	mov	r1, r7
 8009432:	4630      	mov	r0, r6
 8009434:	f7fd fbb8 	bl	8006ba8 <_malloc_r>
 8009438:	b948      	cbnz	r0, 800944e <__smakebuf_r+0x46>
 800943a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800943e:	059a      	lsls	r2, r3, #22
 8009440:	d4ee      	bmi.n	8009420 <__smakebuf_r+0x18>
 8009442:	f023 0303 	bic.w	r3, r3, #3
 8009446:	f043 0302 	orr.w	r3, r3, #2
 800944a:	81a3      	strh	r3, [r4, #12]
 800944c:	e7e2      	b.n	8009414 <__smakebuf_r+0xc>
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	6020      	str	r0, [r4, #0]
 8009452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009456:	81a3      	strh	r3, [r4, #12]
 8009458:	9b01      	ldr	r3, [sp, #4]
 800945a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800945e:	b15b      	cbz	r3, 8009478 <__smakebuf_r+0x70>
 8009460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009464:	4630      	mov	r0, r6
 8009466:	f000 f81d 	bl	80094a4 <_isatty_r>
 800946a:	b128      	cbz	r0, 8009478 <__smakebuf_r+0x70>
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	f043 0301 	orr.w	r3, r3, #1
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	431d      	orrs	r5, r3
 800947c:	81a5      	strh	r5, [r4, #12]
 800947e:	e7cf      	b.n	8009420 <__smakebuf_r+0x18>

08009480 <_fstat_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4d07      	ldr	r5, [pc, #28]	@ (80094a0 <_fstat_r+0x20>)
 8009484:	2300      	movs	r3, #0
 8009486:	4604      	mov	r4, r0
 8009488:	4608      	mov	r0, r1
 800948a:	4611      	mov	r1, r2
 800948c:	602b      	str	r3, [r5, #0]
 800948e:	f7f8 fb86 	bl	8001b9e <_fstat>
 8009492:	1c43      	adds	r3, r0, #1
 8009494:	d102      	bne.n	800949c <_fstat_r+0x1c>
 8009496:	682b      	ldr	r3, [r5, #0]
 8009498:	b103      	cbz	r3, 800949c <_fstat_r+0x1c>
 800949a:	6023      	str	r3, [r4, #0]
 800949c:	bd38      	pop	{r3, r4, r5, pc}
 800949e:	bf00      	nop
 80094a0:	20000410 	.word	0x20000410

080094a4 <_isatty_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4d06      	ldr	r5, [pc, #24]	@ (80094c0 <_isatty_r+0x1c>)
 80094a8:	2300      	movs	r3, #0
 80094aa:	4604      	mov	r4, r0
 80094ac:	4608      	mov	r0, r1
 80094ae:	602b      	str	r3, [r5, #0]
 80094b0:	f7f8 fb85 	bl	8001bbe <_isatty>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d102      	bne.n	80094be <_isatty_r+0x1a>
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	b103      	cbz	r3, 80094be <_isatty_r+0x1a>
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	bd38      	pop	{r3, r4, r5, pc}
 80094c0:	20000410 	.word	0x20000410

080094c4 <_init>:
 80094c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c6:	bf00      	nop
 80094c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ca:	bc08      	pop	{r3}
 80094cc:	469e      	mov	lr, r3
 80094ce:	4770      	bx	lr

080094d0 <_fini>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	bf00      	nop
 80094d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d6:	bc08      	pop	{r3}
 80094d8:	469e      	mov	lr, r3
 80094da:	4770      	bx	lr
