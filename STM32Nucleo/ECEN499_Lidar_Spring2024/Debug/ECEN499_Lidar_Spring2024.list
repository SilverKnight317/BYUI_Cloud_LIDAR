
ECEN499_Lidar_Spring2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000493c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004ac4  08004ac4  00005ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b34  08004b34  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b34  08004b34  00005b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b3c  08004b3c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b3c  08004b3c  00005b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b40  08004b40  00005b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b44  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08004b50  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004b50  000061d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6ae  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c40  00000000  00000000  000136ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00015330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094a  00000000  00000000  00015f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260c7  00000000  00000000  0001686a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f13f  00000000  00000000  0003c931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea76f  00000000  00000000  0004ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001361df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003344  00000000  00000000  00136224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b9  00000000  00000000  00139568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004aac 	.word	0x08004aac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004aac 	.word	0x08004aac

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b96a 	b.w	8000cb0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	460c      	mov	r4, r1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d14e      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a00:	4694      	mov	ip, r2
 8000a02:	458c      	cmp	ip, r1
 8000a04:	4686      	mov	lr, r0
 8000a06:	fab2 f282 	clz	r2, r2
 8000a0a:	d962      	bls.n	8000ad2 <__udivmoddi4+0xde>
 8000a0c:	b14a      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a0e:	f1c2 0320 	rsb	r3, r2, #32
 8000a12:	4091      	lsls	r1, r2
 8000a14:	fa20 f303 	lsr.w	r3, r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	4319      	orrs	r1, r3
 8000a1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a26:	fa1f f68c 	uxth.w	r6, ip
 8000a2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a32:	fb07 1114 	mls	r1, r7, r4, r1
 8000a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3a:	fb04 f106 	mul.w	r1, r4, r6
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x64>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a4a:	f080 8112 	bcs.w	8000c72 <__udivmoddi4+0x27e>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 810f 	bls.w	8000c72 <__udivmoddi4+0x27e>
 8000a54:	3c02      	subs	r4, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1a59      	subs	r1, r3, r1
 8000a5a:	fa1f f38e 	uxth.w	r3, lr
 8000a5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a62:	fb07 1110 	mls	r1, r7, r0, r1
 8000a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6a:	fb00 f606 	mul.w	r6, r0, r6
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x94>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a7a:	f080 80fc 	bcs.w	8000c76 <__udivmoddi4+0x282>
 8000a7e:	429e      	cmp	r6, r3
 8000a80:	f240 80f9 	bls.w	8000c76 <__udivmoddi4+0x282>
 8000a84:	4463      	add	r3, ip
 8000a86:	3802      	subs	r0, #2
 8000a88:	1b9b      	subs	r3, r3, r6
 8000a8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a8e:	2100      	movs	r1, #0
 8000a90:	b11d      	cbz	r5, 8000a9a <__udivmoddi4+0xa6>
 8000a92:	40d3      	lsrs	r3, r2
 8000a94:	2200      	movs	r2, #0
 8000a96:	e9c5 3200 	strd	r3, r2, [r5]
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d905      	bls.n	8000aae <__udivmoddi4+0xba>
 8000aa2:	b10d      	cbz	r5, 8000aa8 <__udivmoddi4+0xb4>
 8000aa4:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e7f5      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000aae:	fab3 f183 	clz	r1, r3
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d146      	bne.n	8000b44 <__udivmoddi4+0x150>
 8000ab6:	42a3      	cmp	r3, r4
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xcc>
 8000aba:	4290      	cmp	r0, r2
 8000abc:	f0c0 80f0 	bcc.w	8000ca0 <__udivmoddi4+0x2ac>
 8000ac0:	1a86      	subs	r6, r0, r2
 8000ac2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d0e6      	beq.n	8000a9a <__udivmoddi4+0xa6>
 8000acc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ad0:	e7e3      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	f040 8090 	bne.w	8000bf8 <__udivmoddi4+0x204>
 8000ad8:	eba1 040c 	sub.w	r4, r1, ip
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	fa1f f78c 	uxth.w	r7, ip
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aee:	fb08 4416 	mls	r4, r8, r6, r4
 8000af2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000af6:	fb07 f006 	mul.w	r0, r7, r6
 8000afa:	4298      	cmp	r0, r3
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x11c>
 8000afe:	eb1c 0303 	adds.w	r3, ip, r3
 8000b02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x11a>
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	f200 80cd 	bhi.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b0e:	4626      	mov	r6, r4
 8000b10:	1a1c      	subs	r4, r3, r0
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b22:	fb00 f707 	mul.w	r7, r0, r7
 8000b26:	429f      	cmp	r7, r3
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x148>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x146>
 8000b34:	429f      	cmp	r7, r3
 8000b36:	f200 80b0 	bhi.w	8000c9a <__udivmoddi4+0x2a6>
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	1bdb      	subs	r3, r3, r7
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	e7a5      	b.n	8000a90 <__udivmoddi4+0x9c>
 8000b44:	f1c1 0620 	rsb	r6, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b54:	fa04 f301 	lsl.w	r3, r4, r1
 8000b58:	ea43 030c 	orr.w	r3, r3, ip
 8000b5c:	40f4      	lsrs	r4, r6
 8000b5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b62:	0c38      	lsrs	r0, r7, #16
 8000b64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b68:	fbb4 fef0 	udiv	lr, r4, r0
 8000b6c:	fa1f fc87 	uxth.w	ip, r7
 8000b70:	fb00 441e 	mls	r4, r0, lr, r4
 8000b74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b78:	fb0e f90c 	mul.w	r9, lr, ip
 8000b7c:	45a1      	cmp	r9, r4
 8000b7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b82:	d90a      	bls.n	8000b9a <__udivmoddi4+0x1a6>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b8a:	f080 8084 	bcs.w	8000c96 <__udivmoddi4+0x2a2>
 8000b8e:	45a1      	cmp	r9, r4
 8000b90:	f240 8081 	bls.w	8000c96 <__udivmoddi4+0x2a2>
 8000b94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b98:	443c      	add	r4, r7
 8000b9a:	eba4 0409 	sub.w	r4, r4, r9
 8000b9e:	fa1f f983 	uxth.w	r9, r3
 8000ba2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ba6:	fb00 4413 	mls	r4, r0, r3, r4
 8000baa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	d907      	bls.n	8000bc6 <__udivmoddi4+0x1d2>
 8000bb6:	193c      	adds	r4, r7, r4
 8000bb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bbc:	d267      	bcs.n	8000c8e <__udivmoddi4+0x29a>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0x29a>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	443c      	add	r4, r7
 8000bc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bca:	fba0 9302 	umull	r9, r3, r0, r2
 8000bce:	eba4 040c 	sub.w	r4, r4, ip
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	46ce      	mov	lr, r9
 8000bd6:	469c      	mov	ip, r3
 8000bd8:	d351      	bcc.n	8000c7e <__udivmoddi4+0x28a>
 8000bda:	d04e      	beq.n	8000c7a <__udivmoddi4+0x286>
 8000bdc:	b155      	cbz	r5, 8000bf4 <__udivmoddi4+0x200>
 8000bde:	ebb8 030e 	subs.w	r3, r8, lr
 8000be2:	eb64 040c 	sbc.w	r4, r4, ip
 8000be6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bea:	40cb      	lsrs	r3, r1
 8000bec:	431e      	orrs	r6, r3
 8000bee:	40cc      	lsrs	r4, r1
 8000bf0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	e750      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000bf8:	f1c2 0320 	rsb	r3, r2, #32
 8000bfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	fa24 f303 	lsr.w	r3, r4, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	430c      	orrs	r4, r1
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c20:	0c23      	lsrs	r3, r4, #16
 8000c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c26:	fb00 f107 	mul.w	r1, r0, r7
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x24c>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c36:	d22c      	bcs.n	8000c92 <__udivmoddi4+0x29e>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d92a      	bls.n	8000c92 <__udivmoddi4+0x29e>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c48:	fb08 3311 	mls	r3, r8, r1, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb01 f307 	mul.w	r3, r1, r7
 8000c54:	42a3      	cmp	r3, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x276>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c60:	d213      	bcs.n	8000c8a <__udivmoddi4+0x296>
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	d911      	bls.n	8000c8a <__udivmoddi4+0x296>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4464      	add	r4, ip
 8000c6a:	1ae4      	subs	r4, r4, r3
 8000c6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c70:	e739      	b.n	8000ae6 <__udivmoddi4+0xf2>
 8000c72:	4604      	mov	r4, r0
 8000c74:	e6f0      	b.n	8000a58 <__udivmoddi4+0x64>
 8000c76:	4608      	mov	r0, r1
 8000c78:	e706      	b.n	8000a88 <__udivmoddi4+0x94>
 8000c7a:	45c8      	cmp	r8, r9
 8000c7c:	d2ae      	bcs.n	8000bdc <__udivmoddi4+0x1e8>
 8000c7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c86:	3801      	subs	r0, #1
 8000c88:	e7a8      	b.n	8000bdc <__udivmoddi4+0x1e8>
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	e7ed      	b.n	8000c6a <__udivmoddi4+0x276>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	e799      	b.n	8000bc6 <__udivmoddi4+0x1d2>
 8000c92:	4630      	mov	r0, r6
 8000c94:	e7d4      	b.n	8000c40 <__udivmoddi4+0x24c>
 8000c96:	46d6      	mov	lr, sl
 8000c98:	e77f      	b.n	8000b9a <__udivmoddi4+0x1a6>
 8000c9a:	4463      	add	r3, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	e74d      	b.n	8000b3c <__udivmoddi4+0x148>
 8000ca0:	4606      	mov	r6, r0
 8000ca2:	4623      	mov	r3, r4
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e70f      	b.n	8000ac8 <__udivmoddi4+0xd4>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	e730      	b.n	8000b10 <__udivmoddi4+0x11c>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <wait_cycles>:





void wait_cycles(uint32_t cycles){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	while (cycles-- > 0){
 8000cbc:	e000      	b.n	8000cc0 <wait_cycles+0xc>
		__asm__ volatile ("nop");
 8000cbe:	bf00      	nop
	while (cycles-- > 0){
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f9      	bne.n	8000cbe <wait_cycles+0xa>
	} 				// @ 8MHz, each clock cycle is 125 ns
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SPI_Write_8>:


void SPI_Write_8(uint8_t data)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	e020      	b.n	8000d2a <SPI_Write_8+0x52>
    {
        // Set MOSI according to the most significant bit of data
        HAL_GPIO_WritePin(GPIOA, Din_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	09db      	lsrs	r3, r3, #7
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	2180      	movs	r1, #128	@ 0x80
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf6:	f001 f83b 	bl	8001d70 <HAL_GPIO_WritePin>
        data <<= 1; // Shift data left
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	71fb      	strb	r3, [r7, #7]

        // Toggle SCK
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2140      	movs	r1, #64	@ 0x40
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d08:	f001 f832 	bl	8001d70 <HAL_GPIO_WritePin>
        wait_cycles(4); // Small delay to simulate clock
 8000d0c:	2004      	movs	r0, #4
 8000d0e:	f7ff ffd1 	bl	8000cb4 <wait_cycles>
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2140      	movs	r1, #64	@ 0x40
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1a:	f001 f829 	bl	8001d70 <HAL_GPIO_WritePin>
        wait_cycles(4);
 8000d1e:	2004      	movs	r0, #4
 8000d20:	f7ff ffc8 	bl	8000cb4 <wait_cycles>
    for (int i = 0; i < 8; i++)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2b07      	cmp	r3, #7
 8000d2e:	dddb      	ble.n	8000ce8 <SPI_Write_8+0x10>
    }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <SPI_Write_24>:

void SPI_Write_24(uint32_t data)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 24; i++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	e023      	b.n	8000d90 <SPI_Write_24+0x56>
    {
        // Set MOSI according to the most significant bit of data
        HAL_GPIO_WritePin(GPIOA, Din_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	09db      	lsrs	r3, r3, #7
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	461a      	mov	r2, r3
 8000d56:	2180      	movs	r1, #128	@ 0x80
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5c:	f001 f808 	bl	8001d70 <HAL_GPIO_WritePin>
        data <<= 1; // Shift data left
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	607b      	str	r3, [r7, #4]

        // Toggle SCK
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2140      	movs	r1, #64	@ 0x40
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6e:	f000 ffff 	bl	8001d70 <HAL_GPIO_WritePin>
        wait_cycles(4); // Small delay to simulate clock
 8000d72:	2004      	movs	r0, #4
 8000d74:	f7ff ff9e 	bl	8000cb4 <wait_cycles>
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2140      	movs	r1, #64	@ 0x40
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d80:	f000 fff6 	bl	8001d70 <HAL_GPIO_WritePin>
        wait_cycles(4);
 8000d84:	2004      	movs	r0, #4
 8000d86:	f7ff ff95 	bl	8000cb4 <wait_cycles>
    for (int i = 0; i < 24; i++)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b17      	cmp	r3, #23
 8000d94:	ddd8      	ble.n	8000d48 <SPI_Write_24+0xe>
    }
}
 8000d96:	bf00      	nop
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <SPI_Read_8>:

uint8_t SPI_Read_8(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	e022      	b.n	8000df6 <SPI_Read_8+0x56>
    {
        data <<= 1; // Shift data left
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	71fb      	strb	r3, [r7, #7]

        // Toggle SCK
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2140      	movs	r1, #64	@ 0x40
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbe:	f000 ffd7 	bl	8001d70 <HAL_GPIO_WritePin>
        wait_cycles(4);
 8000dc2:	2004      	movs	r0, #4
 8000dc4:	f7ff ff76 	bl	8000cb4 <wait_cycles>

        // Read MISO
        if (HAL_GPIO_ReadPin(GPIOB, Dout_Pin) == GPIO_PIN_SET)
 8000dc8:	2140      	movs	r1, #64	@ 0x40
 8000dca:	480f      	ldr	r0, [pc, #60]	@ (8000e08 <SPI_Read_8+0x68>)
 8000dcc:	f000 ffb8 	bl	8001d40 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d103      	bne.n	8000dde <SPI_Read_8+0x3e>
        {
            data |= 0x01;
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	71fb      	strb	r3, [r7, #7]
        }

        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2140      	movs	r1, #64	@ 0x40
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de6:	f000 ffc3 	bl	8001d70 <HAL_GPIO_WritePin>
        wait_cycles(4);
 8000dea:	2004      	movs	r0, #4
 8000dec:	f7ff ff62 	bl	8000cb4 <wait_cycles>
    for (int i = 0; i < 8; i++)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2b07      	cmp	r3, #7
 8000dfa:	ddd9      	ble.n	8000db0 <SPI_Read_8+0x10>
    }
    return data;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	48000400 	.word	0x48000400

08000e0c <SPI_Read_24>:

uint32_t SPI_Read_24(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
    uint32_t data = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 24; i++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	e022      	b.n	8000e62 <SPI_Read_24+0x56>
    {
        data <<= 1; // Shift data left
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	607b      	str	r3, [r7, #4]

        // Toggle SCK
        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2140      	movs	r1, #64	@ 0x40
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2a:	f000 ffa1 	bl	8001d70 <HAL_GPIO_WritePin>
        wait_cycles(4);
 8000e2e:	2004      	movs	r0, #4
 8000e30:	f7ff ff40 	bl	8000cb4 <wait_cycles>

        // Read MISO
        if (HAL_GPIO_ReadPin(GPIOB, Dout_Pin) == GPIO_PIN_SET)
 8000e34:	2140      	movs	r1, #64	@ 0x40
 8000e36:	480f      	ldr	r0, [pc, #60]	@ (8000e74 <SPI_Read_24+0x68>)
 8000e38:	f000 ff82 	bl	8001d40 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d103      	bne.n	8000e4a <SPI_Read_24+0x3e>
        {
            data |= 0x01;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	607b      	str	r3, [r7, #4]
        }

        HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2140      	movs	r1, #64	@ 0x40
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e52:	f000 ff8d 	bl	8001d70 <HAL_GPIO_WritePin>
        wait_cycles(4);
 8000e56:	2004      	movs	r0, #4
 8000e58:	f7ff ff2c 	bl	8000cb4 <wait_cycles>
    for (int i = 0; i < 24; i++)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	2b17      	cmp	r3, #23
 8000e66:	ddd9      	ble.n	8000e1c <SPI_Read_24+0x10>
    }
    return data;
 8000e68:	687b      	ldr	r3, [r7, #4]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	48000400 	.word	0x48000400

08000e78 <TDC7200_Read_Register>:

uint32_t TDC7200_Read_Register(uint8_t reg)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = (reg & 0x3F);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e88:	72fb      	strb	r3, [r7, #11]
    uint32_t rxData = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_WritePin(GPIOA, CS_N_Pin, GPIO_PIN_RESET); // CS low
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2120      	movs	r1, #32
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e96:	f000 ff6b 	bl	8001d70 <HAL_GPIO_WritePin>

    if (reg <= 0x09){
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b09      	cmp	r3, #9
 8000e9e:	d808      	bhi.n	8000eb2 <TDC7200_Read_Register+0x3a>

        SPI_Write_8(txData); // Send register address
 8000ea0:	7afb      	ldrb	r3, [r7, #11]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff18 	bl	8000cd8 <SPI_Write_8>
        rxData = SPI_Read_8(); // Read data
 8000ea8:	f7ff ff7a 	bl	8000da0 <SPI_Read_8>
 8000eac:	4603      	mov	r3, r0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	e006      	b.n	8000ec0 <TDC7200_Read_Register+0x48>

    }
    else{

        SPI_Write_8(txData); // Send register address
 8000eb2:	7afb      	ldrb	r3, [r7, #11]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff0f 	bl	8000cd8 <SPI_Write_8>
        rxData = SPI_Read_24(); // Read data
 8000eba:	f7ff ffa7 	bl	8000e0c <SPI_Read_24>
 8000ebe:	60f8      	str	r0, [r7, #12]

    }

    HAL_GPIO_WritePin(GPIOA, CS_N_Pin, GPIO_PIN_SET); // CS high
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec8:	f000 ff52 	bl	8001d70 <HAL_GPIO_WritePin>

    return rxData;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <TDC7200_Write_Register>:

void TDC7200_Write_Register(uint8_t reg, uint32_t value)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	6039      	str	r1, [r7, #0]
 8000ee0:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = (reg & 0x3F) | 0x40; // Ensure bit 6 is set for write
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ef0:	b25b      	sxtb	r3, r3
 8000ef2:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOA, CS_N_Pin, GPIO_PIN_RESET); // CS low
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f000 ff38 	bl	8001d70 <HAL_GPIO_WritePin>

    if (reg <= 0x09){
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b09      	cmp	r3, #9
 8000f04:	d809      	bhi.n	8000f1a <TDC7200_Write_Register+0x44>

        SPI_Write_8(txData); // Send register address
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fee5 	bl	8000cd8 <SPI_Write_8>
        SPI_Write_8((uint8_t) value); // Send value
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fee0 	bl	8000cd8 <SPI_Write_8>
 8000f18:	e006      	b.n	8000f28 <TDC7200_Write_Register+0x52>

    }

    else{

    SPI_Write_8(txData); // Send register address
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fedb 	bl	8000cd8 <SPI_Write_8>
    SPI_Write_24(value); // Send value
 8000f22:	6838      	ldr	r0, [r7, #0]
 8000f24:	f7ff ff09 	bl	8000d3a <SPI_Write_24>

    }

    HAL_GPIO_WritePin(GPIOA, CS_N_Pin, GPIO_PIN_SET); // CS high
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2120      	movs	r1, #32
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f30:	f000 ff1e 	bl	8001d70 <HAL_GPIO_WritePin>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <Set_Pot_Value>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Set_Pot_Value(uint8_t pot_value)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	 * The register address for the pot is 0b 0000 0000
	 * Potentiometer Values can range from 0x00 to 0xFF
	 */

	uint8_t tx_data[2];  // Buffer to hold the data to be transmitted
	uint16_t SLAVE_ADDRESS = 0x11; //This will need to be changed.
 8000f46:	2311      	movs	r3, #17
 8000f48:	81fb      	strh	r3, [r7, #14]

	// Populate the data buffer
	tx_data[0] = 0b00000000;  // Register address to write to
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	733b      	strb	r3, [r7, #12]
	tx_data[1] = pot_value;   // 8-bit word to write //SEE Resistance Value table in Data sheet.
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	737b      	strb	r3, [r7, #13]

	// Perform I2C transmission
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SLAVE_ADDRESS, tx_data, 2, HAL_MAX_DELAY);
 8000f52:	f107 020c 	add.w	r2, r7, #12
 8000f56:	89f9      	ldrh	r1, [r7, #14]
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2302      	movs	r3, #2
 8000f60:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <Set_Pot_Value+0x34>)
 8000f62:	f000 ffb9 	bl	8001ed8 <HAL_I2C_Master_Transmit>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000028 	.word	0x20000028

08000f74 <Intialize_TDC>:

void Intialize_TDC(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
	// Set Enable Pin
	HAL_GPIO_WritePin(GPIOA, Enable_Pin, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f84:	f000 fef4 	bl	8001d70 <HAL_GPIO_WritePin>

	// wait at least 1.5 ms (12,000 clock cycles) for LDO_SET2 (see datasheet 8.4.7)
	wait_cycles(24000);
 8000f88:	f645 50c0 	movw	r0, #24000	@ 0x5dc0
 8000f8c:	f7ff fe92 	bl	8000cb4 <wait_cycles>

	// Set tdc to mode 2
	// set force calibration to 1
	uint32_t config1 = TDC7200_Read_Register(TDC_CONFIG1) | 0x82;
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ff71 	bl	8000e78 <TDC7200_Read_Register>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f043 0382 	orr.w	r3, r3, #130	@ 0x82
 8000f9c:	607b      	str	r3, [r7, #4]
	TDC7200_Write_Register(TDC_CONFIG1, config1);
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff ff98 	bl	8000ed6 <TDC7200_Write_Register>


	// set calibration2_periods to b'11
	uint32_t config2 = TDC7200_Read_Register(TDC_CONFIG2) | 0xC0;
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff ff66 	bl	8000e78 <TDC7200_Read_Register>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fb2:	603b      	str	r3, [r7, #0]
	TDC7200_Write_Register(TDC_CONFIG2, config2);
 8000fb4:	6839      	ldr	r1, [r7, #0]
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff ff8d 	bl	8000ed6 <TDC7200_Write_Register>


}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <take_measurement>:

double take_measurement(){
 8000fc4:	b5b0      	push	{r4, r5, r7, lr}
 8000fc6:	b090      	sub	sp, #64	@ 0x40
 8000fc8:	af00      	add	r7, sp, #0
	// Set START_MEAS bit to 1
	uint32_t config_value = TDC7200_Read_Register(TDC_CONFIG1);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ff54 	bl	8000e78 <TDC7200_Read_Register>
 8000fd0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	config_value |= 0x01;
 8000fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	TDC7200_Write_Register(TDC_CONFIG1, config_value);
 8000fda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff ff7a 	bl	8000ed6 <TDC7200_Write_Register>

	// Wait for trig
	while (HAL_GPIO_ReadPin(GPIOA, Trigg_Pin) == GPIO_PIN_RESET)
 8000fe2:	e002      	b.n	8000fea <take_measurement+0x26>
		{
			wait_cycles(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f7ff fe65 	bl	8000cb4 <wait_cycles>
	while (HAL_GPIO_ReadPin(GPIOA, Trigg_Pin) == GPIO_PIN_RESET)
 8000fea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff2:	f000 fea5 	bl	8001d40 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f3      	beq.n	8000fe4 <take_measurement+0x20>
		}

    //when trig goes high, set start_pin high and laser control pin high
    HAL_GPIO_WritePin(GPIOA, Start_Pin, GPIO_PIN_SET); // Start High
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2180      	movs	r1, #128	@ 0x80
 8001000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001004:	f000 feb4 	bl	8001d70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Laser_Control_Pin, GPIO_PIN_SET); // Laser High
 8001008:	2201      	movs	r2, #1
 800100a:	2102      	movs	r1, #2
 800100c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001010:	f000 feae 	bl	8001d70 <HAL_GPIO_WritePin>

    // wait for interrupt
    while (HAL_GPIO_ReadPin(GPIOA, Interrupt_Pin) == GPIO_PIN_RESET)
 8001014:	e002      	b.n	800101c <take_measurement+0x58>
        {
            wait_cycles(1);
 8001016:	2001      	movs	r0, #1
 8001018:	f7ff fe4c 	bl	8000cb4 <wait_cycles>
    while (HAL_GPIO_ReadPin(GPIOA, Interrupt_Pin) == GPIO_PIN_RESET)
 800101c:	2101      	movs	r1, #1
 800101e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001022:	f000 fe8d 	bl	8001d40 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f4      	beq.n	8001016 <take_measurement+0x52>
        }

	// read result
    HAL_GPIO_WritePin(GPIOA, Start_Pin, GPIO_PIN_RESET); // Start low
 800102c:	2200      	movs	r2, #0
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001034:	f000 fe9c 	bl	8001d70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Laser_Control_Pin, GPIO_PIN_RESET); // Laser low
 8001038:	2200      	movs	r2, #0
 800103a:	2102      	movs	r1, #2
 800103c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001040:	f000 fe96 	bl	8001d70 <HAL_GPIO_WritePin>


    // Calculate Time of Flight
    int time1 = TDC7200_Read_Register(TDC_TIME1);
 8001044:	2010      	movs	r0, #16
 8001046:	f7ff ff17 	bl	8000e78 <TDC7200_Read_Register>
 800104a:	4603      	mov	r3, r0
 800104c:	63bb      	str	r3, [r7, #56]	@ 0x38
    int time2 = TDC7200_Read_Register(TDC_TIME2);
 800104e:	2012      	movs	r0, #18
 8001050:	f7ff ff12 	bl	8000e78 <TDC7200_Read_Register>
 8001054:	4603      	mov	r3, r0
 8001056:	637b      	str	r3, [r7, #52]	@ 0x34
    int cal1 = TDC7200_Read_Register(TDC_CALIBRATION1);
 8001058:	201b      	movs	r0, #27
 800105a:	f7ff ff0d 	bl	8000e78 <TDC7200_Read_Register>
 800105e:	4603      	mov	r3, r0
 8001060:	633b      	str	r3, [r7, #48]	@ 0x30
    int cal2 = TDC7200_Read_Register(TDC_CALIBRATION2);
 8001062:	201c      	movs	r0, #28
 8001064:	f7ff ff08 	bl	8000e78 <TDC7200_Read_Register>
 8001068:	4603      	mov	r3, r0
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int clock_count1 = TDC7200_Read_Register(TDC_CLOCK_COUNT1);
 800106c:	2011      	movs	r0, #17
 800106e:	f7ff ff03 	bl	8000e78 <TDC7200_Read_Register>
 8001072:	4603      	mov	r3, r0
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
    int cal2_periods = 40;
 8001076:	2328      	movs	r3, #40	@ 0x28
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
    double clk_period = 1/(8*10^6);
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double cal_count = (cal2-cal1)/(cal2_periods - 1);
 8001086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800108a:	1ad2      	subs	r2, r2, r3
 800108c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108e:	3b01      	subs	r3, #1
 8001090:	fb92 f3f3 	sdiv	r3, r2, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f9f1 	bl	800047c <__aeabi_i2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    double norm_lsb = clk_period / cal_count;
 80010a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010aa:	f7ff fb7b 	bl	80007a4 <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    double tof = ((time1 - time2) * norm_lsb) + (clock_count1 * clk_period);
 80010b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f9dd 	bl	800047c <__aeabi_i2d>
 80010c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010c6:	f7ff fa43 	bl	8000550 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4614      	mov	r4, r2
 80010d0:	461d      	mov	r5, r3
 80010d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80010d4:	f7ff f9d2 	bl	800047c <__aeabi_i2d>
 80010d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010dc:	f7ff fa38 	bl	8000550 <__aeabi_dmul>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff f87c 	bl	80001e4 <__adddf3>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	e9c7 2300 	strd	r2, r3, [r7]
    return tof;
 80010f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010f8:	ec43 2b17 	vmov	d7, r2, r3

}
 80010fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001100:	eef0 0a67 	vmov.f32	s1, s15
 8001104:	3740      	adds	r7, #64	@ 0x40
 8001106:	46bd      	mov	sp, r7
 8001108:	bdb0      	pop	{r4, r5, r7, pc}
 800110a:	0000      	movs	r0, r0
 800110c:	0000      	movs	r0, r0
	...

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09e      	sub	sp, #120	@ 0x78
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001116:	f000 fb07 	bl	8001728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111a:	f000 f861 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111e:	f000 f921 	bl	8001364 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001122:	f000 f8af 	bl	8001284 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001126:	f000 f8ed 	bl	8001304 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Intialize_TDC();
 800112a:	f7ff ff23 	bl	8000f74 <Intialize_TDC>

  wait_cycles(2000000);
 800112e:	4826      	ldr	r0, [pc, #152]	@ (80011c8 <main+0xb8>)
 8001130:	f7ff fdc0 	bl	8000cb4 <wait_cycles>

  Set_Pot_Value(128);
 8001134:	2080      	movs	r0, #128	@ 0x80
 8001136:	f7ff ff01 	bl	8000f3c <Set_Pot_Value>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // check for message on USART2
	  if (USART2->ISR & UART_FLAG_RXNE){
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <main+0xbc>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 0320 	and.w	r3, r3, #32
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f9      	beq.n	800113a <main+0x2a>
		  // zero out message array
	  	  memset(message, 0, sizeof(message));
 8001146:	2264      	movs	r2, #100	@ 0x64
 8001148:	2100      	movs	r1, #0
 800114a:	4821      	ldr	r0, [pc, #132]	@ (80011d0 <main+0xc0>)
 800114c:	f003 fc6e 	bl	8004a2c <memset>
	  	  // get message from USART2
	  	  HAL_UART_Receive(&huart2, (unsigned char*) message, sizeof(message)-1, UART_DELAY);
 8001150:	2364      	movs	r3, #100	@ 0x64
 8001152:	2263      	movs	r2, #99	@ 0x63
 8001154:	491e      	ldr	r1, [pc, #120]	@ (80011d0 <main+0xc0>)
 8001156:	481f      	ldr	r0, [pc, #124]	@ (80011d4 <main+0xc4>)
 8001158:	f002 fe75 	bl	8003e46 <HAL_UART_Receive>
//		  // zero out message array
//	 	  memset(message, 0, sizeof(message));
	  	  // get message from USART1
//	  	  HAL_UART_Receive(&huart1, (unsigned char*) message, sizeof(message)-1, UART_DELAY);
	  	  // send the same message to USART2
	  	  HAL_UART_Transmit(&huart2, (unsigned char*) message, strlen(message), UART_DELAY);
 800115c:	481c      	ldr	r0, [pc, #112]	@ (80011d0 <main+0xc0>)
 800115e:	f7ff f833 	bl	80001c8 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	2364      	movs	r3, #100	@ 0x64
 8001168:	4919      	ldr	r1, [pc, #100]	@ (80011d0 <main+0xc0>)
 800116a:	481a      	ldr	r0, [pc, #104]	@ (80011d4 <main+0xc4>)
 800116c:	f002 fde2 	bl	8003d34 <HAL_UART_Transmit>
//	  		  else{
//	  			  strncpy(message, "Please use the set_pot_val command again with valid pot value.", MAX_MESSAGE_SIZE);
//	  		  }
//	  	  }
//	  	  else if (strcmp(message, "Start_measure") == 0){
	  	  double tof = take_measurement();
 8001170:	f7ff ff28 	bl	8000fc4 <take_measurement>
 8001174:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	  	  double distance_meas = tof*299792458*0.5;
 8001178:	a311      	add	r3, pc, #68	@ (adr r3, 80011c0 <main+0xb0>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001182:	f7ff f9e5 	bl	8000550 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <main+0xc8>)
 8001194:	f7ff f9dc 	bl	8000550 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	  	  char distance_meas_str[MAX_MESSAGE_SIZE];
	  	  itoa(distance_meas, distance_meas_str, 10);
 80011a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80011a4:	f7ff fbe6 	bl	8000974 <__aeabi_d2iz>
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	220a      	movs	r2, #10
 80011ac:	4619      	mov	r1, r3
 80011ae:	f003 fbf8 	bl	80049a2 <itoa>
	  	  strncpy(distance, distance_meas_str, MAX_MESSAGE_SIZE);
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2264      	movs	r2, #100	@ 0x64
 80011b6:	4619      	mov	r1, r3
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <main+0xcc>)
 80011ba:	f003 fc3f 	bl	8004a3c <strncpy>
	  if (USART2->ISR & UART_FLAG_RXNE){
 80011be:	e7bc      	b.n	800113a <main+0x2a>
 80011c0:	4a000000 	.word	0x4a000000
 80011c4:	41b1de78 	.word	0x41b1de78
 80011c8:	001e8480 	.word	0x001e8480
 80011cc:	40004400 	.word	0x40004400
 80011d0:	20000104 	.word	0x20000104
 80011d4:	2000007c 	.word	0x2000007c
 80011d8:	3fe00000 	.word	0x3fe00000
 80011dc:	20000168 	.word	0x20000168

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b096      	sub	sp, #88	@ 0x58
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2244      	movs	r2, #68	@ 0x44
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fc1c 	bl	8004a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001202:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001206:	f001 fa35 	bl	8002674 <HAL_PWREx_ControlVoltageScaling>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001210:	f000 f93a 	bl	8001488 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800121c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121e:	2310      	movs	r3, #16
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001226:	2302      	movs	r3, #2
 8001228:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800122e:	2308      	movs	r3, #8
 8001230:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001232:	2307      	movs	r3, #7
 8001234:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 800123a:	2308      	movs	r3, #8
 800123c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fa6c 	bl	8002720 <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800124e:	f000 f91b 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2303      	movs	r3, #3
 8001258:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fe34 	bl	8002ed8 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001276:	f000 f907 	bl	8001488 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3758      	adds	r7, #88	@ 0x58
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001288:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <MX_I2C1_Init+0x74>)
 800128a:	4a1c      	ldr	r2, [pc, #112]	@ (80012fc <MX_I2C1_Init+0x78>)
 800128c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_I2C1_Init+0x74>)
 8001290:	4a1b      	ldr	r2, [pc, #108]	@ (8001300 <MX_I2C1_Init+0x7c>)
 8001292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_I2C1_Init+0x74>)
 800129c:	2201      	movs	r2, #1
 800129e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <MX_I2C1_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_I2C1_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <MX_I2C1_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b2:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_I2C1_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_I2C1_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012be:	480e      	ldr	r0, [pc, #56]	@ (80012f8 <MX_I2C1_Init+0x74>)
 80012c0:	f000 fd6e 	bl	8001da0 <HAL_I2C_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ca:	f000 f8dd 	bl	8001488 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ce:	2100      	movs	r1, #0
 80012d0:	4809      	ldr	r0, [pc, #36]	@ (80012f8 <MX_I2C1_Init+0x74>)
 80012d2:	f001 f929 	bl	8002528 <HAL_I2CEx_ConfigAnalogFilter>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012dc:	f000 f8d4 	bl	8001488 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_I2C1_Init+0x74>)
 80012e4:	f001 f96b 	bl	80025be <HAL_I2CEx_ConfigDigitalFilter>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f000 f8cb 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000028 	.word	0x20000028
 80012fc:	40005400 	.word	0x40005400
 8001300:	2000090e 	.word	0x2000090e

08001304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_USART2_UART_Init+0x58>)
 800130a:	4a15      	ldr	r2, [pc, #84]	@ (8001360 <MX_USART2_UART_Init+0x5c>)
 800130c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <MX_USART2_UART_Init+0x58>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_USART2_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_USART2_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_USART2_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_USART2_UART_Init+0x58>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_USART2_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <MX_USART2_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_USART2_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_USART2_UART_Init+0x58>)
 8001348:	f002 fca6 	bl	8003c98 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001352:	f000 f899 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000007c 	.word	0x2000007c
 8001360:	40004400 	.word	0x40004400

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b40      	ldr	r3, [pc, #256]	@ (800147c <MX_GPIO_Init+0x118>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a3f      	ldr	r2, [pc, #252]	@ (800147c <MX_GPIO_Init+0x118>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b3d      	ldr	r3, [pc, #244]	@ (800147c <MX_GPIO_Init+0x118>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b3a      	ldr	r3, [pc, #232]	@ (800147c <MX_GPIO_Init+0x118>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a39      	ldr	r2, [pc, #228]	@ (800147c <MX_GPIO_Init+0x118>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b37      	ldr	r3, [pc, #220]	@ (800147c <MX_GPIO_Init+0x118>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	4b34      	ldr	r3, [pc, #208]	@ (800147c <MX_GPIO_Init+0x118>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	4a33      	ldr	r2, [pc, #204]	@ (800147c <MX_GPIO_Init+0x118>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b6:	4b31      	ldr	r3, [pc, #196]	@ (800147c <MX_GPIO_Init+0x118>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Laser_Control_Pin|CS_N_Pin|SCLK_Pin|Din_Pin
 80013c2:	2200      	movs	r2, #0
 80013c4:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013cc:	f000 fcd0 	bl	8001d70 <HAL_GPIO_WritePin>
                          |Enable_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDA_dp_Pin|SCL_dp_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80013d6:	482a      	ldr	r0, [pc, #168]	@ (8001480 <MX_GPIO_Init+0x11c>)
 80013d8:	f000 fcca 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Start_GPIO_Port, Start_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2180      	movs	r1, #128	@ 0x80
 80013e0:	4828      	ldr	r0, [pc, #160]	@ (8001484 <MX_GPIO_Init+0x120>)
 80013e2:	f000 fcc5 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Interrupt_Pin Trigg_Pin */
  GPIO_InitStruct.Pin = Interrupt_Pin|Trigg_Pin;
 80013e6:	f240 2301 	movw	r3, #513	@ 0x201
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013fe:	f000 faf5 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Laser_Control_Pin CS_N_Pin SCLK_Pin Din_Pin
                           Enable_Pin */
  GPIO_InitStruct.Pin = Laser_Control_Pin|CS_N_Pin|SCLK_Pin|Din_Pin
 8001402:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 8001406:	60fb      	str	r3, [r7, #12]
                          |Enable_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4619      	mov	r1, r3
 800141a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141e:	f000 fae5 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDA_dp_Pin SCL_dp_Pin */
  GPIO_InitStruct.Pin = SDA_dp_Pin|SCL_dp_Pin;
 8001422:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	4619      	mov	r1, r3
 800143a:	4811      	ldr	r0, [pc, #68]	@ (8001480 <MX_GPIO_Init+0x11c>)
 800143c:	f000 fad6 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Start_Pin */
  GPIO_InitStruct.Pin = Start_Pin;
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Start_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4619      	mov	r1, r3
 8001456:	480b      	ldr	r0, [pc, #44]	@ (8001484 <MX_GPIO_Init+0x120>)
 8001458:	f000 fac8 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Dout_Pin */
  GPIO_InitStruct.Pin = Dout_Pin;
 800145c:	2340      	movs	r3, #64	@ 0x40
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Dout_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	4619      	mov	r1, r3
 800146e:	4804      	ldr	r0, [pc, #16]	@ (8001480 <MX_GPIO_Init+0x11c>)
 8001470:	f000 fabc 	bl	80019ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001474:	bf00      	nop
 8001476:	3720      	adds	r7, #32
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000
 8001480:	48000400 	.word	0x48000400
 8001484:	48000800 	.word	0x48000800

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <Error_Handler+0x8>

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <HAL_MspInit+0x44>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149e:	4a0e      	ldr	r2, [pc, #56]	@ (80014d8 <HAL_MspInit+0x44>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <HAL_MspInit+0x44>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <HAL_MspInit+0x44>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b6:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <HAL_MspInit+0x44>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_MspInit+0x44>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b0ac      	sub	sp, #176	@ 0xb0
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2288      	movs	r2, #136	@ 0x88
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 fa95 	bl	8004a2c <memset>
  if(hi2c->Instance==I2C1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a21      	ldr	r2, [pc, #132]	@ (800158c <HAL_I2C_MspInit+0xb0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d13b      	bne.n	8001584 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800150c:	2340      	movs	r3, #64	@ 0x40
 800150e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001510:	2300      	movs	r3, #0
 8001512:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4618      	mov	r0, r3
 800151a:	f001 ff01 	bl	8003320 <HAL_RCCEx_PeriphCLKConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001524:	f7ff ffb0 	bl	8001488 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_I2C_MspInit+0xb4>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <HAL_I2C_MspInit+0xb4>)
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <HAL_I2C_MspInit+0xb4>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001540:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001548:	2312      	movs	r3, #18
 800154a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155a:	2304      	movs	r3, #4
 800155c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001564:	4619      	mov	r1, r3
 8001566:	480b      	ldr	r0, [pc, #44]	@ (8001594 <HAL_I2C_MspInit+0xb8>)
 8001568:	f000 fa40 	bl	80019ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_I2C_MspInit+0xb4>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001570:	4a07      	ldr	r2, [pc, #28]	@ (8001590 <HAL_I2C_MspInit+0xb4>)
 8001572:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001576:	6593      	str	r3, [r2, #88]	@ 0x58
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <HAL_I2C_MspInit+0xb4>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001584:	bf00      	nop
 8001586:	37b0      	adds	r7, #176	@ 0xb0
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40005400 	.word	0x40005400
 8001590:	40021000 	.word	0x40021000
 8001594:	48000400 	.word	0x48000400

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0ac      	sub	sp, #176	@ 0xb0
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2288      	movs	r2, #136	@ 0x88
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 fa37 	bl	8004a2c <memset>
  if(huart->Instance==USART2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <HAL_UART_MspInit+0xb0>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d13b      	bne.n	8001640 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 fea3 	bl	8003320 <HAL_RCCEx_PeriphCLKConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015e0:	f7ff ff52 	bl	8001488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e4:	4b19      	ldr	r3, [pc, #100]	@ (800164c <HAL_UART_MspInit+0xb4>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e8:	4a18      	ldr	r2, [pc, #96]	@ (800164c <HAL_UART_MspInit+0xb4>)
 80015ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <HAL_UART_MspInit+0xb4>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <HAL_UART_MspInit+0xb4>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001600:	4a12      	ldr	r2, [pc, #72]	@ (800164c <HAL_UART_MspInit+0xb4>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001608:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_UART_MspInit+0xb4>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001614:	230c      	movs	r3, #12
 8001616:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162c:	2307      	movs	r3, #7
 800162e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163c:	f000 f9d6 	bl	80019ec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001640:	bf00      	nop
 8001642:	37b0      	adds	r7, #176	@ 0xb0
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40004400 	.word	0x40004400
 800164c:	40021000 	.word	0x40021000

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <NMI_Handler+0x4>

08001658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <MemManage_Handler+0x4>

08001668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <UsageFault_Handler+0x4>

08001678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a6:	f000 f89b 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <SystemInit+0x20>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ba:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <SystemInit+0x20>)
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800170c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d8:	f7ff ffea 	bl	80016b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <LoopForever+0x6>)
  ldr r1, =_edata
 80016de:	490d      	ldr	r1, [pc, #52]	@ (8001714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <LoopForever+0xe>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001720 <LoopForever+0x16>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001702:	f003 f9af 	bl	8004a64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001706:	f7ff fd03 	bl	8001110 <main>

0800170a <LoopForever>:

LoopForever:
    b LoopForever
 800170a:	e7fe      	b.n	800170a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800170c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001714:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001718:	08004b44 	.word	0x08004b44
  ldr r2, =_sbss
 800171c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001720:	200001d0 	.word	0x200001d0

08001724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC1_2_IRQHandler>
	...

08001728 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <HAL_Init+0x3c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <HAL_Init+0x3c>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173e:	2003      	movs	r0, #3
 8001740:	f000 f920 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001744:	2000      	movs	r0, #0
 8001746:	f000 f80f 	bl	8001768 <HAL_InitTick>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	e001      	b.n	800175a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001756:	f7ff fe9d 	bl	8001494 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800175a:	79fb      	ldrb	r3, [r7, #7]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40022000 	.word	0x40022000

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001774:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <HAL_InitTick+0x6c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d023      	beq.n	80017c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <HAL_InitTick+0x70>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_InitTick+0x6c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f91d 	bl	80019d2 <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10f      	bne.n	80017be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d809      	bhi.n	80017b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f8f5 	bl	800199a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b0:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <HAL_InitTick+0x74>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e007      	b.n	80017c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e004      	b.n	80017c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
 80017c2:	e001      	b.n	80017c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000008 	.word	0x20000008
 8001804:	200001cc 	.word	0x200001cc

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	@ (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200001cc 	.word	0x200001cc

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	@ (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	@ (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	@ 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	@ 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001950:	d301      	bcc.n	8001956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2301      	movs	r3, #1
 8001954:	e00f      	b.n	8001976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <SysTick_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195e:	210f      	movs	r1, #15
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f7ff ff8e 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <SysTick_Config+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	@ (8001980 <SysTick_Config+0x40>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff47 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ac:	f7ff ff5c 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff8e 	bl	80018d8 <NVIC_EncodePriority>
 80019bc:	4602      	mov	r2, r0
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5d 	bl	8001884 <__NVIC_SetPriority>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffb0 	bl	8001940 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fa:	e17f      	b.n	8001cfc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2101      	movs	r1, #1
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8171 	beq.w	8001cf6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d005      	beq.n	8001a2c <HAL_GPIO_Init+0x40>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d130      	bne.n	8001a8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a62:	2201      	movs	r2, #1
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	f003 0201 	and.w	r2, r3, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d118      	bne.n	8001acc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	f003 0201 	and.w	r2, r3, #1
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d017      	beq.n	8001b08 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d123      	bne.n	8001b5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	08da      	lsrs	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3208      	adds	r2, #8
 8001b56:	6939      	ldr	r1, [r7, #16]
 8001b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0203 	and.w	r2, r3, #3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80ac 	beq.w	8001cf6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8001d1c <HAL_GPIO_Init+0x330>)
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba2:	4a5e      	ldr	r2, [pc, #376]	@ (8001d1c <HAL_GPIO_Init+0x330>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001baa:	4b5c      	ldr	r3, [pc, #368]	@ (8001d1c <HAL_GPIO_Init+0x330>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d20 <HAL_GPIO_Init+0x334>)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001be0:	d025      	beq.n	8001c2e <HAL_GPIO_Init+0x242>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4f      	ldr	r2, [pc, #316]	@ (8001d24 <HAL_GPIO_Init+0x338>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d01f      	beq.n	8001c2a <HAL_GPIO_Init+0x23e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4e      	ldr	r2, [pc, #312]	@ (8001d28 <HAL_GPIO_Init+0x33c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d019      	beq.n	8001c26 <HAL_GPIO_Init+0x23a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4d      	ldr	r2, [pc, #308]	@ (8001d2c <HAL_GPIO_Init+0x340>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_GPIO_Init+0x236>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4c      	ldr	r2, [pc, #304]	@ (8001d30 <HAL_GPIO_Init+0x344>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00d      	beq.n	8001c1e <HAL_GPIO_Init+0x232>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4b      	ldr	r2, [pc, #300]	@ (8001d34 <HAL_GPIO_Init+0x348>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x22e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d38 <HAL_GPIO_Init+0x34c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_GPIO_Init+0x22a>
 8001c12:	2306      	movs	r3, #6
 8001c14:	e00c      	b.n	8001c30 <HAL_GPIO_Init+0x244>
 8001c16:	2307      	movs	r3, #7
 8001c18:	e00a      	b.n	8001c30 <HAL_GPIO_Init+0x244>
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	e008      	b.n	8001c30 <HAL_GPIO_Init+0x244>
 8001c1e:	2304      	movs	r3, #4
 8001c20:	e006      	b.n	8001c30 <HAL_GPIO_Init+0x244>
 8001c22:	2303      	movs	r3, #3
 8001c24:	e004      	b.n	8001c30 <HAL_GPIO_Init+0x244>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e002      	b.n	8001c30 <HAL_GPIO_Init+0x244>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <HAL_GPIO_Init+0x244>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	f002 0203 	and.w	r2, r2, #3
 8001c36:	0092      	lsls	r2, r2, #2
 8001c38:	4093      	lsls	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c40:	4937      	ldr	r1, [pc, #220]	@ (8001d20 <HAL_GPIO_Init+0x334>)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	3302      	adds	r3, #2
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d3c <HAL_GPIO_Init+0x350>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c72:	4a32      	ldr	r2, [pc, #200]	@ (8001d3c <HAL_GPIO_Init+0x350>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c78:	4b30      	ldr	r3, [pc, #192]	@ (8001d3c <HAL_GPIO_Init+0x350>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c9c:	4a27      	ldr	r2, [pc, #156]	@ (8001d3c <HAL_GPIO_Init+0x350>)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ca2:	4b26      	ldr	r3, [pc, #152]	@ (8001d3c <HAL_GPIO_Init+0x350>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d3c <HAL_GPIO_Init+0x350>)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_GPIO_Init+0x350>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cf0:	4a12      	ldr	r2, [pc, #72]	@ (8001d3c <HAL_GPIO_Init+0x350>)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa22 f303 	lsr.w	r3, r2, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f47f ae78 	bne.w	80019fc <HAL_GPIO_Init+0x10>
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	48000400 	.word	0x48000400
 8001d28:	48000800 	.word	0x48000800
 8001d2c:	48000c00 	.word	0x48000c00
 8001d30:	48001000 	.word	0x48001000
 8001d34:	48001400 	.word	0x48001400
 8001d38:	48001800 	.word	0x48001800
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e001      	b.n	8001d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d8c:	e002      	b.n	8001d94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e08d      	b.n	8001ece <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fb88 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	@ 0x24
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001df0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	e006      	b.n	8001e28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d108      	bne.n	8001e42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	e007      	b.n	8001e52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69d9      	ldr	r1, [r3, #28]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	817b      	strh	r3, [r7, #10]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	f040 80fd 	bne.w	80020f4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_I2C_Master_Transmit+0x30>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e0f6      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f10:	f7ff fc7a 	bl	8001808 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2319      	movs	r3, #25
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f914 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0e1      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2221      	movs	r2, #33	@ 0x21
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	893a      	ldrh	r2, [r7, #8]
 8001f52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2bff      	cmp	r3, #255	@ 0xff
 8001f62:	d906      	bls.n	8001f72 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	22ff      	movs	r2, #255	@ 0xff
 8001f68:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001f6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	e007      	b.n	8001f82 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001f7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f80:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	8979      	ldrh	r1, [r7, #10]
 8001fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002100 <HAL_I2C_Master_Transmit+0x228>)
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fa79 	bl	80024c4 <I2C_TransferConfig>
 8001fd2:	e066      	b.n	80020a2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	8979      	ldrh	r1, [r7, #10]
 8001fdc:	4b48      	ldr	r3, [pc, #288]	@ (8002100 <HAL_I2C_Master_Transmit+0x228>)
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 fa6e 	bl	80024c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001fe8:	e05b      	b.n	80020a2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	6a39      	ldr	r1, [r7, #32]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f8fd 	bl	80021ee <I2C_WaitOnTXISFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e07b      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d034      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x1ca>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d130      	bne.n	80020a2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	2200      	movs	r2, #0
 8002048:	2180      	movs	r1, #128	@ 0x80
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f880 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e04d      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	2bff      	cmp	r3, #255	@ 0xff
 8002062:	d90e      	bls.n	8002082 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	22ff      	movs	r2, #255	@ 0xff
 8002068:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206e:	b2da      	uxtb	r2, r3
 8002070:	8979      	ldrh	r1, [r7, #10]
 8002072:	2300      	movs	r3, #0
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fa22 	bl	80024c4 <I2C_TransferConfig>
 8002080:	e00f      	b.n	80020a2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002090:	b2da      	uxtb	r2, r3
 8002092:	8979      	ldrh	r1, [r7, #10]
 8002094:	2300      	movs	r3, #0
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fa11 	bl	80024c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d19e      	bne.n	8001fea <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	6a39      	ldr	r1, [r7, #32]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f8e3 	bl	800227c <I2C_WaitOnSTOPFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e01a      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2220      	movs	r2, #32
 80020c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6859      	ldr	r1, [r3, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <HAL_I2C_Master_Transmit+0x22c>)
 80020d4:	400b      	ands	r3, r1
 80020d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e000      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	80002000 	.word	0x80002000
 8002104:	fe00e800 	.word	0xfe00e800

08002108 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d103      	bne.n	8002126 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2200      	movs	r2, #0
 8002124:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d007      	beq.n	8002144 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	619a      	str	r2, [r3, #24]
  }
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002160:	e031      	b.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d02d      	beq.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216a:	f7ff fb4d 	bl	8001808 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d302      	bcc.n	8002180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d122      	bne.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4013      	ands	r3, r2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	429a      	cmp	r2, r3
 800219c:	d113      	bne.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	f043 0220 	orr.w	r2, r3, #32
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00f      	b.n	80021e6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4013      	ands	r3, r2
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	bf0c      	ite	eq
 80021d6:	2301      	moveq	r3, #1
 80021d8:	2300      	movne	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d0be      	beq.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021fa:	e033      	b.n	8002264 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f87f 	bl	8002304 <I2C_IsErrorOccurred>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e031      	b.n	8002274 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002216:	d025      	beq.n	8002264 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002218:	f7ff faf6 	bl	8001808 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	429a      	cmp	r2, r3
 8002226:	d302      	bcc.n	800222e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d11a      	bne.n	8002264 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b02      	cmp	r3, #2
 800223a:	d013      	beq.n	8002264 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002240:	f043 0220 	orr.w	r2, r3, #32
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e007      	b.n	8002274 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b02      	cmp	r3, #2
 8002270:	d1c4      	bne.n	80021fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002288:	e02f      	b.n	80022ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f838 	bl	8002304 <I2C_IsErrorOccurred>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e02d      	b.n	80022fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229e:	f7ff fab3 	bl	8001808 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d302      	bcc.n	80022b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d11a      	bne.n	80022ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b20      	cmp	r3, #32
 80022c0:	d013      	beq.n	80022ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f043 0220 	orr.w	r2, r3, #32
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e007      	b.n	80022fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d1c8      	bne.n	800228a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	@ 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	d068      	beq.n	8002402 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2210      	movs	r2, #16
 8002336:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002338:	e049      	b.n	80023ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d045      	beq.n	80023ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002342:	f7ff fa61 	bl	8001808 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	429a      	cmp	r2, r3
 8002350:	d302      	bcc.n	8002358 <I2C_IsErrorOccurred+0x54>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d13a      	bne.n	80023ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002362:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800236a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800237a:	d121      	bne.n	80023c0 <I2C_IsErrorOccurred+0xbc>
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002382:	d01d      	beq.n	80023c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	2b20      	cmp	r3, #32
 8002388:	d01a      	beq.n	80023c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002398:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800239a:	f7ff fa35 	bl	8001808 <HAL_GetTick>
 800239e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a0:	e00e      	b.n	80023c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023a2:	f7ff fa31 	bl	8001808 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b19      	cmp	r3, #25
 80023ae:	d907      	bls.n	80023c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	f043 0320 	orr.w	r3, r3, #32
 80023b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80023be:	e006      	b.n	80023ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d1e9      	bne.n	80023a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d003      	beq.n	80023e4 <I2C_IsErrorOccurred+0xe0>
 80023dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0aa      	beq.n	800233a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2220      	movs	r2, #32
 80023f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002424:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	f043 0308 	orr.w	r3, r3, #8
 800243c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002446:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002468:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01c      	beq.n	80024b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff fe45 	bl	8002108 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <I2C_IsErrorOccurred+0x1bc>)
 800248a:	400b      	ands	r3, r1
 800248c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	431a      	orrs	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80024b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3728      	adds	r7, #40	@ 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	fe00e800 	.word	0xfe00e800

080024c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	817b      	strh	r3, [r7, #10]
 80024d2:	4613      	mov	r3, r2
 80024d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024d6:	897b      	ldrh	r3, [r7, #10]
 80024d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024dc:	7a7b      	ldrb	r3, [r7, #9]
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	0d5b      	lsrs	r3, r3, #21
 80024fe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <I2C_TransferConfig+0x60>)
 8002504:	430b      	orrs	r3, r1
 8002506:	43db      	mvns	r3, r3
 8002508:	ea02 0103 	and.w	r1, r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	03ff63ff 	.word	0x03ff63ff

08002528 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b20      	cmp	r3, #32
 800253c:	d138      	bne.n	80025b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002548:	2302      	movs	r3, #2
 800254a:	e032      	b.n	80025b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	@ 0x24
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800257a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6819      	ldr	r1, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025be:	b480      	push	{r7}
 80025c0:	b085      	sub	sp, #20
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d139      	bne.n	8002648 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025de:	2302      	movs	r3, #2
 80025e0:	e033      	b.n	800264a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2224      	movs	r2, #36	@ 0x24
 80025ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002610:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800265c:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <HAL_PWREx_GetVoltageRange+0x18>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40007000 	.word	0x40007000

08002674 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002682:	d130      	bne.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002684:	4b23      	ldr	r3, [pc, #140]	@ (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800268c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002690:	d038      	beq.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002692:	4b20      	ldr	r3, [pc, #128]	@ (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800269a:	4a1e      	ldr	r2, [pc, #120]	@ (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2232      	movs	r2, #50	@ 0x32
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	4a1b      	ldr	r2, [pc, #108]	@ (800271c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0c9b      	lsrs	r3, r3, #18
 80026b4:	3301      	adds	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026b8:	e002      	b.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3b01      	subs	r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026cc:	d102      	bne.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f2      	bne.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e0:	d110      	bne.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e00f      	b.n	8002706 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026f2:	d007      	beq.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026fc:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002702:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40007000 	.word	0x40007000
 8002718:	20000000 	.word	0x20000000
 800271c:	431bde83 	.word	0x431bde83

08002720 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e3ca      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002732:	4b97      	ldr	r3, [pc, #604]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800273c:	4b94      	ldr	r3, [pc, #592]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80e4 	beq.w	800291c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <HAL_RCC_OscConfig+0x4a>
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2b0c      	cmp	r3, #12
 800275e:	f040 808b 	bne.w	8002878 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b01      	cmp	r3, #1
 8002766:	f040 8087 	bne.w	8002878 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276a:	4b89      	ldr	r3, [pc, #548]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x62>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e3a2      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1a      	ldr	r2, [r3, #32]
 8002786:	4b82      	ldr	r3, [pc, #520]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_RCC_OscConfig+0x7c>
 8002792:	4b7f      	ldr	r3, [pc, #508]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800279a:	e005      	b.n	80027a8 <HAL_RCC_OscConfig+0x88>
 800279c:	4b7c      	ldr	r3, [pc, #496]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800279e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d223      	bcs.n	80027f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fd55 	bl	8003260 <RCC_SetFlashLatencyFromMSIRange>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e383      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c0:	4b73      	ldr	r3, [pc, #460]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a72      	ldr	r2, [pc, #456]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027c6:	f043 0308 	orr.w	r3, r3, #8
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b70      	ldr	r3, [pc, #448]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	496d      	ldr	r1, [pc, #436]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027de:	4b6c      	ldr	r3, [pc, #432]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	4968      	ldr	r1, [pc, #416]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
 80027f2:	e025      	b.n	8002840 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f4:	4b66      	ldr	r3, [pc, #408]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a65      	ldr	r2, [pc, #404]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027fa:	f043 0308 	orr.w	r3, r3, #8
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b63      	ldr	r3, [pc, #396]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	4960      	ldr	r1, [pc, #384]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002812:	4b5f      	ldr	r3, [pc, #380]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	495b      	ldr	r1, [pc, #364]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fd15 	bl	8003260 <RCC_SetFlashLatencyFromMSIRange>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e343      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002840:	f000 fc4a 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b52      	ldr	r3, [pc, #328]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	4950      	ldr	r1, [pc, #320]	@ (8002994 <HAL_RCC_OscConfig+0x274>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
 800285c:	4a4e      	ldr	r2, [pc, #312]	@ (8002998 <HAL_RCC_OscConfig+0x278>)
 800285e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002860:	4b4e      	ldr	r3, [pc, #312]	@ (800299c <HAL_RCC_OscConfig+0x27c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe ff7f 	bl	8001768 <HAL_InitTick>
 800286a:	4603      	mov	r3, r0
 800286c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d052      	beq.n	800291a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	e327      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d032      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002880:	4b43      	ldr	r3, [pc, #268]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a42      	ldr	r2, [pc, #264]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800288c:	f7fe ffbc 	bl	8001808 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002894:	f7fe ffb8 	bl	8001808 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e310      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b2:	4b37      	ldr	r3, [pc, #220]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a36      	ldr	r2, [pc, #216]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028b8:	f043 0308 	orr.w	r3, r3, #8
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b34      	ldr	r3, [pc, #208]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4931      	ldr	r1, [pc, #196]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	492c      	ldr	r1, [pc, #176]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
 80028e4:	e01a      	b.n	800291c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a29      	ldr	r2, [pc, #164]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f2:	f7fe ff89 	bl	8001808 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fa:	f7fe ff85 	bl	8001808 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e2dd      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800290c:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x1da>
 8002918:	e000      	b.n	800291c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800291a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d074      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b08      	cmp	r3, #8
 800292c:	d005      	beq.n	800293a <HAL_RCC_OscConfig+0x21a>
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b0c      	cmp	r3, #12
 8002932:	d10e      	bne.n	8002952 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d10b      	bne.n	8002952 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293a:	4b15      	ldr	r3, [pc, #84]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d064      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2f0>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d160      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e2ba      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x24a>
 800295c:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0b      	ldr	r2, [pc, #44]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	e026      	b.n	80029b8 <HAL_RCC_OscConfig+0x298>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002972:	d115      	bne.n	80029a0 <HAL_RCC_OscConfig+0x280>
 8002974:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a05      	ldr	r2, [pc, #20]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800297a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b03      	ldr	r3, [pc, #12]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a02      	ldr	r2, [pc, #8]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	e014      	b.n	80029b8 <HAL_RCC_OscConfig+0x298>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	08004ac4 	.word	0x08004ac4
 8002998:	20000000 	.word	0x20000000
 800299c:	20000004 	.word	0x20000004
 80029a0:	4ba0      	ldr	r3, [pc, #640]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a9f      	ldr	r2, [pc, #636]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b9d      	ldr	r3, [pc, #628]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a9c      	ldr	r2, [pc, #624]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe ff22 	bl	8001808 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe ff1e 	bl	8001808 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	@ 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e276      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029da:	4b92      	ldr	r3, [pc, #584]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2a8>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe ff0e 	bl	8001808 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe ff0a 	bl	8001808 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	@ 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e262      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a02:	4b88      	ldr	r3, [pc, #544]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x2d0>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d060      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_OscConfig+0x310>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d119      	bne.n	8002a5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d116      	bne.n	8002a5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a30:	4b7c      	ldr	r3, [pc, #496]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_OscConfig+0x328>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e23f      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b76      	ldr	r3, [pc, #472]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	4973      	ldr	r1, [pc, #460]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5c:	e040      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d023      	beq.n	8002aae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a66:	4b6f      	ldr	r3, [pc, #444]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe fec9 	bl	8001808 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fec5 	bl	8001808 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e21d      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a8c:	4b65      	ldr	r3, [pc, #404]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a98:	4b62      	ldr	r3, [pc, #392]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	495f      	ldr	r1, [pc, #380]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
 8002aac:	e018      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aae:	4b5d      	ldr	r3, [pc, #372]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe fea5 	bl	8001808 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fea1 	bl	8001808 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e1f9      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ad4:	4b53      	ldr	r3, [pc, #332]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d03c      	beq.n	8002b66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01c      	beq.n	8002b2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af4:	4b4b      	ldr	r3, [pc, #300]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afa:	4a4a      	ldr	r2, [pc, #296]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7fe fe80 	bl	8001808 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fe7c 	bl	8001808 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e1d4      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b1e:	4b41      	ldr	r3, [pc, #260]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ef      	beq.n	8002b0c <HAL_RCC_OscConfig+0x3ec>
 8002b2c:	e01b      	b.n	8002b66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b34:	4a3b      	ldr	r2, [pc, #236]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fe63 	bl	8001808 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b46:	f7fe fe5f 	bl	8001808 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1b7      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b58:	4b32      	ldr	r3, [pc, #200]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ef      	bne.n	8002b46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80a6 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b74:	2300      	movs	r3, #0
 8002b76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b78:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10d      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b84:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	4a26      	ldr	r2, [pc, #152]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b90:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba0:	4b21      	ldr	r3, [pc, #132]	@ (8002c28 <HAL_RCC_OscConfig+0x508>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d118      	bne.n	8002bde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bac:	4b1e      	ldr	r3, [pc, #120]	@ (8002c28 <HAL_RCC_OscConfig+0x508>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c28 <HAL_RCC_OscConfig+0x508>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb8:	f7fe fe26 	bl	8001808 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc0:	f7fe fe22 	bl	8001808 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e17a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd2:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <HAL_RCC_OscConfig+0x508>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d108      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x4d8>
 8002be6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bf6:	e029      	b.n	8002c4c <HAL_RCC_OscConfig+0x52c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d115      	bne.n	8002c2c <HAL_RCC_OscConfig+0x50c>
 8002c00:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c06:	4a07      	ldr	r2, [pc, #28]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c10:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c16:	4a03      	ldr	r2, [pc, #12]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c20:	e014      	b.n	8002c4c <HAL_RCC_OscConfig+0x52c>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	4a9b      	ldr	r2, [pc, #620]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c3c:	4b98      	ldr	r3, [pc, #608]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	4a97      	ldr	r2, [pc, #604]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d016      	beq.n	8002c82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fdd8 	bl	8001808 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fdd4 	bl	8001808 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e12a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c72:	4b8b      	ldr	r3, [pc, #556]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ed      	beq.n	8002c5c <HAL_RCC_OscConfig+0x53c>
 8002c80:	e015      	b.n	8002cae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe fdc1 	bl	8001808 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fe fdbd 	bl	8001808 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e113      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1ed      	bne.n	8002c8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cae:	7ffb      	ldrb	r3, [r7, #31]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	4a79      	ldr	r2, [pc, #484]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80fe 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	f040 80d0 	bne.w	8002e74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cd4:	4b72      	ldr	r3, [pc, #456]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 0203 	and.w	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d130      	bne.n	8002d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d127      	bne.n	8002d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d11f      	bne.n	8002d4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d14:	2a07      	cmp	r2, #7
 8002d16:	bf14      	ite	ne
 8002d18:	2201      	movne	r2, #1
 8002d1a:	2200      	moveq	r2, #0
 8002d1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d113      	bne.n	8002d4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d06e      	beq.n	8002e28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2b0c      	cmp	r3, #12
 8002d4e:	d069      	beq.n	8002e24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d50:	4b53      	ldr	r3, [pc, #332]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d5c:	4b50      	ldr	r3, [pc, #320]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0ad      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a4b      	ldr	r2, [pc, #300]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d78:	f7fe fd46 	bl	8001808 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe fd42 	bl	8001808 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e09a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d92:	4b43      	ldr	r3, [pc, #268]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9e:	4b40      	ldr	r3, [pc, #256]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	4b40      	ldr	r3, [pc, #256]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002dae:	3a01      	subs	r2, #1
 8002db0:	0112      	lsls	r2, r2, #4
 8002db2:	4311      	orrs	r1, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002db8:	0212      	lsls	r2, r2, #8
 8002dba:	4311      	orrs	r1, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002dc0:	0852      	lsrs	r2, r2, #1
 8002dc2:	3a01      	subs	r2, #1
 8002dc4:	0552      	lsls	r2, r2, #21
 8002dc6:	4311      	orrs	r1, r2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002dcc:	0852      	lsrs	r2, r2, #1
 8002dce:	3a01      	subs	r2, #1
 8002dd0:	0652      	lsls	r2, r2, #25
 8002dd2:	4311      	orrs	r1, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002dd8:	0912      	lsrs	r2, r2, #4
 8002dda:	0452      	lsls	r2, r2, #17
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	4930      	ldr	r1, [pc, #192]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002de4:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dfc:	f7fe fd04 	bl	8001808 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe fd00 	bl	8001808 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e058      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e16:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e22:	e050      	b.n	8002ec6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e04f      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d148      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a19      	ldr	r2, [pc, #100]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e40:	4b17      	ldr	r3, [pc, #92]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a16      	ldr	r2, [pc, #88]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e4c:	f7fe fcdc 	bl	8001808 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe fcd8 	bl	8001808 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e030      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x734>
 8002e72:	e028      	b.n	8002ec6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d023      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ea0 <HAL_RCC_OscConfig+0x780>)
 8002e80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e86:	f7fe fcbf 	bl	8001808 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8c:	e00c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fe fcbb 	bl	8001808 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d905      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e013      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea8:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <HAL_RCC_OscConfig+0x7b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ec      	bne.n	8002e8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <HAL_RCC_OscConfig+0x7b0>)
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	4905      	ldr	r1, [pc, #20]	@ (8002ed0 <HAL_RCC_OscConfig+0x7b0>)
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <HAL_RCC_OscConfig+0x7b4>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60cb      	str	r3, [r1, #12]
 8002ec0:	e001      	b.n	8002ec6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3720      	adds	r7, #32
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	feeefffc 	.word	0xfeeefffc

08002ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0e7      	b.n	80030bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b75      	ldr	r3, [pc, #468]	@ (80030c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d910      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b72      	ldr	r3, [pc, #456]	@ (80030c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0207 	bic.w	r2, r3, #7
 8002f02:	4970      	ldr	r1, [pc, #448]	@ (80030c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80030c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0cf      	b.n	80030bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d010      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	4b66      	ldr	r3, [pc, #408]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d908      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f38:	4b63      	ldr	r3, [pc, #396]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4960      	ldr	r1, [pc, #384]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d04c      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d121      	bne.n	8002fae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0a6      	b.n	80030bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f76:	4b54      	ldr	r3, [pc, #336]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d115      	bne.n	8002fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e09a      	b.n	80030bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e08e      	b.n	80030bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e086      	b.n	80030bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b46      	ldr	r3, [pc, #280]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4943      	ldr	r1, [pc, #268]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fc22 	bl	8001808 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	f7fe fc1e 	bl	8001808 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e06e      	b.n	80030bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	4b3a      	ldr	r3, [pc, #232]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 020c 	and.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1eb      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d010      	beq.n	800301e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	4b31      	ldr	r3, [pc, #196]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003008:	429a      	cmp	r2, r3
 800300a:	d208      	bcs.n	800301e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300c:	4b2e      	ldr	r3, [pc, #184]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	492b      	ldr	r1, [pc, #172]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800301e:	4b29      	ldr	r3, [pc, #164]	@ (80030c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d210      	bcs.n	800304e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302c:	4b25      	ldr	r3, [pc, #148]	@ (80030c4 <HAL_RCC_ClockConfig+0x1ec>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f023 0207 	bic.w	r2, r3, #7
 8003034:	4923      	ldr	r1, [pc, #140]	@ (80030c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303c:	4b21      	ldr	r3, [pc, #132]	@ (80030c4 <HAL_RCC_ClockConfig+0x1ec>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d001      	beq.n	800304e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e036      	b.n	80030bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800305a:	4b1b      	ldr	r3, [pc, #108]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	4918      	ldr	r1, [pc, #96]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d009      	beq.n	800308c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003078:	4b13      	ldr	r3, [pc, #76]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4910      	ldr	r1, [pc, #64]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800308c:	f000 f824 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	490b      	ldr	r1, [pc, #44]	@ (80030cc <HAL_RCC_ClockConfig+0x1f4>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	4a09      	ldr	r2, [pc, #36]	@ (80030d0 <HAL_RCC_ClockConfig+0x1f8>)
 80030aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030ac:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <HAL_RCC_ClockConfig+0x1fc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fb59 	bl	8001768 <HAL_InitTick>
 80030b6:	4603      	mov	r3, r0
 80030b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80030ba:	7afb      	ldrb	r3, [r7, #11]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40022000 	.word	0x40022000
 80030c8:	40021000 	.word	0x40021000
 80030cc:	08004ac4 	.word	0x08004ac4
 80030d0:	20000000 	.word	0x20000000
 80030d4:	20000004 	.word	0x20000004

080030d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	@ 0x24
 80030dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030e6:	4b3e      	ldr	r3, [pc, #248]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f0:	4b3b      	ldr	r3, [pc, #236]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x34>
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d121      	bne.n	800314a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d11e      	bne.n	800314a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800310c:	4b34      	ldr	r3, [pc, #208]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d107      	bne.n	8003128 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003118:	4b31      	ldr	r3, [pc, #196]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800311a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e005      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003128:	4b2d      	ldr	r3, [pc, #180]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003134:	4a2b      	ldr	r2, [pc, #172]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10d      	bne.n	8003160 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d102      	bne.n	8003156 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003150:	4b25      	ldr	r3, [pc, #148]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	e004      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b08      	cmp	r3, #8
 800315a:	d101      	bne.n	8003160 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800315c:	4b23      	ldr	r3, [pc, #140]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x114>)
 800315e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	d134      	bne.n	80031d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003166:	4b1e      	ldr	r3, [pc, #120]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d003      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0xa6>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d003      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0xac>
 800317c:	e005      	b.n	800318a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800317e:	4b1a      	ldr	r3, [pc, #104]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003180:	617b      	str	r3, [r7, #20]
      break;
 8003182:	e005      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003184:	4b19      	ldr	r3, [pc, #100]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003186:	617b      	str	r3, [r7, #20]
      break;
 8003188:	e002      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	617b      	str	r3, [r7, #20]
      break;
 800318e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003190:	4b13      	ldr	r3, [pc, #76]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	3301      	adds	r3, #1
 800319c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800319e:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	fb03 f202 	mul.w	r2, r3, r2
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031b6:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	0e5b      	lsrs	r3, r3, #25
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	3301      	adds	r3, #1
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031d0:	69bb      	ldr	r3, [r7, #24]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	@ 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	08004adc 	.word	0x08004adc
 80031e8:	00f42400 	.word	0x00f42400
 80031ec:	007a1200 	.word	0x007a1200

080031f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f4:	4b03      	ldr	r3, [pc, #12]	@ (8003204 <HAL_RCC_GetHCLKFreq+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000000 	.word	0x20000000

08003208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800320c:	f7ff fff0 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b06      	ldr	r3, [pc, #24]	@ (800322c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4904      	ldr	r1, [pc, #16]	@ (8003230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003228:	4618      	mov	r0, r3
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	08004ad4 	.word	0x08004ad4

08003234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003238:	f7ff ffda 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	0adb      	lsrs	r3, r3, #11
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	4904      	ldr	r1, [pc, #16]	@ (800325c <HAL_RCC_GetPCLK2Freq+0x28>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	08004ad4 	.word	0x08004ad4

08003260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800326c:	4b2a      	ldr	r3, [pc, #168]	@ (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003278:	f7ff f9ee 	bl	8002658 <HAL_PWREx_GetVoltageRange>
 800327c:	6178      	str	r0, [r7, #20]
 800327e:	e014      	b.n	80032aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003280:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	4a24      	ldr	r2, [pc, #144]	@ (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800328a:	6593      	str	r3, [r2, #88]	@ 0x58
 800328c:	4b22      	ldr	r3, [pc, #136]	@ (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003298:	f7ff f9de 	bl	8002658 <HAL_PWREx_GetVoltageRange>
 800329c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032b0:	d10b      	bne.n	80032ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b80      	cmp	r3, #128	@ 0x80
 80032b6:	d919      	bls.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80032bc:	d902      	bls.n	80032c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032be:	2302      	movs	r3, #2
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	e013      	b.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032c4:	2301      	movs	r3, #1
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	e010      	b.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b80      	cmp	r3, #128	@ 0x80
 80032ce:	d902      	bls.n	80032d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032d0:	2303      	movs	r3, #3
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	e00a      	b.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b80      	cmp	r3, #128	@ 0x80
 80032da:	d102      	bne.n	80032e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032dc:	2302      	movs	r3, #2
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	e004      	b.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b70      	cmp	r3, #112	@ 0x70
 80032e6:	d101      	bne.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032e8:	2301      	movs	r3, #1
 80032ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 0207 	bic.w	r2, r3, #7
 80032f4:	4909      	ldr	r1, [pc, #36]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032fc:	4b07      	ldr	r3, [pc, #28]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	429a      	cmp	r2, r3
 8003308:	d001      	beq.n	800330e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	40022000 	.word	0x40022000

08003320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003328:	2300      	movs	r3, #0
 800332a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800332c:	2300      	movs	r3, #0
 800332e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003338:	2b00      	cmp	r3, #0
 800333a:	d041      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003340:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003344:	d02a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003346:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800334a:	d824      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800334c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003350:	d008      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003352:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003356:	d81e      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800335c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003360:	d010      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003362:	e018      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003364:	4b86      	ldr	r3, [pc, #536]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a85      	ldr	r2, [pc, #532]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003370:	e015      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fabb 	bl	80038f4 <RCCEx_PLLSAI1_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003382:	e00c      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3320      	adds	r3, #32
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fba6 	bl	8003adc <RCCEx_PLLSAI2_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003394:	e003      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	74fb      	strb	r3, [r7, #19]
      break;
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800339c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10b      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033a4:	4b76      	ldr	r3, [pc, #472]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033b2:	4973      	ldr	r1, [pc, #460]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033ba:	e001      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d041      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033d4:	d02a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033da:	d824      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033e0:	d008      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033e6:	d81e      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033f0:	d010      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033f2:	e018      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033f4:	4b62      	ldr	r3, [pc, #392]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4a61      	ldr	r2, [pc, #388]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003400:	e015      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fa73 	bl	80038f4 <RCCEx_PLLSAI1_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003412:	e00c      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3320      	adds	r3, #32
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fb5e 	bl	8003adc <RCCEx_PLLSAI2_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003424:	e003      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	74fb      	strb	r3, [r7, #19]
      break;
 800342a:	e000      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800342c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003434:	4b52      	ldr	r3, [pc, #328]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003442:	494f      	ldr	r1, [pc, #316]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800344a:	e001      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a0 	beq.w	800359e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003462:	4b47      	ldr	r3, [pc, #284]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003472:	2300      	movs	r3, #0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003478:	4b41      	ldr	r3, [pc, #260]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347c:	4a40      	ldr	r2, [pc, #256]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	@ 0x58
 8003484:	4b3e      	ldr	r3, [pc, #248]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003490:	2301      	movs	r3, #1
 8003492:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003494:	4b3b      	ldr	r3, [pc, #236]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a3a      	ldr	r2, [pc, #232]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800349a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034a0:	f7fe f9b2 	bl	8001808 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034a6:	e009      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a8:	f7fe f9ae 	bl	8001808 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d902      	bls.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	74fb      	strb	r3, [r7, #19]
        break;
 80034ba:	e005      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034bc:	4b31      	ldr	r3, [pc, #196]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ef      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d15c      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01f      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d019      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034ec:	4b24      	ldr	r3, [pc, #144]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034f8:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fe:	4a20      	ldr	r2, [pc, #128]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003508:	4b1d      	ldr	r3, [pc, #116]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350e:	4a1c      	ldr	r2, [pc, #112]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003518:	4a19      	ldr	r2, [pc, #100]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d016      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fe f96d 	bl	8001808 <HAL_GetTick>
 800352e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003530:	e00b      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fe f969 	bl	8001808 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003540:	4293      	cmp	r3, r2
 8003542:	d902      	bls.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	74fb      	strb	r3, [r7, #19]
            break;
 8003548:	e006      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354a:	4b0d      	ldr	r3, [pc, #52]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0ec      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800355e:	4b08      	ldr	r3, [pc, #32]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003564:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800356e:	4904      	ldr	r1, [pc, #16]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003576:	e009      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	74bb      	strb	r3, [r7, #18]
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358c:	7c7b      	ldrb	r3, [r7, #17]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d105      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b9e      	ldr	r3, [pc, #632]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	4a9d      	ldr	r2, [pc, #628]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800359c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035aa:	4b98      	ldr	r3, [pc, #608]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b0:	f023 0203 	bic.w	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	4994      	ldr	r1, [pc, #592]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035cc:	4b8f      	ldr	r3, [pc, #572]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d2:	f023 020c 	bic.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035da:	498c      	ldr	r1, [pc, #560]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035ee:	4b87      	ldr	r3, [pc, #540]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	4983      	ldr	r1, [pc, #524]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003610:	4b7e      	ldr	r3, [pc, #504]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003616:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	497b      	ldr	r1, [pc, #492]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003632:	4b76      	ldr	r3, [pc, #472]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003638:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003640:	4972      	ldr	r1, [pc, #456]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003654:	4b6d      	ldr	r3, [pc, #436]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003662:	496a      	ldr	r1, [pc, #424]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003676:	4b65      	ldr	r3, [pc, #404]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	4961      	ldr	r1, [pc, #388]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003698:	4b5c      	ldr	r3, [pc, #368]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a6:	4959      	ldr	r1, [pc, #356]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ba:	4b54      	ldr	r3, [pc, #336]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c8:	4950      	ldr	r1, [pc, #320]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036dc:	4b4b      	ldr	r3, [pc, #300]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ea:	4948      	ldr	r1, [pc, #288]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036fe:	4b43      	ldr	r3, [pc, #268]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003704:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370c:	493f      	ldr	r1, [pc, #252]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d028      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003720:	4b3a      	ldr	r3, [pc, #232]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800372e:	4937      	ldr	r1, [pc, #220]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800373a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800373e:	d106      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003740:	4b32      	ldr	r3, [pc, #200]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4a31      	ldr	r2, [pc, #196]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800374a:	60d3      	str	r3, [r2, #12]
 800374c:	e011      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003756:	d10c      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	2101      	movs	r1, #1
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f8c8 	bl	80038f4 <RCCEx_PLLSAI1_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d028      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800377e:	4b23      	ldr	r3, [pc, #140]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003784:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378c:	491f      	ldr	r1, [pc, #124]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800379c:	d106      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800379e:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4a1a      	ldr	r2, [pc, #104]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037a8:	60d3      	str	r3, [r2, #12]
 80037aa:	e011      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	2101      	movs	r1, #1
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f899 	bl	80038f4 <RCCEx_PLLSAI1_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02b      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ea:	4908      	ldr	r1, [pc, #32]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037fa:	d109      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fc:	4b03      	ldr	r3, [pc, #12]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a02      	ldr	r2, [pc, #8]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003806:	60d3      	str	r3, [r2, #12]
 8003808:	e014      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003814:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003818:	d10c      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	2101      	movs	r1, #1
 8003820:	4618      	mov	r0, r3
 8003822:	f000 f867 	bl	80038f4 <RCCEx_PLLSAI1_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d02f      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003840:	4b2b      	ldr	r3, [pc, #172]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003846:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800384e:	4928      	ldr	r1, [pc, #160]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800385a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800385e:	d10d      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	2102      	movs	r1, #2
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f844 	bl	80038f4 <RCCEx_PLLSAI1_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d014      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	74bb      	strb	r3, [r7, #18]
 800387a:	e011      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003884:	d10c      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3320      	adds	r3, #32
 800388a:	2102      	movs	r1, #2
 800388c:	4618      	mov	r0, r3
 800388e:	f000 f925 	bl	8003adc <RCCEx_PLLSAI2_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003896:	7cfb      	ldrb	r3, [r7, #19]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038ac:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ba:	490d      	ldr	r1, [pc, #52]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038ce:	4b08      	ldr	r3, [pc, #32]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038de:	4904      	ldr	r1, [pc, #16]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000

080038f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003902:	4b75      	ldr	r3, [pc, #468]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800390e:	4b72      	ldr	r3, [pc, #456]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0203 	and.w	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d10d      	bne.n	800393a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
       ||
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003926:	4b6c      	ldr	r3, [pc, #432]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
       ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d047      	beq.n	80039ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
 800393e:	e044      	b.n	80039ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d018      	beq.n	800397a <RCCEx_PLLSAI1_Config+0x86>
 8003948:	2b03      	cmp	r3, #3
 800394a:	d825      	bhi.n	8003998 <RCCEx_PLLSAI1_Config+0xa4>
 800394c:	2b01      	cmp	r3, #1
 800394e:	d002      	beq.n	8003956 <RCCEx_PLLSAI1_Config+0x62>
 8003950:	2b02      	cmp	r3, #2
 8003952:	d009      	beq.n	8003968 <RCCEx_PLLSAI1_Config+0x74>
 8003954:	e020      	b.n	8003998 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003956:	4b60      	ldr	r3, [pc, #384]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11d      	bne.n	800399e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003966:	e01a      	b.n	800399e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003968:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003970:	2b00      	cmp	r3, #0
 8003972:	d116      	bne.n	80039a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003978:	e013      	b.n	80039a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800397a:	4b57      	ldr	r3, [pc, #348]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10f      	bne.n	80039a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003986:	4b54      	ldr	r3, [pc, #336]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003996:	e006      	b.n	80039a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      break;
 800399c:	e004      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800399e:	bf00      	nop
 80039a0:	e002      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10d      	bne.n	80039ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ae:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6819      	ldr	r1, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	3b01      	subs	r3, #1
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	430b      	orrs	r3, r1
 80039c4:	4944      	ldr	r1, [pc, #272]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d17d      	bne.n	8003acc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039d0:	4b41      	ldr	r3, [pc, #260]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a40      	ldr	r2, [pc, #256]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039dc:	f7fd ff14 	bl	8001808 <HAL_GetTick>
 80039e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039e2:	e009      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e4:	f7fd ff10 	bl	8001808 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d902      	bls.n	80039f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	73fb      	strb	r3, [r7, #15]
        break;
 80039f6:	e005      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039f8:	4b37      	ldr	r3, [pc, #220]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1ef      	bne.n	80039e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d160      	bne.n	8003acc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d111      	bne.n	8003a34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a10:	4b31      	ldr	r3, [pc, #196]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6892      	ldr	r2, [r2, #8]
 8003a20:	0211      	lsls	r1, r2, #8
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68d2      	ldr	r2, [r2, #12]
 8003a26:	0912      	lsrs	r2, r2, #4
 8003a28:	0452      	lsls	r2, r2, #17
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	492a      	ldr	r1, [pc, #168]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	610b      	str	r3, [r1, #16]
 8003a32:	e027      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d112      	bne.n	8003a60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a3a:	4b27      	ldr	r3, [pc, #156]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6892      	ldr	r2, [r2, #8]
 8003a4a:	0211      	lsls	r1, r2, #8
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6912      	ldr	r2, [r2, #16]
 8003a50:	0852      	lsrs	r2, r2, #1
 8003a52:	3a01      	subs	r2, #1
 8003a54:	0552      	lsls	r2, r2, #21
 8003a56:	430a      	orrs	r2, r1
 8003a58:	491f      	ldr	r1, [pc, #124]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	610b      	str	r3, [r1, #16]
 8003a5e:	e011      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a60:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6892      	ldr	r2, [r2, #8]
 8003a70:	0211      	lsls	r1, r2, #8
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6952      	ldr	r2, [r2, #20]
 8003a76:	0852      	lsrs	r2, r2, #1
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	0652      	lsls	r2, r2, #25
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	4916      	ldr	r1, [pc, #88]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a84:	4b14      	ldr	r3, [pc, #80]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a13      	ldr	r2, [pc, #76]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fd feba 	bl	8001808 <HAL_GetTick>
 8003a94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a96:	e009      	b.n	8003aac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a98:	f7fd feb6 	bl	8001808 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d902      	bls.n	8003aac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	73fb      	strb	r3, [r7, #15]
          break;
 8003aaa:	e005      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ef      	beq.n	8003a98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003abe:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	4904      	ldr	r1, [pc, #16]	@ (8003ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000

08003adc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aea:	4b6a      	ldr	r3, [pc, #424]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d018      	beq.n	8003b28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003af6:	4b67      	ldr	r3, [pc, #412]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f003 0203 	and.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d10d      	bne.n	8003b22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
       ||
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b0e:	4b61      	ldr	r3, [pc, #388]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d047      	beq.n	8003bb2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	e044      	b.n	8003bb2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d018      	beq.n	8003b62 <RCCEx_PLLSAI2_Config+0x86>
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d825      	bhi.n	8003b80 <RCCEx_PLLSAI2_Config+0xa4>
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d002      	beq.n	8003b3e <RCCEx_PLLSAI2_Config+0x62>
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d009      	beq.n	8003b50 <RCCEx_PLLSAI2_Config+0x74>
 8003b3c:	e020      	b.n	8003b80 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b3e:	4b55      	ldr	r3, [pc, #340]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d11d      	bne.n	8003b86 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b4e:	e01a      	b.n	8003b86 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b50:	4b50      	ldr	r3, [pc, #320]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d116      	bne.n	8003b8a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b60:	e013      	b.n	8003b8a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b62:	4b4c      	ldr	r3, [pc, #304]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10f      	bne.n	8003b8e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b6e:	4b49      	ldr	r3, [pc, #292]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b7e:	e006      	b.n	8003b8e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      break;
 8003b84:	e004      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b86:	bf00      	nop
 8003b88:	e002      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e000      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10d      	bne.n	8003bb2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b96:	4b3f      	ldr	r3, [pc, #252]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	430b      	orrs	r3, r1
 8003bac:	4939      	ldr	r1, [pc, #228]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d167      	bne.n	8003c88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bb8:	4b36      	ldr	r3, [pc, #216]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a35      	ldr	r2, [pc, #212]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc4:	f7fd fe20 	bl	8001808 <HAL_GetTick>
 8003bc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bca:	e009      	b.n	8003be0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bcc:	f7fd fe1c 	bl	8001808 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d902      	bls.n	8003be0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bde:	e005      	b.n	8003bec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003be0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ef      	bne.n	8003bcc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d14a      	bne.n	8003c88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d111      	bne.n	8003c1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bf8:	4b26      	ldr	r3, [pc, #152]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6892      	ldr	r2, [r2, #8]
 8003c08:	0211      	lsls	r1, r2, #8
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68d2      	ldr	r2, [r2, #12]
 8003c0e:	0912      	lsrs	r2, r2, #4
 8003c10:	0452      	lsls	r2, r2, #17
 8003c12:	430a      	orrs	r2, r1
 8003c14:	491f      	ldr	r1, [pc, #124]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	614b      	str	r3, [r1, #20]
 8003c1a:	e011      	b.n	8003c40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6892      	ldr	r2, [r2, #8]
 8003c2c:	0211      	lsls	r1, r2, #8
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6912      	ldr	r2, [r2, #16]
 8003c32:	0852      	lsrs	r2, r2, #1
 8003c34:	3a01      	subs	r2, #1
 8003c36:	0652      	lsls	r2, r2, #25
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	4916      	ldr	r1, [pc, #88]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c40:	4b14      	ldr	r3, [pc, #80]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a13      	ldr	r2, [pc, #76]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fd fddc 	bl	8001808 <HAL_GetTick>
 8003c50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c52:	e009      	b.n	8003c68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c54:	f7fd fdd8 	bl	8001808 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d902      	bls.n	8003c68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	73fb      	strb	r3, [r7, #15]
          break;
 8003c66:	e005      	b.n	8003c74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c68:	4b0a      	ldr	r3, [pc, #40]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ef      	beq.n	8003c54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c7a:	4b06      	ldr	r3, [pc, #24]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	4904      	ldr	r1, [pc, #16]	@ (8003c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000

08003c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e040      	b.n	8003d2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd fc6c 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	@ 0x24
 8003cc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fc32 	bl	8004548 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f977 	bl	8003fd8 <UART_SetConfig>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e01b      	b.n	8003d2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fcb1 	bl	800468c <UART_CheckIdleState>
 8003d2a:	4603      	mov	r3, r0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	@ 0x28
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d177      	bne.n	8003e3c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_UART_Transmit+0x24>
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e070      	b.n	8003e3e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2221      	movs	r2, #33	@ 0x21
 8003d68:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d6a:	f7fd fd4d 	bl	8001808 <HAL_GetTick>
 8003d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	88fa      	ldrh	r2, [r7, #6]
 8003d74:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d88:	d108      	bne.n	8003d9c <HAL_UART_Transmit+0x68>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d104      	bne.n	8003d9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	e003      	b.n	8003da4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003da4:	e02f      	b.n	8003e06 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2200      	movs	r2, #0
 8003dae:	2180      	movs	r1, #128	@ 0x80
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fd13 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e03b      	b.n	8003e3e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10b      	bne.n	8003de4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	881a      	ldrh	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dd8:	b292      	uxth	r2, r2
 8003dda:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	3302      	adds	r3, #2
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	e007      	b.n	8003df4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	781a      	ldrb	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3301      	adds	r3, #1
 8003df2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1c9      	bne.n	8003da6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2140      	movs	r1, #64	@ 0x40
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fcdd 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e005      	b.n	8003e3e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e000      	b.n	8003e3e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08a      	sub	sp, #40	@ 0x28
 8003e4a:	af02      	add	r7, sp, #8
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	f040 80b6 	bne.w	8003fce <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_UART_Receive+0x28>
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0ae      	b.n	8003fd0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2222      	movs	r2, #34	@ 0x22
 8003e7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e88:	f7fd fcbe 	bl	8001808 <HAL_GetTick>
 8003e8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	88fa      	ldrh	r2, [r7, #6]
 8003e92:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_UART_Receive+0x80>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d105      	bne.n	8003ebc <HAL_UART_Receive+0x76>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003eb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003eba:	e02d      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	22ff      	movs	r2, #255	@ 0xff
 8003ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ec4:	e028      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10d      	bne.n	8003eea <HAL_UART_Receive+0xa4>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d104      	bne.n	8003ee0 <HAL_UART_Receive+0x9a>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	22ff      	movs	r2, #255	@ 0xff
 8003eda:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ede:	e01b      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	227f      	movs	r2, #127	@ 0x7f
 8003ee4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ee8:	e016      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ef2:	d10d      	bne.n	8003f10 <HAL_UART_Receive+0xca>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <HAL_UART_Receive+0xc0>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	227f      	movs	r2, #127	@ 0x7f
 8003f00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f04:	e008      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	223f      	movs	r2, #63	@ 0x3f
 8003f0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f0e:	e003      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003f1e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f28:	d108      	bne.n	8003f3c <HAL_UART_Receive+0xf6>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e003      	b.n	8003f44 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f44:	e037      	b.n	8003fb6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2120      	movs	r1, #32
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fc43 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e033      	b.n	8003fd0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10c      	bne.n	8003f88 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	8a7b      	ldrh	r3, [r7, #18]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	3302      	adds	r3, #2
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	e00d      	b.n	8003fa4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	8a7b      	ldrh	r3, [r7, #18]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4013      	ands	r3, r2
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1c1      	bne.n	8003f46 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e000      	b.n	8003fd0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
  }
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3720      	adds	r7, #32
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fdc:	b08a      	sub	sp, #40	@ 0x28
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4ba4      	ldr	r3, [pc, #656]	@ (8004298 <UART_SetConfig+0x2c0>)
 8004008:	4013      	ands	r3, r2
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004010:	430b      	orrs	r3, r1
 8004012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a99      	ldr	r2, [pc, #612]	@ (800429c <UART_SetConfig+0x2c4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004040:	4313      	orrs	r3, r2
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a90      	ldr	r2, [pc, #576]	@ (80042a0 <UART_SetConfig+0x2c8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d126      	bne.n	80040b0 <UART_SetConfig+0xd8>
 8004062:	4b90      	ldr	r3, [pc, #576]	@ (80042a4 <UART_SetConfig+0x2cc>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b03      	cmp	r3, #3
 800406e:	d81b      	bhi.n	80040a8 <UART_SetConfig+0xd0>
 8004070:	a201      	add	r2, pc, #4	@ (adr r2, 8004078 <UART_SetConfig+0xa0>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	08004089 	.word	0x08004089
 800407c:	08004099 	.word	0x08004099
 8004080:	08004091 	.word	0x08004091
 8004084:	080040a1 	.word	0x080040a1
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800408e:	e116      	b.n	80042be <UART_SetConfig+0x2e6>
 8004090:	2302      	movs	r3, #2
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004096:	e112      	b.n	80042be <UART_SetConfig+0x2e6>
 8004098:	2304      	movs	r3, #4
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409e:	e10e      	b.n	80042be <UART_SetConfig+0x2e6>
 80040a0:	2308      	movs	r3, #8
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a6:	e10a      	b.n	80042be <UART_SetConfig+0x2e6>
 80040a8:	2310      	movs	r3, #16
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ae:	e106      	b.n	80042be <UART_SetConfig+0x2e6>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a7c      	ldr	r2, [pc, #496]	@ (80042a8 <UART_SetConfig+0x2d0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d138      	bne.n	800412c <UART_SetConfig+0x154>
 80040ba:	4b7a      	ldr	r3, [pc, #488]	@ (80042a4 <UART_SetConfig+0x2cc>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c0:	f003 030c 	and.w	r3, r3, #12
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d82d      	bhi.n	8004124 <UART_SetConfig+0x14c>
 80040c8:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <UART_SetConfig+0xf8>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	08004105 	.word	0x08004105
 80040d4:	08004125 	.word	0x08004125
 80040d8:	08004125 	.word	0x08004125
 80040dc:	08004125 	.word	0x08004125
 80040e0:	08004115 	.word	0x08004115
 80040e4:	08004125 	.word	0x08004125
 80040e8:	08004125 	.word	0x08004125
 80040ec:	08004125 	.word	0x08004125
 80040f0:	0800410d 	.word	0x0800410d
 80040f4:	08004125 	.word	0x08004125
 80040f8:	08004125 	.word	0x08004125
 80040fc:	08004125 	.word	0x08004125
 8004100:	0800411d 	.word	0x0800411d
 8004104:	2300      	movs	r3, #0
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800410a:	e0d8      	b.n	80042be <UART_SetConfig+0x2e6>
 800410c:	2302      	movs	r3, #2
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004112:	e0d4      	b.n	80042be <UART_SetConfig+0x2e6>
 8004114:	2304      	movs	r3, #4
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800411a:	e0d0      	b.n	80042be <UART_SetConfig+0x2e6>
 800411c:	2308      	movs	r3, #8
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004122:	e0cc      	b.n	80042be <UART_SetConfig+0x2e6>
 8004124:	2310      	movs	r3, #16
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800412a:	e0c8      	b.n	80042be <UART_SetConfig+0x2e6>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a5e      	ldr	r2, [pc, #376]	@ (80042ac <UART_SetConfig+0x2d4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d125      	bne.n	8004182 <UART_SetConfig+0x1aa>
 8004136:	4b5b      	ldr	r3, [pc, #364]	@ (80042a4 <UART_SetConfig+0x2cc>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004140:	2b30      	cmp	r3, #48	@ 0x30
 8004142:	d016      	beq.n	8004172 <UART_SetConfig+0x19a>
 8004144:	2b30      	cmp	r3, #48	@ 0x30
 8004146:	d818      	bhi.n	800417a <UART_SetConfig+0x1a2>
 8004148:	2b20      	cmp	r3, #32
 800414a:	d00a      	beq.n	8004162 <UART_SetConfig+0x18a>
 800414c:	2b20      	cmp	r3, #32
 800414e:	d814      	bhi.n	800417a <UART_SetConfig+0x1a2>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <UART_SetConfig+0x182>
 8004154:	2b10      	cmp	r3, #16
 8004156:	d008      	beq.n	800416a <UART_SetConfig+0x192>
 8004158:	e00f      	b.n	800417a <UART_SetConfig+0x1a2>
 800415a:	2300      	movs	r3, #0
 800415c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004160:	e0ad      	b.n	80042be <UART_SetConfig+0x2e6>
 8004162:	2302      	movs	r3, #2
 8004164:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004168:	e0a9      	b.n	80042be <UART_SetConfig+0x2e6>
 800416a:	2304      	movs	r3, #4
 800416c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004170:	e0a5      	b.n	80042be <UART_SetConfig+0x2e6>
 8004172:	2308      	movs	r3, #8
 8004174:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004178:	e0a1      	b.n	80042be <UART_SetConfig+0x2e6>
 800417a:	2310      	movs	r3, #16
 800417c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004180:	e09d      	b.n	80042be <UART_SetConfig+0x2e6>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a4a      	ldr	r2, [pc, #296]	@ (80042b0 <UART_SetConfig+0x2d8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d125      	bne.n	80041d8 <UART_SetConfig+0x200>
 800418c:	4b45      	ldr	r3, [pc, #276]	@ (80042a4 <UART_SetConfig+0x2cc>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004192:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004196:	2bc0      	cmp	r3, #192	@ 0xc0
 8004198:	d016      	beq.n	80041c8 <UART_SetConfig+0x1f0>
 800419a:	2bc0      	cmp	r3, #192	@ 0xc0
 800419c:	d818      	bhi.n	80041d0 <UART_SetConfig+0x1f8>
 800419e:	2b80      	cmp	r3, #128	@ 0x80
 80041a0:	d00a      	beq.n	80041b8 <UART_SetConfig+0x1e0>
 80041a2:	2b80      	cmp	r3, #128	@ 0x80
 80041a4:	d814      	bhi.n	80041d0 <UART_SetConfig+0x1f8>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <UART_SetConfig+0x1d8>
 80041aa:	2b40      	cmp	r3, #64	@ 0x40
 80041ac:	d008      	beq.n	80041c0 <UART_SetConfig+0x1e8>
 80041ae:	e00f      	b.n	80041d0 <UART_SetConfig+0x1f8>
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041b6:	e082      	b.n	80042be <UART_SetConfig+0x2e6>
 80041b8:	2302      	movs	r3, #2
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041be:	e07e      	b.n	80042be <UART_SetConfig+0x2e6>
 80041c0:	2304      	movs	r3, #4
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041c6:	e07a      	b.n	80042be <UART_SetConfig+0x2e6>
 80041c8:	2308      	movs	r3, #8
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ce:	e076      	b.n	80042be <UART_SetConfig+0x2e6>
 80041d0:	2310      	movs	r3, #16
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041d6:	e072      	b.n	80042be <UART_SetConfig+0x2e6>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a35      	ldr	r2, [pc, #212]	@ (80042b4 <UART_SetConfig+0x2dc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d12a      	bne.n	8004238 <UART_SetConfig+0x260>
 80041e2:	4b30      	ldr	r3, [pc, #192]	@ (80042a4 <UART_SetConfig+0x2cc>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041f0:	d01a      	beq.n	8004228 <UART_SetConfig+0x250>
 80041f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041f6:	d81b      	bhi.n	8004230 <UART_SetConfig+0x258>
 80041f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041fc:	d00c      	beq.n	8004218 <UART_SetConfig+0x240>
 80041fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004202:	d815      	bhi.n	8004230 <UART_SetConfig+0x258>
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <UART_SetConfig+0x238>
 8004208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420c:	d008      	beq.n	8004220 <UART_SetConfig+0x248>
 800420e:	e00f      	b.n	8004230 <UART_SetConfig+0x258>
 8004210:	2300      	movs	r3, #0
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004216:	e052      	b.n	80042be <UART_SetConfig+0x2e6>
 8004218:	2302      	movs	r3, #2
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421e:	e04e      	b.n	80042be <UART_SetConfig+0x2e6>
 8004220:	2304      	movs	r3, #4
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004226:	e04a      	b.n	80042be <UART_SetConfig+0x2e6>
 8004228:	2308      	movs	r3, #8
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422e:	e046      	b.n	80042be <UART_SetConfig+0x2e6>
 8004230:	2310      	movs	r3, #16
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004236:	e042      	b.n	80042be <UART_SetConfig+0x2e6>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a17      	ldr	r2, [pc, #92]	@ (800429c <UART_SetConfig+0x2c4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d13a      	bne.n	80042b8 <UART_SetConfig+0x2e0>
 8004242:	4b18      	ldr	r3, [pc, #96]	@ (80042a4 <UART_SetConfig+0x2cc>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004248:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800424c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004250:	d01a      	beq.n	8004288 <UART_SetConfig+0x2b0>
 8004252:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004256:	d81b      	bhi.n	8004290 <UART_SetConfig+0x2b8>
 8004258:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800425c:	d00c      	beq.n	8004278 <UART_SetConfig+0x2a0>
 800425e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004262:	d815      	bhi.n	8004290 <UART_SetConfig+0x2b8>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <UART_SetConfig+0x298>
 8004268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800426c:	d008      	beq.n	8004280 <UART_SetConfig+0x2a8>
 800426e:	e00f      	b.n	8004290 <UART_SetConfig+0x2b8>
 8004270:	2300      	movs	r3, #0
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004276:	e022      	b.n	80042be <UART_SetConfig+0x2e6>
 8004278:	2302      	movs	r3, #2
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800427e:	e01e      	b.n	80042be <UART_SetConfig+0x2e6>
 8004280:	2304      	movs	r3, #4
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004286:	e01a      	b.n	80042be <UART_SetConfig+0x2e6>
 8004288:	2308      	movs	r3, #8
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800428e:	e016      	b.n	80042be <UART_SetConfig+0x2e6>
 8004290:	2310      	movs	r3, #16
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004296:	e012      	b.n	80042be <UART_SetConfig+0x2e6>
 8004298:	efff69f3 	.word	0xefff69f3
 800429c:	40008000 	.word	0x40008000
 80042a0:	40013800 	.word	0x40013800
 80042a4:	40021000 	.word	0x40021000
 80042a8:	40004400 	.word	0x40004400
 80042ac:	40004800 	.word	0x40004800
 80042b0:	40004c00 	.word	0x40004c00
 80042b4:	40005000 	.word	0x40005000
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a9f      	ldr	r2, [pc, #636]	@ (8004540 <UART_SetConfig+0x568>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d17a      	bne.n	80043be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d824      	bhi.n	800431a <UART_SetConfig+0x342>
 80042d0:	a201      	add	r2, pc, #4	@ (adr r2, 80042d8 <UART_SetConfig+0x300>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	0800431b 	.word	0x0800431b
 80042e0:	08004305 	.word	0x08004305
 80042e4:	0800431b 	.word	0x0800431b
 80042e8:	0800430b 	.word	0x0800430b
 80042ec:	0800431b 	.word	0x0800431b
 80042f0:	0800431b 	.word	0x0800431b
 80042f4:	0800431b 	.word	0x0800431b
 80042f8:	08004313 	.word	0x08004313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042fc:	f7fe ff84 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8004300:	61f8      	str	r0, [r7, #28]
        break;
 8004302:	e010      	b.n	8004326 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004304:	4b8f      	ldr	r3, [pc, #572]	@ (8004544 <UART_SetConfig+0x56c>)
 8004306:	61fb      	str	r3, [r7, #28]
        break;
 8004308:	e00d      	b.n	8004326 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800430a:	f7fe fee5 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 800430e:	61f8      	str	r0, [r7, #28]
        break;
 8004310:	e009      	b.n	8004326 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004316:	61fb      	str	r3, [r7, #28]
        break;
 8004318:	e005      	b.n	8004326 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004324:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80fb 	beq.w	8004524 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	429a      	cmp	r2, r3
 800433c:	d305      	bcc.n	800434a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	429a      	cmp	r2, r3
 8004348:	d903      	bls.n	8004352 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004350:	e0e8      	b.n	8004524 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2200      	movs	r2, #0
 8004356:	461c      	mov	r4, r3
 8004358:	4615      	mov	r5, r2
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	022b      	lsls	r3, r5, #8
 8004364:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004368:	0222      	lsls	r2, r4, #8
 800436a:	68f9      	ldr	r1, [r7, #12]
 800436c:	6849      	ldr	r1, [r1, #4]
 800436e:	0849      	lsrs	r1, r1, #1
 8004370:	2000      	movs	r0, #0
 8004372:	4688      	mov	r8, r1
 8004374:	4681      	mov	r9, r0
 8004376:	eb12 0a08 	adds.w	sl, r2, r8
 800437a:	eb43 0b09 	adc.w	fp, r3, r9
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800438c:	4650      	mov	r0, sl
 800438e:	4659      	mov	r1, fp
 8004390:	f7fc fb18 	bl	80009c4 <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4613      	mov	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043a2:	d308      	bcc.n	80043b6 <UART_SetConfig+0x3de>
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043aa:	d204      	bcs.n	80043b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	60da      	str	r2, [r3, #12]
 80043b4:	e0b6      	b.n	8004524 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043bc:	e0b2      	b.n	8004524 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c6:	d15e      	bne.n	8004486 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80043c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d828      	bhi.n	8004422 <UART_SetConfig+0x44a>
 80043d0:	a201      	add	r2, pc, #4	@ (adr r2, 80043d8 <UART_SetConfig+0x400>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	08004405 	.word	0x08004405
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	08004423 	.word	0x08004423
 80043e8:	08004413 	.word	0x08004413
 80043ec:	08004423 	.word	0x08004423
 80043f0:	08004423 	.word	0x08004423
 80043f4:	08004423 	.word	0x08004423
 80043f8:	0800441b 	.word	0x0800441b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7fe ff04 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8004400:	61f8      	str	r0, [r7, #28]
        break;
 8004402:	e014      	b.n	800442e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004404:	f7fe ff16 	bl	8003234 <HAL_RCC_GetPCLK2Freq>
 8004408:	61f8      	str	r0, [r7, #28]
        break;
 800440a:	e010      	b.n	800442e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800440c:	4b4d      	ldr	r3, [pc, #308]	@ (8004544 <UART_SetConfig+0x56c>)
 800440e:	61fb      	str	r3, [r7, #28]
        break;
 8004410:	e00d      	b.n	800442e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004412:	f7fe fe61 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8004416:	61f8      	str	r0, [r7, #28]
        break;
 8004418:	e009      	b.n	800442e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800441e:	61fb      	str	r3, [r7, #28]
        break;
 8004420:	e005      	b.n	800442e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800442c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d077      	beq.n	8004524 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	005a      	lsls	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	441a      	add	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b0f      	cmp	r3, #15
 800444e:	d916      	bls.n	800447e <UART_SetConfig+0x4a6>
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004456:	d212      	bcs.n	800447e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f023 030f 	bic.w	r3, r3, #15
 8004460:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	b29b      	uxth	r3, r3
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	b29a      	uxth	r2, r3
 800446e:	8afb      	ldrh	r3, [r7, #22]
 8004470:	4313      	orrs	r3, r2
 8004472:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	8afa      	ldrh	r2, [r7, #22]
 800447a:	60da      	str	r2, [r3, #12]
 800447c:	e052      	b.n	8004524 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004484:	e04e      	b.n	8004524 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004486:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800448a:	2b08      	cmp	r3, #8
 800448c:	d827      	bhi.n	80044de <UART_SetConfig+0x506>
 800448e:	a201      	add	r2, pc, #4	@ (adr r2, 8004494 <UART_SetConfig+0x4bc>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044b9 	.word	0x080044b9
 8004498:	080044c1 	.word	0x080044c1
 800449c:	080044c9 	.word	0x080044c9
 80044a0:	080044df 	.word	0x080044df
 80044a4:	080044cf 	.word	0x080044cf
 80044a8:	080044df 	.word	0x080044df
 80044ac:	080044df 	.word	0x080044df
 80044b0:	080044df 	.word	0x080044df
 80044b4:	080044d7 	.word	0x080044d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b8:	f7fe fea6 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 80044bc:	61f8      	str	r0, [r7, #28]
        break;
 80044be:	e014      	b.n	80044ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c0:	f7fe feb8 	bl	8003234 <HAL_RCC_GetPCLK2Freq>
 80044c4:	61f8      	str	r0, [r7, #28]
        break;
 80044c6:	e010      	b.n	80044ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004544 <UART_SetConfig+0x56c>)
 80044ca:	61fb      	str	r3, [r7, #28]
        break;
 80044cc:	e00d      	b.n	80044ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ce:	f7fe fe03 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 80044d2:	61f8      	str	r0, [r7, #28]
        break;
 80044d4:	e009      	b.n	80044ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044da:	61fb      	str	r3, [r7, #28]
        break;
 80044dc:	e005      	b.n	80044ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044e8:	bf00      	nop
    }

    if (pclk != 0U)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d019      	beq.n	8004524 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	085a      	lsrs	r2, r3, #1
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	441a      	add	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b0f      	cmp	r3, #15
 8004508:	d909      	bls.n	800451e <UART_SetConfig+0x546>
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004510:	d205      	bcs.n	800451e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60da      	str	r2, [r3, #12]
 800451c:	e002      	b.n	8004524 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004530:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004534:	4618      	mov	r0, r3
 8004536:	3728      	adds	r7, #40	@ 0x28
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453e:	bf00      	nop
 8004540:	40008000 	.word	0x40008000
 8004544:	00f42400 	.word	0x00f42400

08004548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01a      	beq.n	800465e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004646:	d10a      	bne.n	800465e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b098      	sub	sp, #96	@ 0x60
 8004690:	af02      	add	r7, sp, #8
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800469c:	f7fd f8b4 	bl	8001808 <HAL_GetTick>
 80046a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d12e      	bne.n	800470e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b8:	2200      	movs	r2, #0
 80046ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f88c 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d021      	beq.n	800470e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046de:	653b      	str	r3, [r7, #80]	@ 0x50
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e6      	bne.n	80046ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e062      	b.n	80047d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d149      	bne.n	80047b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800471c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004724:	2200      	movs	r2, #0
 8004726:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f856 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d03c      	beq.n	80047b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	623b      	str	r3, [r7, #32]
   return(result);
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800474a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004754:	633b      	str	r3, [r7, #48]	@ 0x30
 8004756:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800475a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e6      	bne.n	8004736 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3308      	adds	r3, #8
 800476e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	60fb      	str	r3, [r7, #12]
   return(result);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004788:	61fa      	str	r2, [r7, #28]
 800478a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	69b9      	ldr	r1, [r7, #24]
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	617b      	str	r3, [r7, #20]
   return(result);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e011      	b.n	80047d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3758      	adds	r7, #88	@ 0x58
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ec:	e049      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d045      	beq.n	8004882 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	f7fd f807 	bl	8001808 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	429a      	cmp	r2, r3
 8004804:	d302      	bcc.n	800480c <UART_WaitOnFlagUntilTimeout+0x30>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e048      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d031      	beq.n	8004882 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b08      	cmp	r3, #8
 800482a:	d110      	bne.n	800484e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2208      	movs	r2, #8
 8004832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f838 	bl	80048aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2208      	movs	r2, #8
 800483e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e029      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800485c:	d111      	bne.n	8004882 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f81e 	bl	80048aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e00f      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	429a      	cmp	r2, r3
 800489e:	d0a6      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b095      	sub	sp, #84	@ 0x54
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80048d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e6      	bne.n	80048b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3308      	adds	r3, #8
 80048ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3308      	adds	r3, #8
 8004902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004904:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004906:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800490a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e5      	bne.n	80048e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491c:	2b01      	cmp	r3, #1
 800491e:	d118      	bne.n	8004952 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	60bb      	str	r3, [r7, #8]
   return(result);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 0310 	bic.w	r3, r3, #16
 8004934:	647b      	str	r3, [r7, #68]	@ 0x44
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	6979      	ldr	r1, [r7, #20]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	613b      	str	r3, [r7, #16]
   return(result);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e6      	bne.n	8004920 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004966:	bf00      	nop
 8004968:	3754      	adds	r7, #84	@ 0x54
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <__itoa>:
 8004972:	1e93      	subs	r3, r2, #2
 8004974:	2b22      	cmp	r3, #34	@ 0x22
 8004976:	b510      	push	{r4, lr}
 8004978:	460c      	mov	r4, r1
 800497a:	d904      	bls.n	8004986 <__itoa+0x14>
 800497c:	2300      	movs	r3, #0
 800497e:	700b      	strb	r3, [r1, #0]
 8004980:	461c      	mov	r4, r3
 8004982:	4620      	mov	r0, r4
 8004984:	bd10      	pop	{r4, pc}
 8004986:	2a0a      	cmp	r2, #10
 8004988:	d109      	bne.n	800499e <__itoa+0x2c>
 800498a:	2800      	cmp	r0, #0
 800498c:	da07      	bge.n	800499e <__itoa+0x2c>
 800498e:	232d      	movs	r3, #45	@ 0x2d
 8004990:	700b      	strb	r3, [r1, #0]
 8004992:	4240      	negs	r0, r0
 8004994:	2101      	movs	r1, #1
 8004996:	4421      	add	r1, r4
 8004998:	f000 f806 	bl	80049a8 <__utoa>
 800499c:	e7f1      	b.n	8004982 <__itoa+0x10>
 800499e:	2100      	movs	r1, #0
 80049a0:	e7f9      	b.n	8004996 <__itoa+0x24>

080049a2 <itoa>:
 80049a2:	f7ff bfe6 	b.w	8004972 <__itoa>
	...

080049a8 <__utoa>:
 80049a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049aa:	4c1f      	ldr	r4, [pc, #124]	@ (8004a28 <__utoa+0x80>)
 80049ac:	b08b      	sub	sp, #44	@ 0x2c
 80049ae:	4605      	mov	r5, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	466e      	mov	r6, sp
 80049b4:	f104 0c20 	add.w	ip, r4, #32
 80049b8:	6820      	ldr	r0, [r4, #0]
 80049ba:	6861      	ldr	r1, [r4, #4]
 80049bc:	4637      	mov	r7, r6
 80049be:	c703      	stmia	r7!, {r0, r1}
 80049c0:	3408      	adds	r4, #8
 80049c2:	4564      	cmp	r4, ip
 80049c4:	463e      	mov	r6, r7
 80049c6:	d1f7      	bne.n	80049b8 <__utoa+0x10>
 80049c8:	7921      	ldrb	r1, [r4, #4]
 80049ca:	7139      	strb	r1, [r7, #4]
 80049cc:	1e91      	subs	r1, r2, #2
 80049ce:	6820      	ldr	r0, [r4, #0]
 80049d0:	6038      	str	r0, [r7, #0]
 80049d2:	2922      	cmp	r1, #34	@ 0x22
 80049d4:	f04f 0100 	mov.w	r1, #0
 80049d8:	d904      	bls.n	80049e4 <__utoa+0x3c>
 80049da:	7019      	strb	r1, [r3, #0]
 80049dc:	460b      	mov	r3, r1
 80049de:	4618      	mov	r0, r3
 80049e0:	b00b      	add	sp, #44	@ 0x2c
 80049e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e4:	1e58      	subs	r0, r3, #1
 80049e6:	4684      	mov	ip, r0
 80049e8:	fbb5 f7f2 	udiv	r7, r5, r2
 80049ec:	fb02 5617 	mls	r6, r2, r7, r5
 80049f0:	3628      	adds	r6, #40	@ 0x28
 80049f2:	446e      	add	r6, sp
 80049f4:	460c      	mov	r4, r1
 80049f6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80049fa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80049fe:	462e      	mov	r6, r5
 8004a00:	42b2      	cmp	r2, r6
 8004a02:	f101 0101 	add.w	r1, r1, #1
 8004a06:	463d      	mov	r5, r7
 8004a08:	d9ee      	bls.n	80049e8 <__utoa+0x40>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	545a      	strb	r2, [r3, r1]
 8004a0e:	1919      	adds	r1, r3, r4
 8004a10:	1aa5      	subs	r5, r4, r2
 8004a12:	42aa      	cmp	r2, r5
 8004a14:	dae3      	bge.n	80049de <__utoa+0x36>
 8004a16:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004a1a:	780e      	ldrb	r6, [r1, #0]
 8004a1c:	7006      	strb	r6, [r0, #0]
 8004a1e:	3201      	adds	r2, #1
 8004a20:	f801 5901 	strb.w	r5, [r1], #-1
 8004a24:	e7f4      	b.n	8004a10 <__utoa+0x68>
 8004a26:	bf00      	nop
 8004a28:	08004b0c 	.word	0x08004b0c

08004a2c <memset>:
 8004a2c:	4402      	add	r2, r0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d100      	bne.n	8004a36 <memset+0xa>
 8004a34:	4770      	bx	lr
 8004a36:	f803 1b01 	strb.w	r1, [r3], #1
 8004a3a:	e7f9      	b.n	8004a30 <memset+0x4>

08004a3c <strncpy>:
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	3901      	subs	r1, #1
 8004a40:	4603      	mov	r3, r0
 8004a42:	b132      	cbz	r2, 8004a52 <strncpy+0x16>
 8004a44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004a48:	f803 4b01 	strb.w	r4, [r3], #1
 8004a4c:	3a01      	subs	r2, #1
 8004a4e:	2c00      	cmp	r4, #0
 8004a50:	d1f7      	bne.n	8004a42 <strncpy+0x6>
 8004a52:	441a      	add	r2, r3
 8004a54:	2100      	movs	r1, #0
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d100      	bne.n	8004a5c <strncpy+0x20>
 8004a5a:	bd10      	pop	{r4, pc}
 8004a5c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a60:	e7f9      	b.n	8004a56 <strncpy+0x1a>
	...

08004a64 <__libc_init_array>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	4d0d      	ldr	r5, [pc, #52]	@ (8004a9c <__libc_init_array+0x38>)
 8004a68:	4c0d      	ldr	r4, [pc, #52]	@ (8004aa0 <__libc_init_array+0x3c>)
 8004a6a:	1b64      	subs	r4, r4, r5
 8004a6c:	10a4      	asrs	r4, r4, #2
 8004a6e:	2600      	movs	r6, #0
 8004a70:	42a6      	cmp	r6, r4
 8004a72:	d109      	bne.n	8004a88 <__libc_init_array+0x24>
 8004a74:	4d0b      	ldr	r5, [pc, #44]	@ (8004aa4 <__libc_init_array+0x40>)
 8004a76:	4c0c      	ldr	r4, [pc, #48]	@ (8004aa8 <__libc_init_array+0x44>)
 8004a78:	f000 f818 	bl	8004aac <_init>
 8004a7c:	1b64      	subs	r4, r4, r5
 8004a7e:	10a4      	asrs	r4, r4, #2
 8004a80:	2600      	movs	r6, #0
 8004a82:	42a6      	cmp	r6, r4
 8004a84:	d105      	bne.n	8004a92 <__libc_init_array+0x2e>
 8004a86:	bd70      	pop	{r4, r5, r6, pc}
 8004a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8c:	4798      	blx	r3
 8004a8e:	3601      	adds	r6, #1
 8004a90:	e7ee      	b.n	8004a70 <__libc_init_array+0xc>
 8004a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a96:	4798      	blx	r3
 8004a98:	3601      	adds	r6, #1
 8004a9a:	e7f2      	b.n	8004a82 <__libc_init_array+0x1e>
 8004a9c:	08004b3c 	.word	0x08004b3c
 8004aa0:	08004b3c 	.word	0x08004b3c
 8004aa4:	08004b3c 	.word	0x08004b3c
 8004aa8:	08004b40 	.word	0x08004b40

08004aac <_init>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr

08004ab8 <_fini>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr
